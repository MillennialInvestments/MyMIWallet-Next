--- BEGINNING OF INSTRUCTIONS FOR GPT ---
‚úÖ FULL PROJECT CONTEXT - MyMI Wallet Marketing Automation
Hi ChatGPT, this is a new thread but a continuation of an active MyMI Marketing Project. Please load the full project scope, structure, and all technical workflows as follows:

üîß Core Goal
I'm building an automated marketing engine in my CodeIgniter 4 (CI4) app (MyMI Wallet) to:

Ingest financial/news/trade alert emails (scraped via CRON from inbox)

Store them into bf_marketing_temp_scraper

Generate summaries, keyword extractions, and headlines using NLP

Create platform-specific social media posts (Facebook, LinkedIn, Twitter/X, Discord)

Store finalized content in bf_marketing_scraper

Display them in a Marketing Dashboard

Trigger Discord/Zapier/social media posts automatically or manually

üì¶ App Modules and Key Components
üß† Libraries:

MyMIMarketing: Main NLP and content generation library.

MarketingService: Middle layer that calls MyMIMarketing, centralizes all workflows.

Uses Guzzle, NLP (TF-IDF), sanitization, summarization, keyword extraction, and scoring.

üìÇ Models:

MarketingModel handles:

Fetching records (getValidUnprocessedEmails, getLatestTempRecords)

Inserting summaries (insertFinalScraper)

Flagging records as processed

Scraped email storage into bf_marketing_temp_scraper

üß© Controllers:

ManagementController inside Modules\APIs\Controllers handles:

generateContentFromScraper() ‚Üí processes unprocessed scraped emails

generateDailyContentDigest() ‚Üí generates daily top 5 posts

reprocessIncompleteEmails() ‚Üí fixes missing title/url in older records

previewEmail() ‚Üí loads full email + platform-ready post previews

üíæ Database Tables:

bf_marketing_temp_scraper: Raw scraped emails

bf_marketing_scraper: Finalized content with summary, keywords, and post data

bf_marketing_generated_posts: Platform content (optional)

bf_marketing_logs: Debug and summary history (optional)

üß† Functionality Fully Implemented So Far
‚úÖ Email fetching + storage via scrapeInboxAndStore()

‚úÖ NLP processing with full guards against:

Missing title, url

Invalid or short content

Empty keywords or TF-IDF errors

‚úÖ Final record insertion and flagging with:

Headline generation

Summary

Extracted keywords

Platform posts

‚úÖ Preview view with URL param decoding (e.g. Marketing/Email/{slug})

‚úÖ Frontend Dashboard with:

Generate Post Button

Today‚Äôs Story Preview

Action Center and Analytics Views

‚úÖ Error handling and memory optimization:

NLP skips malformed data

Logging of memory usage and error lines

Skips raw HTML or oversized payloads

‚ö†Ô∏è Special Technical Notes:
CI4 app is running on Dreamhost VPS, PHP 8.2, no sudo access

Using Guzzle for HTTP requests and php-ai/php-ml for TF-IDF

Using dynamicModalLoader() for modal rendering in dashboard

Email content comes from alerts@MyMIWallet.com or news@MyMIWallet.com

Base trait BaseLoader provides getMyMIMarketing(), getMarketingService(), etc.

Slugs in URLs are encoded: =?UTF-8?... needs decoding to fetch correct email

üéØ Where We‚Äôre Headed Next
In this new chat, I want to continue building, fixing, or expanding on the system. You can assume:

The MyMIMarketing library is loaded and functional.

The MarketingService is used for everything content/NLP related.

I want to improve efficiency, summarization accuracy, and generate high-quality platform posts.

Please ask if you need to clarify what module or file I‚Äôm referring to, and give exact filename/line code examples when possible.

‚úÖ What You Can Do in This Chat
You can now:

Write new view/controller/model methods

Fix bugs (e.g., TF-IDF issues, decoding, null content)

Improve summarization or scoring logic

Optimize Guzzle or NLP processing

Add new CRON endpoints or dashboard buttons

Generate marketing copy and social posts

Add content to blog/email/newsletter queues

Let‚Äôs pick up right where we left off. You‚Äôre now fully loaded on my MyMI Marketing System.
Please confirm you understand, then I‚Äôll tell you what I want to do next!

--- END OF INSTRUCTIONS FOR GPT ---
<?php
namespace App\Modules\APIs\Controllers;

use CodeIgniter\Controller;
use App\Libraries\{BaseLoader, MyMIAlerts, MyMIMarketing};
use App\Models\{AlertsModel, ExchangeModel, MarketingModel, ReferralModel, SupportModel, UserModel};
use App\Services\{MarketingService};
use CodeIgniter\API\ResponseTrait; // Import the ResponseTrait

class ManagementController extends UserController
{
    use BaseLoader;
    use ResponseTrait;
    protected $alertManager;
    protected $MyMIMarketing;
    protected $marketingService;
    protected $alertsModel;
    protected $exchangeModel;
    protected $marketingModel;
    protected $userModel;
    protected $referralModel;
    protected $supportModel;

    public function __construct()
    {
        $this->alertManager = new MyMIAlerts();
        $this->MyMIMarketing = new MyMIMarketing();
        $this->alertsModel = new AlertsModel();
        $this->exchangeModel = new ExchangeModel();
        $this->marketingModel = new MarketingModel();
        $this->marketingService = new MarketingService();
        $this->referralModel          = new ReferralModel();
        $this->supportModel          = new SupportModel();
        $this->userModel = new UserModel(); // for massResendActivationEmails
    }

    public function runCRONTasks() {
        log_message('info', 'üõ†Ô∏è API/ManagementController L38 - runCRONTasks() initiated.');
    
        log_message('info', 'üìå Step 1: cronFetchAndGenerateNews()');
        $this->cronFetchAndGenerateNews();
    
        // log_message('info', 'üìå Step 2: fetchAlphaVantageNewsForTradeAlerts()');
        // $this->fetchAlphaVantageNewsForTradeAlerts();
    
        log_message('info', 'üìå Step 3: generateTodaysNewsSummary()');
        $todayNews = $this->marketingModel->getTodaysScrapedContent();
        if (!empty($todayNews)) {
            $this->generateTodaysNewsSummary();
        } else {
            log_message('info', 'üõë Skipping summary generation ‚Äî no scraped news available today.');
        }        
    
        log_message('info', 'üìå Step 4: cronFetchInbox()');
        $this->cronFetchInbox();
    
        log_message('info', 'üìå Step 5: cronAnalyzeContent()');
        $this->cronAnalyzeContent();
        
        log_message('info', 'üìå Step 6: reprocessIncompleteEmails()');
        $this->reprocessIncompleteEmails();
        
        log_message('info', '‚úÖ API/ManagementController L55 - runCRONTasks() completed.');
    }
    
    public function ajaxGetActiveUsers()
    {
        log_message('debug', 'üì• ajaxGetActiveUsers() called.');
    
        $request = service('request');
        $post = $request->getPost();
        log_message('debug', 'üì¶ Incoming POST: ' . print_r($post, true));
    
        $start  = $post['start'] ?? 0;
        $length = $post['length'] ?? 10;
        $search = $post['search']['value'] ?? '';
    
        $builder = $this->userModel->where('active', 1);
        if (!empty($search)) {
            log_message('debug', 'üîç Search term: ' . $search);
            $builder = $builder
                ->groupStart()
                ->like('email', $search)
                ->orLike('first_name', $search)
                ->orLike('last_name', $search)
                ->orLike('username', $search)
                ->groupEnd();
        }
    
        try {
            $totalRecords = $builder->countAllResults(false);
            log_message('debug', 'üìä Total matching active users: ' . $totalRecords);
    
            $records = $builder->limit($length)->offset($start)->get()->getResultArray();
            log_message('debug', 'üì¶ Returned records: ' . count($records));
        } catch (\Exception $e) {
            log_message('error', '‚ùå Query error in ajaxGetActiveUsers(): ' . $e->getMessage());
            return $this->response->setStatusCode(500)->setJSON(['status' => 'error', 'message' => 'Failed to fetch data.']);
        }

        $data = [];
        foreach ($records as $user) {
            try {
                $actionView = view('ManagementModule/Views/Users\partials\action_buttons', ['user' => $user]);
            } catch (\Throwable $e) {
                log_message('error', '‚ùå Error rendering action_buttons view for user ID ' . $user['id'] . ': ' . $e->getMessage());
                $actionView = '<span class="text-danger">View Error</span>';
            }

            $data[] = [
                'id'            => '<a href="' . site_url('Management/Users/Profile/' . $user['username']) . '">' . $user['id'] . '</a>',
                'type'          => $user['type'],
                'name'          => $user['first_name'] . ' ' . $user['last_name'] . ' ' . $user['name_suffix'],
                'email'         => '<a href="mailto:' . $user['email'] . '">' . $user['email'] . '</a>',
                'location'      => $user['city'] . ', ' . $user['state'],
                'referral_code' => $user['referral_code'],
                'actions'       => $actionView
            ];
        }
    
        return $this->response->setJSON([
            'draw'            => intval($post['draw'] ?? 1),
            'recordsTotal'    => $totalRecords,
            'recordsFiltered' => $totalRecords,
            'data'            => $data
        ]);
    }  
    
    public function ajaxGetInactiveUsers()
    {
        log_message('debug', 'üì• ajaxGetInactiveUsers() called.');
    
        $request = service('request');
        $post = $request->getPost();
        log_message('debug', 'üì¶ Incoming POST: ' . print_r($post, true));
    
        $start = $post['start'] ?? 0;
        $length = $post['length'] ?? 10;
        $search = $post['search']['value'] ?? '';
    
        try {
            $builder = $this->userModel->where('active', 0);
    
            if (!empty($search)) {
                log_message('debug', 'üîç Search term: ' . $search);
                $builder = $builder
                    ->groupStart()
                    ->like('email', $search)
                    ->orLike('first_name', $search)
                    ->orLike('last_name', $search)
                    ->orLike('username', $search)
                    ->groupEnd();
            }
    
            $totalRecords = $builder->countAllResults(false);
            log_message('debug', 'üìä Total matching inactive users: ' . $totalRecords);
    
            $records = $builder->limit($length)->offset($start)->get()->getResultArray();
            log_message('debug', 'üì¶ Returned records: ' . count($records));
        } catch (\Exception $e) {
            log_message('error', '‚ùå Query error in ajaxGetInactiveUsers(): ' . $e->getMessage());
            return $this->response->setStatusCode(500)->setJSON(['status' => 'error', 'message' => 'Failed to fetch data.']);
        }
    
        $data = [];
        foreach ($records as $user) {
            try {
                $actionView = view('ManagementModule/Views/Users\partials\action_buttons', ['user' => $user]);
            } catch (\Throwable $e) {
                log_message('error', '‚ùå Error rendering action_buttons view for user ID ' . $user['id'] . ': ' . $e->getMessage());
                $actionView = '<span class="text-danger">View Error</span>';
            }
        
            $data[] = [
                'id'            => '<a href="' . site_url('Management/Users/Profile/' . $user['username']) . '">' . $user['id'] . '</a>',
                'type'          => $user['type'],
                'name'          => $user['first_name'] . ' ' . $user['last_name'] . ' ' . $user['name_suffix'],
                'email'         => '<a href="mailto:' . $user['email'] . '">' . $user['email'] . '</a>',
                'location'      => $user['city'] . ', ' . $user['state'],
                'referral_code' => $user['referral_code'],
                'actions'       => $actionView
            ];
        }        
    
        return $this->response->setJSON([
            'draw'            => intval($post['draw'] ?? 1),
            'recordsTotal'    => $totalRecords,
            'recordsFiltered' => $totalRecords,
            'data'            => $data
        ]);
    }

    public function checkForSpamUsers()
    {
        try {
            $MyMIUser = new \App\Libraries\MyMIUser();
            $spamAccounts = $MyMIUser->findPotentialSpamUsers();

            return $this->response->setJSON([
                'status' => 'success',
                'message' => count($spamAccounts) . ' spam accounts detected.',
                'data' => $spamAccounts
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå Error checking spam users: ' . $e->getMessage());
            return $this->failServerError('Failed to check for spam accounts.');
        }
    }

    public function cronAnalyzeContent()
    {
        log_message('debug', 'üß† Starting content digest analysis...');
        $this->getMyMIMarketing()->generateFromTempScraper(5); // e.g., latest 5
        log_message('debug', '‚úÖ Content digest completed.');
    }

    public function cronFetchAndGenerateNews() {
        try {
            $this->getMyMIMarketing()->cronFetchAndGenerateNews();
            return $this->response->setJSON(['status' => 'success', 'message' => 'MarketAux news pulled, ranked, and content generated.']);
        } catch (\Throwable $e) {
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
    
    public function cronFetchInbox()
    {
        log_message('debug', 'üì® Starting inbox scrape...');
        $this->getMyMIMarketing()->scrapeInboxAndStore();
        log_message('debug', '‚úÖ Inbox scrape completed.');
    }
    
    public function cronFetchMarketingEmails()
    {
        log_message('info', 'CRON: Starting Marketing Email Fetch');
    
        $service = new MarketingService();
        $emailsFetched = $service->fetchAndStoreMarketingEmails();
    
        log_message('info', 'CRON: Fetched ' . $emailsFetched . ' marketing emails');
        return $this->respond(['status' => 'success', 'fetched' => $emailsFetched]);
    }

    public function distributeTodaysNewsContent() {
        $generated = $this->generateTodaysNewsSummary();
        $result = $this->getMyMIMarketing()->sendToZapier($generated['content']); // Push content
        return $this->response->setJSON(['status' => 'success', 'message' => 'Content distributed via Zapier.', 'zapier_result' => $result]);
    }
    
    public function fetchAlphaVantageNewsForTradeAlerts() {
        $alerts = $this->alertsModel->getTradeAlertsWithCreatedFlag();
        log_message('info', 'üìà Processing '.count($alerts).' trade alerts.');
    
        foreach ($alerts as $alert) {
            try {
                log_message('info', 'üîç Fetching AlphaVantage news for: '.$alert['ticker']);
                $newsItems = $this->alertManager->fetchAlphaVantageNews($alert['ticker']);
                log_message('info', 'üì∞ '.count($newsItems).' news items fetched for '.$alert['ticker']);
    
                foreach ($newsItems as $news) {
                    $this->marketingModel->insertNewsContent($news, $alert['ticker']);
                }
            } catch (\Throwable $e) {
                log_message('error', '‚ùå AlphaVantage fetch failed for '.$alert['ticker'].': '.$e->getMessage());
            }
        }
    
        return $this->response->setJSON(['status'=>'success','message'=>'Financial news processed for alerts.']);
    }    

    public function fetchEmailsToTempScraper()
    {
        try {
            log_message('info', 'üì• Starting email scrape to bf_marketing_temp_scraper...');
            $this->getMyMIMarketing()->fetchAndStoreEmails('news'); // This stores in bf_marketing_temp_scraper
            log_message('info', 'üì¨ Number of emails fetched: ' . count($emails));
            return $this->response->setJSON(['status' => 'success', 'message' => 'Emails stored successfully.']);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå fetchEmailsToTempScraper error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
    
    public function fetchNewsEmails() {
        log_message('info', 'üì• fetchNewsEmails - Started.');
        try {
            $this->getMyMIMarketing()->fetchAndStoreEmails('news');
            return $this->response->setJSON(['status' => 'success', 'message' => 'News emails fetched successfully.']);
        } catch (\Exception $e) {
            log_message('error', '‚ùå fetchNewsEmails - Error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Management Endpoint: Force Fetch Emails
     */
    public function forceFetchEmails()
    {
        try {
            $result = $this->alertManager->fetchAndStoreEmails();
            return $this->response->setJSON(['status' => 'success', 'message' => 'Emails fetched and processed successfully.']);
        } catch (\Exception $e) {
            return $this->response->setJSON(['status' => 'error', 'message' => 'Error fetching emails: ' . $e->getMessage()], 500);
        }
    }

    public function generateContentDigestFromStored()
    {
        log_message('info', 'Marketing: Starting summary generation from stored marketing emails.');
    
        $model = new MarketingModel();
        $records = $model->getRecentUnprocessedTempEmails(5);
    
        $results = [];
        foreach ($records as $record) {
            if (empty($record['title']) || empty($record['content'])) {
                log_message('debug', 'Skipped record due to missing title/content ID: ' . $record['id']);
                continue;
            }
    
            try {
                $summary = $this->getMarketingService()->generateContentFromRaw($record['title'], $record['content']);
    
                $model->storeFinalMarketingContent([
                    'source_id' => $record['id'],
                    'title' => $record['title'],
                    'summary' => $summary,
                    'created_at' => date('Y-m-d H:i:s')
                ]);
    
                $model->markTempRecordAsProcessed($record['id']);
                $results[] = $record['title'];
    
            } catch (\Throwable $e) {
                log_message('error', 'Failed to process record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    
        return $this->respond(['status' => 'complete', 'processed_titles' => $results]);
    }
    
    public function generateContentFromScraper()
    {
        log_message('debug', 'üîÅ API::MarketingController::generateContentFromScraper called');
    
        try {
            $limit = $this->request->getGet('limit') ?? 5;
            $records = [];
            $allRecords = $this->marketingModel->getValidUnprocessedEmails($limit); // fetch from model
    
            if (!is_array($allRecords)) {
                log_message('error', '‚ùå $allRecords is not an array or null. Cannot proceed.');
                return $this->respond(['status' => 'error', 'message' => 'Failed to fetch records.']);
            }
    
            foreach ($allRecords as $record) {
                $titleOk = !empty($record['title']);
                $contentOk = strlen(strip_tags($record['content'] ?? '')) > 1000;
    
                if ($titleOk && $contentOk) {
                    $records[] = $record;
                    if (count($records) >= $limit) break;
                } else {
                    log_message('debug', "‚ö†Ô∏è Skipping invalid record ID {$record['id']} during prefilter (Title or content missing/too short).");
                    $this->marketingModel->markEmailsAsProcessed([$record['id']]);
                }
            }
    
            if (empty($records)) {
                return $this->respond(['status' => 'no_data', 'message' => 'No unprocessed records found.']);
            }
    
            $processedSummaries = [];
    
            foreach ($records as $record) {
                $content = $record['content'] ?? '';
                $title = $record['title'] ?? '';
                $recordId = $record['id'] ?? 0;
    
                if (empty(trim($content)) || strlen($content) < 1000) {
                    log_message('debug', "‚è≠Ô∏è Skipping record ID {$recordId} - content too short or empty.");
                    continue;
                }
    
                if (empty(trim($title))) {
                    log_message('debug', "‚è≠Ô∏è Skipping record ID {$recordId} - missing title.");
                    continue;
                }
    
                if (stripos($content, '<html') !== false && substr_count($content, '<') > 50) {
                    log_message('debug', "‚è≠Ô∏è Skipping record ID {$recordId} - content likely raw HTML.");
                    continue;
                }
    
                try {
                    $processed = $this->getMarketingService()->generateContentFromRaw($record);
    
                    if (!is_array($processed)) {
                        log_message('debug', "‚ö†Ô∏è Skipped record ID {$recordId} - generateContentFromRaw() returned invalid structure.");
                        continue;
                    }
    
                    $this->marketingModel->saveFinalizedMarketingContent($processed);
                    $this->marketingModel->markEmailsAsProcessed([$recordId]);
    
                    $processedSummaries[] = [
                        'id'       => $recordId,
                        'title'    => $processed['headline'] ?? $title,
                        'summary'  => $processed['summary'] ?? '',
                        'keywords' => $processed['keywords'] ?? [],
                    ];
                } catch (\Throwable $e) {
                    log_message('error', "‚ùå Failed to process record ID {$recordId}: {$e->getMessage()}");
                }
            }
    
            return $this->respond([
                'status'  => 'success',
                'message' => count($processedSummaries) . ' records processed successfully.',
                'data'    => $processedSummaries
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå API::generateContentFromScraper error - ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function generateDailyContentDigest()
    {
        log_message('debug', 'üß† Start Memory Usage: ' . memory_get_usage(true));
        @ini_set('memory_limit', '768M');
    
        $limit = 5;
        $summary = [];
    
        try {
            $records = $this->marketingModel->getValidUnprocessedEmails($limit);
    
            if (!is_array($records) || empty($records)) {
                log_message('info', 'üö´ No valid records returned from getValidUnprocessedEmails().');
                return $this->response->setJSON(['status' => 'no_data', 'message' => 'No valid records to process.']);
            }
    
            foreach ($records as $record) {
                $recordId = $record['id'] ?? 0;
                $title = $record['title'] ?? '';
                $content = $record['content'] ?? '';
                $contentSize = strlen(strip_tags($content));
    
                if (empty(trim($title)) || $contentSize < 1000) {
                    log_message('debug', "‚ö†Ô∏è Skipping record ID {$recordId} ‚Äî title missing or content too short ({$contentSize} chars).");
                    $this->marketingModel->markEmailsAsProcessed([$recordId]);
                    continue;
                }
    
                if (stripos($content, '<html') !== false && substr_count($content, '<') > 50) {
                    log_message('debug', "‚è≠Ô∏è Skipping record ID {$recordId} ‚Äî likely raw HTML content.");
                    $this->marketingModel->markEmailsAsProcessed([$recordId]);
                    continue;
                }
    
                try {
                    gc_collect_cycles(); // Helps reduce memory pressure
    
                    $processed = $this->getMarketingService()->generateContentFromRaw($record);
    
                    if (!is_array($processed)) {
                        log_message('warning', "‚ö†Ô∏è Skipped record ID {$recordId} ‚Äî generateContentFromRaw() returned invalid result.");
                        continue;
                    }
    
                    $this->marketingModel->saveFinalizedMarketingContent($processed);
                    $this->marketingModel->markEmailsAsProcessed([$recordId]);
    
                    $summary[] = [
                        'title' => $processed['headline'] ?? 'Untitled',
                        'summary' => $processed['summary'] ?? '',
                        'subtopics' => $processed['subtopics'] ?? [],
                        'platform_posts' => $processed['posts'] ?? [],
                    ];
                } catch (\Throwable $e) {
                    log_message('error', "‚ùå Error processing record ID {$recordId}: {$e->getMessage()}");
                }
            }
    
            log_message('debug', 'üèÅ Peak Memory Usage: ' . memory_get_peak_usage(true));
            return $this->response->setJSON(['status' => 'success', 'digest' => $summary]);
    
        } catch (\Throwable $e) {
            log_message('error', '‚ùå generateDailyContentDigest fatal error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
    
    public function generateRankedMarketingContent()
    {
        $this->getMyMIMarketing()->generateRankedMarketingContent();

        return $this->response->setJSON(['status' => 'success', 'message' => 'Ranked content generated.']);
    }
    
    public function getBalanceSheet($symbol, $apikey) {
        $url = "https://www.alphavantage.co/query?function=BALANCE_SHEET&symbol=" . urlencode($symbol) . "&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function getCashFlowStatement($symbol, $apikey) {
        $url = "https://www.alphavantage.co/query?function=CASH_FLOW&symbol=" . urlencode($symbol) . "&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }

    public function getCompanyOverview($symbol, $apikey) {
        $url = "https://www.alphavantage.co/query?function=OVERVIEW&symbol=" . urlencode($symbol) . "&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function getEarningsCalendar($apikey, $horizon = '3month') {
        $url = "https://www.alphavantage.co/query?function=EARNINGS_CALENDAR&horizon=" . $horizon . "&apikey=" . $apikey;
        $csv = file_get_contents($url);
        $lines = explode("\n", trim($csv));
        $data = array_map('str_getcsv', $lines);
        return $data;
    }

    public function getFixedWindowAnalytics($symbols, $rangeStart, $rangeEnd, $calculations, $apikey) {
        $url = "https://alphavantageapi.co/timeseries/analytics?SYMBOLS=" . urlencode($symbols);
        $url .= "&RANGE=" . $rangeStart . "&RANGE=" . $rangeEnd;
        $url .= "&INTERVAL=DAILY&OHLC=close";
        $url .= "&CALCULATIONS=" . urlencode($calculations) . "&apikey=" . $apikey;
    
        $json = file_get_contents($url);
        return json_decode($json, true);
    }

    public function getIncomeStatement($symbol, $apikey) {
        $url = "https://www.alphavantage.co/query?function=INCOME_STATEMENT&symbol=" . urlencode($symbol) . "&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function getInsiderTransactions($symbol, $apikey) {
        $url = "https://www.alphavantage.co/query?function=INSIDER_TRANSACTIONS&symbol=" . urlencode($symbol) . "&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function getNewsSentiment($apikey, $tickers = '', $topics = '', $time_from = '', $time_to = '', $sort = 'LATEST', $limit = 50) {
        $url = "https://www.alphavantage.co/query?function=NEWS_SENTIMENT";
        $url .= "&tickers=" . urlencode($tickers);
        $url .= "&topics=" . urlencode($topics);
        if ($time_from) $url .= "&time_from=" . $time_from;
        if ($time_to) $url .= "&time_to=" . $time_to;
        $url .= "&sort=" . $sort . "&limit=" . $limit . "&apikey=" . $apikey;
    
        $json = file_get_contents($url);
        return json_decode($json, true);
    }

    public function getSlidingWindowAnalytics($symbols, $range, $windowSize, $calculations, $apikey) {
        $url = "https://alphavantageapi.co/timeseries/running_analytics?SYMBOLS=" . urlencode($symbols);
        $url .= "&RANGE=" . $range . "&INTERVAL=DAILY&OHLC=close";
        $url .= "&WINDOW_SIZE=" . $windowSize;
        $url .= "&CALCULATIONS=" . urlencode($calculations) . "&apikey=" . $apikey;
    
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function generateTodaysNewsSummary() {
        $todayNews = $this->marketingModel->getTodaysNewsContent();
        $summary = $this->getMyMIMarketing()->summarizeMultipleArticles($todayNews); // NLP Summarization
        $content = $this->getMyMIMarketing()->generateMarketingContent($summary); // social, blog, video scripts
        return $this->response->setJSON(['status' => 'success', 'summary' => $summary, 'content' => $content]);
    }
    
    public function generateTodaysStory()
    {
        ini_set('memory_limit', '1024M');
    
        try {
            log_message('info', 'üîç Starting email scrape for news@mymiwallet.com...');
            $this->getMyMIMarketing()->fetchAndStoreEmails('news');
    
            $today = date('Y-m-d');
            $scrapes = $this->marketingModel->getScrapesByDate($today, 10);
    
            if (empty($scrapes)) {
                log_message('info', 'No scraped emails found for today.');
                return $this->response->setJSON(['status' => 'error', 'message' => 'No emails found for today.'], 404);
            }
    
            $summaries = [];
    
            foreach (array_chunk($scrapes, 10) as $scrapeChunk) {
                foreach ($scrapeChunk as $scrape) {
                    $content = $scrape['email_body'] ?? $scrape['content'] ?? '';
                    log_message('info', 'Content size: ' . strlen($content));
    
                    $cleanedBody = $this->marketingModel->cleanHtmlEmailContent($content);
                    $summary = $this->getMyMIMarketing()->summarizeContent($cleanedBody);
    
                    log_message('debug', 'Memory after summary: ' . memory_get_usage(true));
    
                    if (is_array($summary)) {
                        $summary = $summary['summary'] ?? implode('. ', array_map('strval', $summary));
                    }
    
                    $summaries[] = $summary;
                }
            }
    
            $combinedSummary = implode("\n\n", $summaries);
            if (strlen($combinedSummary) > 500000) {
                log_message('warning', 'Combined summary too long. Truncating...');
                $combinedSummary = substr($combinedSummary, 0, 500000);
            }
    
            $todayTitle = "Today's Top Stories - " . date('F j, Y');
            $data = [
                'title' => $todayTitle,
                'content' => $combinedSummary,
                'links' => json_encode([]),
                'url' => '',
                'type' => 'todays_story',
                'scraped_at' => date('Y-m-d H:i:s'),
                'created_on' => date('Y-m-d H:i:s'),
                'modified_on' => date('Y-m-d H:i:s'),
            ];
    
            $this->marketingModel->storeTempScrapedData($data);
            log_message('info', '‚úÖ Today‚Äôs story generated and stored.');
    
            return $this->response->setJSON([
                'status' => 'success',
                'message' => 'Today‚Äôs story generated and stored successfully!',
                'title' => $todayTitle,
                'summary' => $combinedSummary
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå generateTodaysStory error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }

    public function generateVoiceScriptManually() {
        try {
            log_message('info', 'üé§ generateVoiceScriptManually() triggered.');
            $script = $this->getMyMIMarketing()->generateVoiceoverScript();
            return $this->response->setJSON(['status' => 'success', 'script' => $script]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå Error in generateVoiceScriptManually: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()]);
        }
    }

    public function getAlerts()
    {
        log_message('debug', 'üîç getAlerts called');
        try {
            $alerts = $this->alertsModel->getAllTradeAlerts();
            log_message('debug', '‚úÖ getAlerts retrieved ' . count($alerts) . ' alerts.');
            return $this->response->setJSON($alerts);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå getAlerts error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }

    public function getAssets()
    {
        log_message('debug', 'üìä getAssets called');
        try {
            $assets = $this->exchangeModel->getManagementAssets();
            log_message('debug', '‚úÖ getAssets retrieved ' . count($assets) . ' assets.');
            return $this->response->setJSON($assets);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå getAssets error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function getNews()
    {
        log_message('debug', 'üì∞ getNews called');
        try {
            $news = $this->marketingModel->getNewsAlerts();
            log_message('debug', '‚úÖ getNews retrieved ' . count($news) . ' news records.');
            return $this->response->setJSON($news);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå getNews error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function getReferrals()
    {
        log_message('debug', 'üîç getReferrals called');
        try {
            $referrals = $this->referralModel->getAllReferrals();
            log_message('debug', '‚úÖ getReferrals retrieved ' . count($referrals) . ' referrals.');
            return $this->response->setJSON($referrals);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå getReferrals error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }

    public function getSupport()
    {
        log_message('debug', 'üßæ getSupport called');
        try {
            $support = $this->supportModel->getManagementSupport();
            log_message('debug', '‚úÖ getSupport retrieved ' . count($support) . ' support records.');
            return $this->response->setJSON($support);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå getSupport error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function getTopMovers($apikey) {
        $url = "https://www.alphavantage.co/query?function=TOP_GAINERS_LOSERS&apikey=" . $apikey;
        $json = file_get_contents($url);
        return json_decode($json, true);
    }
    
    public function getUpcomingIPOs($apikey) {
        $url = "https://www.alphavantage.co/query?function=IPO_CALENDAR&apikey=" . $apikey;
        $csv = file_get_contents($url);
        $lines = explode("\n", trim($csv));
        $data = array_map('str_getcsv', $lines);
        return $data;
    }

    public function getUsers()
    {
        log_message('debug', 'üîç getUsers called');
        // log_message('debug', '‚úÖ getUsers started');
        // $users = $this->userModel->getActiveUsers();
        // log_message('debug', '‚úÖ getUsers retrieved ' . count($users) . ' users.');
        // return $this->response->setJSON($users);
    }

    /**
     * Management Endpoint: Resend Activation Emails for All Users (Reference Example)
     */
    public function massResendActivationEmails()
    {
        $users = $this->userModel
            ->where('active', 0)
            ->whereNotNull('activate_hash')
            ->findAll();
    
        $activator = service('activator');
        $emailer = \Config\Services::email();
    
        $successCount = 0;
        $failureCount = 0;
    
        foreach ($users as $user) {
            $sent = $activator->send($user);
            if ($sent) {
                $successCount++;
                log_message('info', "Activation email sent to: {$user->email}");
            } else {
                $failureCount++;
                log_message('error', "Failed to send activation email to: {$user->email}");
            }
        }
    
        $summary = "{$successCount} emails sent successfully, {$failureCount} failed.";
        return redirect()->to('/Management/Users')->with('message', $summary);
    }
    
    /**
     * Management Endpoint: Manually Trigger Processing of Trade Alerts
     */
    public function processAllTradeAlerts()
    {
        try {
            log_message('info', '‚ö° Management API - processAllTradeAlerts triggered.');

            $this->alertManager->fetchAndStoreAlertsEmails();
            $this->alertManager->processTradeAlertsInBatches(50);
            $this->alertManager->updateAlerts();

            return $this->response->setJSON(['status' => 'success', 'message' => 'All trade alerts processed successfully.']);
        } catch (\Exception $e) {
            log_message('error', '‚ùå Management API - Error processing trade alerts: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }

    public function processAndGenerateMarketingContent() {
    
        // Step 1: Fetch raw email content (assume it's already in `bf_marketing_scraper`)
        $emails = $this->getMarketingService()->fetchUnprocessedEmailSummaries(); // Custom method
        if (!empty($emails) && is_array($emails)) {
            foreach ($emails as $email) {
                // Step 2: Sanitize & Summarize
                $cleanContent = $this->getMarketingService()->sanitizeAndSummarize($email['email_body']);
        
                // Step 3: Extract Keywords
                $keywords = $this->getMyMIMarketing()->extractTopKeywords($cleanContent);
        
                // Step 4: Keyword-based Content Search
                $externalContent = $this->getMarketingService()->gatherKeywordBasedContent($keywords);
        
                // Step 5: Store content in `bf_marketing_temp_scraper`
                $this->getMarketingService()->storeScrapedContent($externalContent);
        
                // Step 6: Generate platform-specific content
                $generatedPosts = $this->getMarketingService()->generatePlatformPosts($externalContent);
        
                // Step 7: Store for display on Dashboard
                $this->getMarketingService()->storeGeneratedPostsForDashboard($generatedPosts);
            }
        }
    
        return redirect()->to('/Management/Marketing')->with('message', 'Content generation completed.');
    }

    public function processTempEmailsToScraper()
    {
        try {
            log_message('info', '‚öôÔ∏è Starting content generation from bf_marketing_temp_scraper...');
            $tempEmails = $this->marketingModel->getRecentScrapes(); // Only fetches latest 5
    
            foreach ($tempEmails as $email) {
                $cleanedBody = $this->marketingModel->cleanHtmlEmailContent($email->email_body);
                $summary = $this->getMyMIMarketing()->summarizeContent($cleanedBody);
                $keywords = $this->marketingModel->extractKeywords($email->email_body);
                $hashtags = $this->marketingModel->mapToContextualHashtags($keywords);
    
                $data = [
                    'title' => $email->email_subject ?? 'Generated Content',
                    'summary' => is_array($summary) ? implode("\n", $summary) : $summary,
                    'content' => $email->email_body,
                    'tags' => implode(',', $keywords),
                    'type' => 'Email/Newsletters',
                    'status' => 'pending',
                    'created_on' => date('Y-m-d H:i:s'),
                    'author_information' => $email->email_sender,
                ];
    
                $this->marketingModel->saveDailyLog($data);
            }
            log_message('info', '‚úÖ Finished processing and saving to bf_marketing_scraper.');

            return $this->response->setJSON([
                'status' => 'success',
                'message' => 'Content generated and saved to bf_marketing_scraper.',
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå processTempEmailsToScraper error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }    

    public function reprocessIncompleteEmails()
    {
        try {
            $this->getMyMIMarketing()->reprocessIncompleteEmails();
            return $this->response->setJSON(['status' => 'success', 'message' => 'Backfilled incomplete emails.']);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå reprocessIncompleteEmails error: ' . $e->getMessage());
            return $this->failServerError('Failed to reprocess incomplete emails.');
        }
    }
    
    public function runCronManually() {
        $this->runCRONTasks();
        return $this->response->setJSON(['status' => 'success', 'message' => 'Manual CRON execution complete.']);
    }

    public function runDailyAlphaVantageDataPipeline() {
        $symbols = $this->alertsModel->getTopWatchlistSymbols();
        $apikey = getenv('ALPHA_VANTAGE_KEY');
    
        foreach ($symbols as $symbol) {
            $this->fetchAlphaVantageNewsForTradeAlerts($symbol['symbol'], $apikey);
            $this->getCompanyOverview($symbol['symbol'], $apikey);
            $this->getIncomeStatement($symbol['symbol'], $apikey);
            // Store results in DB or cache as needed
        }
    
        return $this->response->setJSON(['status' => 'success', 'message' => 'Daily Alpha Vantage data pipeline completed.']);
    }

    public function sendToZapierManually() {
        $summary = $this->generateTodaysNewsSummary();
        $result = $this->getMyMIMarketing()->sendToZapier($summary['content']);
        return $this->response->setJSON(['status' => 'success', 'message' => 'Sent manually to Zapier.', 'result' => $result]);
    }

    public function scrapeAndGenerateTodaysStoryFromInbox()
    {
        try {
            log_message('info', 'üì• Starting inbox scrape for news@mymiwallet.com...');
            $this->getMyMIMarketing()->fetchAndStoreEmails('news');
    
            $today = date('Y-m-d');
            $scrapes = $this->marketingModel->getScrapesByDate($today);
    
            if (empty($scrapes)) {
                log_message('info', 'üì≠ No emails found for today.');
                return $this->response->setJSON(['status' => 'error', 'message' => 'No emails found for today.'], 404);
            }
    
            $summaries = [];
            foreach ($scrapes as $scrape) {
                $cleanedBody = $this->marketingModel->cleanHtmlEmailContent($scrape['content']);
                $summary = $this->getMyMIMarketing()->summarizeContent($cleanedBody);
    
                if (is_array($summary)) {
                    $summary = $summary['summary'] ?? implode('. ', array_map('strval', $summary));
                }
    
                $summaries[] = $summary;
            }
    
            $combinedSummary = implode("\n\n", $summaries);
            if (strlen($combinedSummary) > 500000) {
                log_message('warning', 'Combined summary too long. Truncating...');
                $combinedSummary = substr($combinedSummary, 0, 500000);
            }
    
            $todayTitle = "Today's News Highlights - " . date('F j, Y');
            $data = [
                'title' => $todayTitle,
                'content' => $combinedSummary,
                'links' => json_encode([]),
                'url' => '',
                'type' => 'todays_story',
                'scraped_at' => date('Y-m-d H:i:s'),
                'created_on' => date('Y-m-d H:i:s'),
                'modified_on' => date('Y-m-d H:i:s'),
            ];
    
            $this->marketingModel->storeTempScrapedData($data);
            log_message('info', '‚úÖ Today‚Äôs story generated and stored.');
    
            return $this->response->setJSON([
                'status' => 'success',
                'message' => 'Today‚Äôs story generated and stored successfully!',
                'title' => $todayTitle,
                'summary' => $combinedSummary
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå scrapeAndGenerateTodaysStoryFromInbox error: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
    
    /**
     * Management Endpoint: Send All Pending Discord Alerts
     */
    public function sendAllDiscordAlerts()
    {
        $alerts = $this->alertsModel->getAlertsWithNewTVChart();
        if (empty($alerts)) {
            return $this->response->setJSON(['status' => 'error', 'message' => 'No new alerts to send.'], 404);
        }

        foreach ($alerts as $alert) {
            $this->alertManager->sendDiscordNotification($alert);
        }

        return $this->response->setJSON(['status' => 'success', 'message' => 'All Discord notifications sent.']);
    }

    /**
     * Management Endpoint: Update Market Data for Trade Alerts
     */
    public function updateMarketDataForAlerts()
    {
        try {
            $this->alertManager->updateAlerts();
            return $this->response->setJSON(['status' => 'success', 'message' => 'Trade alerts updated with market data.']);
        } catch (\Exception $e) {
            return $this->response->setJSON(['status' => 'error', 'message' => 'Failed to update market data: ' . $e->getMessage()], 500);
        }
    }
}
?>
<?php

namespace App\Modules\Management\Controllers;

use CodeIgniter\Controller;
use Config\Services;
use App\Config\{APIs, Auth, SiteSettings, SocialMedia};
use App\Controllers\UserController;
use App\Libraries\{BaseLoader, HtmlFormatter, MyMIAnalytics, MyMIAlerts, MyMIBudget, MyMIDashboard, MyMIExchange, MyMIMarketing, MyMIUser};
use App\Models\{AlertsModel, AnnouncementModel, InvestmentModel, ManagementModel, MarketingModel, MyMIGoldModel, SolanaModel, UserModel};
use App\Services\{DashboardService, GoalTrackingService, MarketingService, SolanaService, UserService};
use CodeIgniter\API\ResponseTrait;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use voku\helper\HtmlDomParser;

class MarketingController extends UserController
{
    use ResponseTrait;
    use BaseLoader;
    protected $API;
    protected $auth;
    protected $cuID;
    protected $data;
    protected $debug;
    protected $helpers = ['auth', 'form', 'url'];
    protected $logger;
    protected $request;
    protected $session;
    protected $uri;
    protected $siteSettings;
    protected $NewsEmail; 
    protected $HtmlFormatter;
    protected $MyMIAnalytics;
    protected $MyMIAlerts;
    protected $MyMIBudget;
    protected $MyMIDashboard;
    protected $MyMIExchange;
    protected $MyMIMarketing;
    protected $MyMIUser;
    protected $dashboardService; 
    protected $goalTrackingService; 
    protected $marketingService; 
    protected $solanaService; 
    protected $userService; 
    protected $alertsModel;
    protected $investmentModel;
    protected $marketingModel;
    protected $userModel;
    protected $userAccount;
    protected $userDashboard;
    protected $getBlogPosts;
    protected $departmentTasks;
    protected $marketing;
    protected $reporting;

    public function __construct()
    {
        $this->API = config('APIs');
        $this->auth = service('authentication');        
        // Get the logger instance from CodeIgniter's Services
        $this->logger = service('logger');
        $this->NewsEmail = config('NewsEmailServer');
        $this->request                              = service('request'); 
        $this->session = Services::session();
        $this->siteSettings = config('SiteSettings');
        $this->debug = $this->siteSettings->debug; 
        $this->uri                                  = $this->request->getUri(); 
        

        // Initialize UserService and pass required dependencies
        // $this->dashboardService = new DashboardService();  // This should be SolanaService, not SolonaService
        // $this->marketingService = new MarketingService();  // This should be SolanaService, not SolonaService
        // $this->goalTrackingService = new GoalTrackingService();  // This should be SolanaService, not SolonaService
        // $this->solanaService = new SolanaService();  // This should be SolanaService, not SolonaService
      
        // Load models
        $this->alertsModel = new AlertsModel();
        $this->investmentModel = new InvestmentModel();
        $this->marketingModel = new MarketingModel();
        // $this->userModel = new UserModel();

        // Load libraries
        // $this->MyMIAnalytics = new MyMIAnalytics();
        // $this->MyMIAlerts = new MyMIAlerts();
        // $this->MyMIBudget = new MyMIBudget();
        // $this->MyMIDashboard = new MyMIDashboard();
        // $this->MyMIUser = service('MyMIUser');
        // $this->HtmlFormatter = new HtmlFormatter();
        // $this->MyMIMarketing = new MyMIMarketing(); // Ensure this is correctly initialized
        // $this->marketing = $this->getMyMIMarketing()->marketing(); 

        // Load Services 
        // $this->userAccount = $this->getMyMIUser()->getUserInformation($this->cuID);
        $this->userDashboard = $this->getMyMIDashboard()->dashboardInfo($this->cuID);
        $this->departmentTasks = $this->getMyMIAnalytics()->get_department_tasks($this->uri->getSegment(2), ['Page SEO Edit']);
        $this->getBlogPosts = $this->getMyMIMarketing()->getBlogPosts();

        // Initialize UserService and pass required dependencies
        $this->cuID = $this->session->get('user_id') ?? $this->auth->id();
        if (!$this->cuID) {
            log_message('error', 'Investments ControllerFailed to retrieve valid User ID in MyMIInvestments');
            throw new \RuntimeException('User ID could not be retrieved.');
        }
        log_message('debug', "InvestmentsController: cuID initialized as {$this->cuID}");
        $this->userAccount = $this->getMyMIUser()->getUserInformation($this->cuID);
        $userBudget = $this->getMyMIBudget()->getUserBudget($this->cuID); 
        log_message('info', 'DashboardController L72 - $checkingSummary: ' . $userBudget['checkingSummary']);
        $this->data['checkingSummary'] = $userBudget['checkingSummary'];


    }

    public function commonData(): array {
        // Fetch user data via a UserService
        // if (!empty($this->getuserService()->commonData())) { 
        //     $userData = $this->getuserService()->commonData();  // Assume this service optimally fetches all user-related data
        // } else {
        //     log_message('error', 'Failed to retrieve user ID.');
        //     return redirect()->to('/login')->with('redirect_url', current_url())->send();
        // }
        $this->data = $this->data ?? [];
        // Fetch data from UserService
        $userData = $this->getuserService()->commonData(); 
        // Merge the user data with BudgetController data
        $this->data = array_merge($this->data, $userData);  
    
        // Fetch general site settings
        $this->data['siteSettings'] = $this->siteSettings;
        $this->data['beta'] = (string)$this->siteSettings->beta;
        $this->data['uri'] = $this->request->getUri();
        $this->data['date'] = $this->siteSettings->date;
        $this->data['time'] = $this->siteSettings->time;
        $this->data['hostTime'] = $this->siteSettings->hostTime;
    
        // Optimize dashboard data retrieval (use caching if necessary)
        $dashboardInfo = $this->getDashboardService()->getDashboardInfo($this->cuID);  // Batch fetch data
        $this->data['completedGoals'] = $this->getGoalTrackingService()->getCompletedGoals($this->cuID);
        $this->data['pendingGoals'] = $this->getGoalTrackingService()->getPendingGoals($this->cuID);
        $this->data['promotionalBanners'] = $dashboardInfo['promotionalBanners'];
    
        // Fetch total account balance and cache it (to avoid repeated calls)
        $userBudget = $this->getBudgetService()->getUserBudget($this->cuID);
        $this->data['totalAccountBalance'] = $userBudget['totalAccountBalance'] ?? 0;
        $this->data['totalAccountBalanceFMT'] = $userBudget['totalAccountBalanceFMT'] ?? '0.00';
        
        // Fetch Solana data (consider using a caching strategy)
        $userSolanaData = $this->getSolanaService()->getSolanaData($this->cuID);
        $this->data['cuSolanaDW'] = $userSolanaData['userSolanaWallets']['cuSolanaDW'] ?? null;
        // Ensure Solana network status exists to avoid "Undefined array key"
try {
    if (!isset($this->solanaService)) {
        $this->solanaService = service('solanaService'); // or however you DI it
    }
    $data['solanaNetworkStatus'] = $this->solanaService->getNetworkStatus();
} catch (\Throwable $e) {
    log_message('error', 'WalletsController getNetworkStatus failed: {msg}', ['msg' => $e->getMessage()]);
    $data['solanaNetworkStatus'] = [
        'healthy' => false,
        'slot'    => null,
        'version' => null,
        'error'   => $e->getMessage(),
    ];
}
        $this->data['cuSolanaTotal'] = $userSolanaData['userSolanaWallets']['cuSolanaTotal'] ?? 0;
        $this->data['cuSolanaValue'] = $userSolanaData['userSolanaWallets']['cuSolanaValue'] ?? 0;
    
        // Merge user data into the $this->data array (if not already handled by a service)
        $this->data = array_merge($this->data, $userData);
    
        // Conditionally run debug-specific logic
        if ($this->debug === 1) {
            // Add your debug logic here
        }
    }
      
    // ***STANDARD PAGES***

    public function index() {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        $todaysStory = $this->marketingModel->getTodaysStory();
        log_message('info', 'Management/MarketingController L170 - $todaysStory: ' . (print_r($todaysStory, true))); 
        $this->data['todaysStory'] = $todaysStory; 
        $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts(); // Adjust this line to match your model method
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
    }      

    public function add($type = null) {
        log_message('debug', 'MarketingController L183 - add() method called with type: ' . (is_null($type) ? 'null' : $type));
    
        if (!empty($type)) {
    
            // Handle POST request (form submission)
            if ($this->request->getMethod() === 'POST') {
                log_message('debug', 'Handling POST request for type: ' . $type);
    
                if ($type === 'Schedule') {
                    log_message('info', 'Processing Schedule submission');
                    try {
                        $this->marketingModel->addMarketingSchedule($this->request->getPost()); // Save the schedule data
                        log_message('info', 'Schedule data saved successfully');
    
                        // Check if the request is AJAX
                        if ($this->request->isAJAX()) {
                            return $this->response->setJSON(['success' => true, 'message' => 'Schedule added successfully']);
                        } else {
                            // Redirect to a success page for non-AJAX requests
                            return redirect()->to('/Management/Marketing/Schedule')->with('success', 'Schedule added successfully');
                        }
                    } catch (\Exception $e) {
                        log_message('error', 'Error saving schedule: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to save schedule.']);
                    }
                } elseif ($type === 'Campaign') {
                    log_message('info', 'Processing Campaign submission');
                    try {
                        $campaignData = [
                            'beta' => $this->request->getPost('beta'),
                            'config_mode' => $this->request->getPost('config_mode'),
                            'form_mode' => $this->request->getPost('form_mode'),
                            'escalated' => $this->request->getPost('escalated'),
                            'user_id' => $this->request->getPost('user_id'),
                            'user_email' => $this->request->getPost('user_email'),
                            'username' => $this->request->getPost('username'),
                            'assigned_to' => $this->request->getPost('assigned_to'),
                            'date' => $this->siteSettings->date,
                            'time' => $this->siteSettings->time,
                            'campaign_name' => $this->request->getPost('campaign_name'),
                            'promotionalLinks' => json_encode($this->request->getPost('promotionalLinks')),
                            'overall_campaign_description' => $this->request->getPost('overall_campaign_description'),
                            'voice_script' => $this->request->getPost('voice_script'),
                            'facebookMessage' => $this->request->getPost('facebookMessage'),
                            'linkedinMessage' => $this->request->getPost('linkedinMessage'),
                            'discordMessage' => $this->request->getPost('discordMessage'),
                            'stocktwitsMessage' => $this->request->getPost('stocktwitsMessage'),
                            'tiktokMessage' => $this->request->getPost('tiktokMessage'),
                            'youtubeMessage' => $this->request->getPost('youtubeMessage'),
                            'emailMessage' => $this->request->getPost('emailMessage'),
                            'additionalInfo' => $this->request->getPost('additionalInfo'),
                            'hashtags' => $this->request->getPost('hashtags'),
                        ];
    
                        $this->marketingModel->addMarketingCampaign($campaignData); // Save the campaign data
                        log_message('info', 'Campaign data saved successfully');
    
                        // Check if the request is AJAX
                        if ($this->request->isAJAX()) {
                            log_message('info', 'MarketingController L251 - This is using the $this->request->isAJAX() Form Submission');
                            return $this->response->setJSON(['success' => true, 'message' => 'Campaign added successfully']);
                        } else {
                            // Redirect to a success page for non-AJAX requests
                            log_message('info', 'MarketingController L251 - This is NOT using the $this->request->isAJAX() Form Submission');
                            return redirect()->to('/Management/Marketing/Campaigns')->with('success', 'Campaign added successfully');
                        }
                    } catch (\Exception $e) {
                        log_message('error', 'Error saving campaign: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to save campaign.']);
                    }
                } else {
                    log_message('error', 'Unrecognized type in POST request: ' . $type);
                    return $this->response->setJSON(['error' => 'Unrecognized type in POST request']);
                }
            }
    
            // Handle GET request (form display)
            if ($this->request->getMethod() === 'get') {
                log_message('debug', 'Handling GET request for type: ' . $type);
    
                if ($type === 'Schedule') {
                    log_message('debug', 'Loading view for Schedule');
                    try {
                        $response = $this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add', $this->data);
                        log_message('debug', 'View for Schedule loaded successfully');
                        return $response;
                    } catch (\Exception $e) {
                        log_message('error', 'Failed to load view for Schedule: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to load view for Schedule']);
                    }
                } elseif ($type === 'Campaign') {
                    log_message('debug', 'Loading view for Campaign');
                    try {
                        $response = $this->renderTheme('ManagementModule\Views\Marketing\Campaign\Add', $this->data);
                        log_message('debug', 'View for Campaign loaded successfully');
                        return $response;
                    } catch (\Exception $e) {
                        log_message('error', 'Failed to load view for Campaign: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to load view for Campaign']);
                    }
                } else {
                    log_message('error', 'Unrecognized type in GET request: ' . $type);
                    return $this->response->setJSON(['error' => 'Unrecognized type in GET request']);
                }
            }
        } else {
            log_message('warning', 'No type provided; redirecting to /Management/Marketing');
            return redirect()->to('/Management/Marketing')->with('error', 'No type provided');
        }
    }  

    public function addSchedule() {
        if ($this->request->getMethod() === 'post') {
            $additionalInfo = $this->request->getPost('additional_info');
    
            // Validate and parse the JSON input
            $jsonData = null;
            if (!empty($additionalInfo)) {
                $jsonData = json_decode($additionalInfo, true);
                if (json_last_error() !== JSON_ERROR_NONE) {
                    return redirect()->back()->withInput()->with('error', 'Invalid JSON format in Additional Information.');
                }
            }
    
            $scheduleData = [
                'day' => $this->request->getPost('day'),
                'time' => $this->request->getPost('time'),
                'activity' => $this->request->getPost('activity'),
                'link' => $this->request->getPost('link'),
                'additional_info' => json_encode($jsonData)  // Store as JSON in the database
            ];
    
            // Insert the new schedule
            $this->marketingModel->addMarketingSchedule($scheduleData);
    
            return redirect()->to(base_url('Management/Marketing/Schedule'))->with('success', 'New schedule added successfully.');
        }
    
        // Load the form view
        $this->commonData(); 
        return $this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add');
    }   

    public function addSubscriber() {
        helper('email');
        $rawRequestBody = $this->request->getBody();
        $jsonData = json_decode($rawRequestBody, true);

        $marketingModel = new MarketingModel();

        $subscriberData = [
            'email' => $jsonData['email'],
            'category' => $jsonData['category'],
            'referral' => $jsonData['referral'],
            'beta' => $this->siteSettings->beta,
            'date' => date('Y-m-d H:i:s'),
            'hostTime' => date('Y-m-d H:i:s'),
            'time' => date('H:i:s'),
            'user_id' => session('user_id'), // Assuming the user is logged in
            'user_ip' => $this->request->getIPAddress()
        ];

        if ($marketingModel->addSubscriber($subscriberData)) {
            $emailService = \Config\Services::email();
            $emailService->setTo($subscriberData['email']);
            $emailService->setSubject('üéâ Welcome to Investor‚Äôs Talk | MyMI Wallet');
            $emailService->setMessage(view('emails/welcomeInvestor', [
                'siteSettings' => $this->siteSettings,
                'socialMedia'  => config('SocialMedia'),
            ]));
            if ($emailService->send()) {
                log_message('info', 'Management/MarketingController L346 - $emailService: ' . print_r($emailService, true)); 
                return $this->response->setJSON(['success' => true, 'message' => 'Subscriber email sent successfully']);
            } else {
                log_message('error', 'Management/MarketingController L346 - Error Submitting: $emailService: ' . print_r($emailService, true)); 
                return $this->response->setJSON(['success' => false, 'message' => 'Failed to send Welcome Email']);
            }
        } else {
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to add subscriber']);
        }
    }

    public function approveLogo()
    {
        $symbol = $this->request->getPost('symbol');
        $imageUrl = $this->request->getPost('imageUrl');

        try {
            // Save or update the approved logo in the database
            $this->marketingModel->saveApprovedLogo($symbol, $imageUrl);

            return $this->response->setJSON([
                'success' => true,
                'message' => 'Logo approved successfully.',
            ]);
        } catch (\Exception $e) {
            log_message('error', 'Failed to approve logo: ' . $e->getMessage());
            return $this->response->setJSON([
                'success' => false,
                'message' => 'Failed to approve logo.',
            ]);
        }
    }
    
    public function approveAndDownloadLogo()
    {
        $imageUrl = $this->request->getPost('selectedImage');
        $symbol = $this->request->getPost('symbol');

        try {
            // Download the selected image
            $imageContent = file_get_contents($imageUrl);
            $imagePath = WRITEPATH . 'uploads/Company-Logos/' . $symbol . '.png';

            file_put_contents($imagePath, $imageContent);

            // Move to public directory
            $publicPath = FCPATH . 'assets/images/Company-Logos/' . $symbol . '.png';
            rename($imagePath, $publicPath);

            return redirect()->to('/Management/Marketing/upcomingEarnings')->with('success', 'Logo approved and saved successfully.');
        } catch (\Exception $e) {
            log_message('error', 'Failed to download or save logo: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to save the logo.');
        }
    }

    public function approveContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, ['status' => 'approved']);
        return redirect()->back()->with('success', 'Content approved successfully.');
    }
    
    public function blogs() {
        $this->data['pageTitle'] = 'MyMI Blogs | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        $this->data['blogs'] = $this->marketingModel->getBlogs();
        $this->data['totalBlogs'] = $this->marketingModel->countBlogs(); 

        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\Blogs', $this->data);
    }      

    public function campaigns() {
        $this->data['pageTitle'] = 'Marketing Campaigns | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        // log_message('debug', 'MarketingController L160 - $this->marketing: ' . (print_r($this->marketing, true))); 
        $this->data['getActiveCampaigns'] = $this->marketing['department']['getActiveCampaigns'];  
        $this->data['getActivePriorityCampaigns'] = $this->marketing['department']['getActivePriorityCampaigns'];  
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\campaigns', $this->data);
    }  

    public function contentGenerator()
    {
        try {
            $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
            $this->commonData();
            return $this->renderTheme('ManagementModule\Views\Marketing\contentGenerator', $this->data);
        } catch (\Throwable $th) {
            log_message('error', 'MarketingController contentGenerator error: ' . $th->getMessage());
        }
    }

    public function contentReview() {
        // Retrieve the generated content from the session
        $generatedContent = $this->session->get('generatedContent');

        // Ensure content exists; otherwise, redirect back with an error message
        if (empty($generatedContent)) {
            return redirect()->to('/Management/Marketing')->with('error', 'No generated content available for review.');
        }

        // Load the content review view and pass the generated content
        return $this->renderTheme('ManagementModule\Views\Marketing\Content_Review', ['generatedContent' => $generatedContent]);
    }

    public function cronAnalyzeContent()
    {
        log_message('debug', 'üß† Starting content digest analysis...');
        $this->getMyMIMarketing()->generateFromTempScraper(5); // e.g., latest 5
        log_message('debug', '‚úÖ Content digest completed.');
    }
    
    public function cronFetchAndStoreEmails()
    {
        try {
            log_message('debug', 'Starting cronFetchAndStoreEmails');
    
            $this->marketingService->scrapeAndStoreEmailsToTemp();
            log_message('debug', 'Finished cronFetchAndStoreEmails');
            return $this->respond(['status' => 'success']);
        } catch (\Throwable $e) {
            log_message('error', 'cronFetchAndStoreEmails Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function cronFetchInbox()
    {
        log_message('debug', 'üì® Starting inbox scrape...');
        $this->getMyMIMarketing()->scrapeInboxAndStore();
        log_message('debug', '‚úÖ Inbox scrape completed.');
    }

    public function cronFetchMarketingEmails()
    {
        log_message('info', 'CRON: Starting Marketing Email Fetch');
    
        $service = new MarketingService();
        $emailsFetched = $service->fetchAndStoreMarketingEmails();
    
        log_message('info', 'CRON: Fetched ' . $emailsFetched . ' marketing emails');
        return $this->respond(['status' => 'success', 'fetched' => $emailsFetched]);
    }    

    public function cronGenerateContentFromTemp()
    {
        try {
            log_message('debug', 'Starting cronGenerateContentFromTemp');
    
            $this->marketingService->generateFinalContentFromTemp();
            log_message('debug', 'Finished cronGenerateContentFromTemp');
            return $this->respond(['status' => 'success']);
        } catch (\Throwable $e) {
            log_message('error', 'cronGenerateContentFromTemp Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }    
    
    public function cronSendDailyLog()
    {
        // Set timezone to CST
        date_default_timezone_set('America/Chicago');
    
        // Fetch today's logs or fallback
        $contentData = $this->getLogsOrFallback();
    
        // Generate email content
        $emailView = view('emails/daily_log_summary', [
            'contentData' => $contentData['data'],
            'contentType' => $contentData['type'],
        ]);
    
        // Determine the email type (tracked or fallback)
        $subject = ($contentData['type'] === 'logs') ?
            'Daily Log Summary for ' . date('F j, Y') :
            'Fallback Content - Daily Summary ' . date('F j, Y');
    
        // Send the summary email
        $this->email->setTo('community@mymiwallet.com')
            ->setSubject($subject)
            ->setMessage($emailView)
            ->send();
    
        // Send a reminder email to the team
        $this->email->setTo('team@mymiwallet.com')
            ->setSubject('Reminder: Daily Log Email Pending Confirmation')
            ->setMessage('The daily log email is scheduled to be sent at 3 PM CST. Please review the content to ensure everything is accurate.')
            ->send();
    }
    
    public function edit($id = null) {
        if ($id === null) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Exchange ID not provided');
        }
    
        // Fetch the token data for the given ID
        $tokenData = $this->marketingModel->getExchangeTokenById($id);
        if (!$tokenData) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Token not found');
        }
    
        // Handle form submission
        if ($this->request->getMethod() === 'post') {
            $validation = \Config\Services::validation();
            $validation->setRules([
                'coin_name'  => 'required',
                'market_cap' => 'required|numeric',
                'website'    => 'required|valid_url',
                'discord'    => 'permit_empty|valid_url',
                'facebook'   => 'permit_empty|valid_url',
                'telegram'   => 'permit_empty|valid_url',
                'twitter'    => 'permit_empty|valid_url',
            ]);
    
            if ($validation->withRequest($this->request)->run()) {
                $updatedData = [
                    'coin_name'  => $this->request->getPost('coin_name'),
                    'market_cap' => $this->request->getPost('market_cap'),
                    'website'    => $this->request->getPost('website'),
                    'discord'    => $this->request->getPost('discord'),
                    'facebook'   => $this->request->getPost('facebook'),
                    'telegram'   => $this->request->getPost('telegram'),
                    'twitter'    => $this->request->getPost('twitter'),
                ];
    
                if ($this->marketingModel->updateExchangeToken($id, $updatedData)) {
                    $this->session->setFlashdata('success', 'Exchange token updated successfully');
                } else {
                    $this->session->setFlashdata('error', 'Failed to update the exchange token');
                }
    
                return redirect()->to(site_url('Management/Marketing/Exchanges/Edit/' . $id));
            } else {
                $this->session->setFlashdata('validation_errors', $validation->getErrors());
            }
        }
    
        // Render the view with the token data
        return $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\edit', [
            'token'       => $tokenData,
            'validation'  => $this->session->getFlashdata('validation_errors'),
            'redirectURL' => site_url('Management/Marketing/Exchanges'),
        ]);
    }

    public function editContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        return $this->renderTheme('ManagementModule\Views\Marketing\Content_Edit', ['content' => $content]);
    }

    public function fetchMissingLogos()
    {
        $postData = $this->request->getJSON(true);
    
        // Validate CSRF token
        $csrfName = csrf_token();
        $csrfHash = csrf_hash();
        if (!isset($postData[$csrfName]) || $postData[$csrfName] !== $csrfHash) {
            log_message('error', 'fetchMissingLogos: CSRF validation failed');
            return $this->response
                ->setHeader('X-CSRF-Token-Name', $csrfName)
                ->setHeader('X-CSRF-Token-Hash', $csrfHash)
                ->setJSON(['error' => 'Invalid CSRF token.']);
        }
    
        $symbols = $postData['symbols'] ?? null;
    
        // Validate symbols
        if (empty($symbols) || !is_array($symbols)) {
            log_message('error', 'fetchMissingLogos: Invalid symbols input');
            return $this->response
                ->setHeader('X-CSRF-Token-Name', $csrfName)
                ->setHeader('X-CSRF-Token-Hash', $csrfHash)
                ->setJSON(['error' => 'Invalid symbols input.']);
        }
    
        $results = [];
        foreach ($symbols as $symbol) {
            // Example: Fetch logo or simulate fetching process
            $results[] = [
                'symbol' => $symbol,
                'status' => 'not_found', // Simulated response
            ];
        }
    
        return $this->response
            ->setHeader('X-CSRF-Token-Name', $csrfName)
            ->setHeader('X-CSRF-Token-Hash', $csrfHash)
            ->setJSON(['results' => $results]);
    }

    public function financialNews()
    {
        $symbols = $this->investmentModel->getAllSymbolsByEarnings();
        $approvedLogos = $this->marketingModel->getApprovedLogos();
    
        // Ensure these variables are defined and passed
        $existingSymbols = array_column($approvedLogos, 'symbol');
        $missingSymbols = array_filter($symbols, function ($symbol) use ($existingSymbols) {
            return !in_array($symbol['symbol'], $existingSymbols);
        });
    
        // log_message('debug', 'financialNews: $approvedLogos = ' . print_r($approvedLogos, true));
        // log_message('debug', 'financialNews: $missingSymbols = ' . print_r($missingSymbols, true));
    
        $this->data['approvedLogos'] = $approvedLogos ?? [];
        $this->data['missingSymbols'] = $missingSymbols ?? [];
        $this->commonData();
    
        return $this->renderTheme('ManagementModule\Views\Marketing\financialNews', $this->data);
    }   
    
    // ***CONTENT GENERATOR***
    public function generateAudio() {
        // Collect input data from the frontend
        $text = $this->request->getPost('text');
        $fileName = $this->request->getPost('fileName') ?: uniqid('tts_', true); // Default to a unique name
        $directory = WRITEPATH . 'uploads/'; // Default directory for uploads
        $outputFile = $directory . $fileName . '.mp3'; // Full path to the output file

        // Validate input
        if (empty($text)) {
            return $this->response->setJSON([
                'status' => 'error',
                'message' => 'Text cannot be empty.',
            ]);
        }

        // Ensure the directory exists
        if (!is_dir($directory)) {
            mkdir($directory, 0777, true); // Create directory if it doesn't exist
        }

        // Use Python to call gTTS and generate audio
        // Pass additional parameters like filename and directory
        $command = sprintf(
            'python3 gtts_script.py %s %s',
            escapeshellarg($text),
            escapeshellarg($outputFile)
        );
        exec($command, $output, $status);

        // Prepare JSON response
        if ($status === 0 && file_exists($outputFile)) {
            // Generate a URL for the file
            $fileUrl = base_url('uploads/' . basename($outputFile));
            return $this->response->setJSON([
                'status' => 'success',
                'message' => 'Audio file generated successfully.',
                'file_url' => $fileUrl, // URL for the user to download the file
            ]);
        } else {
            return $this->response->setJSON([
                'status' => 'error',
                'message' => 'Failed to generate audio.',
            ]);
        }
    }

    private function generateAutomatedContent()
    {
        // Fetch recent data from various sources
        $scraperContent = $this->marketingModel->getRecentScrapes();
        $tempContent = $this->marketingModel->getRecentTempScrapes();
        $campaigns = $this->marketingModel->getActiveCampaignsLimited(50);

        // Combine all sources
        $allContent = array_merge($scraperContent, $tempContent, $campaigns);

        // Generate content via MarketingService
        $generatedContent = [];
        foreach ($allContent as $content) {
            $generatedContent[] = $this->getMarketingService()->generateContentFromPost(
                $content->title ?? 'Untitled',
                $content->content ?? '',
                $content->tags ? explode(',', $content->tags) : []
            );
        }

        // Store generated content in `bf_marketing_scraper` as automated logs
        foreach ($generatedContent as $content) {
            $slug = $this->marketingModel->createSlug($content['title']);
        
            $this->db->table('bf_marketing_blog_posts')->insert([
                'title'       => $content['title'] ?? 'Generated Content',
                'content'     => $content['summary'] ?? '',
                'slug'        => $slug,
                'tags'        => implode(',', $content['keywords'] ?? []),
                'created_on'  => date('Y-m-d H:i:s'),
            ]);
        
            // Ensure this is stored in bf_marketing_scraper
            $this->marketingModel->saveDailyLog([
                'title'              => $content['title'],
                'content'            => $content['summary'],
                'type'               => 'Automated',
                'tags'               => implode(',', $content['keywords']),
                'date_time'          => date('Y-m-d H:i:s'),
                'author_information' => 'MyMI Automated System',
                'created_on'         => date('Y-m-d H:i:s'),
            ]);
        }        

        return $generatedContent;
    }

    public function generateContent($platform, $postId) {
        // Fetch the post data
        $post = $this->marketingModel->getSchedulePostById($postId);

        if (!$post) {
            return redirect()->back()->with('error', 'Post not found.');
        }

        // Generate content using the API
        $content = $this->getMyMIMarketing()->generateContentFromGPT($post['subjects'], $post['descriptions'], $platform);

        // Store the generated content
        $contentData = [
            'post_id' => $postId,
            'platform' => $platform,
            'generated_content' => $content,
        ];
        $this->marketingModel->storeGeneratedContent($contentData);

        return redirect()->to("\Management\Marketing\Schedule")->with('success', 'Content generated successfully.');
    }

    public function generateContentDigestFromStored()
    {
        log_message('info', 'Marketing: Starting summary generation from stored marketing emails.');
    
        $model = new MarketingModel();
        $records = $model->getRecentUnprocessedTempEmails(5);
    
        $results = [];
        foreach ($records as $record) {
            if (empty($record['content']) || strlen($record['content']) < 1000) {
                log_message('debug', "‚ö†Ô∏è Skipping record ID {$record['id']} due to insufficient content length.");
                continue;
            }
            
            if (empty($record['title']) || empty($record['content'])) {
                log_message('debug', 'Skipped record due to missing title/content ID: ' . $record['id']);
                continue;
            }
    
            try {
                $summary = $this->getMarketingService()->generateContentFromRaw($record['title'], $record['content']);
    
                $model->storeFinalMarketingContent([
                    'source_id' => $record['id'],
                    'title' => $record['title'],
                    'summary' => $summary,
                    'created_at' => date('Y-m-d H:i:s')
                ]);
    
                $model->markTempRecordAsProcessed($record['id']);
                $results[] = $record['title'];
    
            } catch (\Throwable $e) {
                log_message('error', 'Failed to process record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    
        return $this->respond(['status' => 'complete', 'processed_titles' => $results]);
    }
    
    public function generateContentFromTweet($tweetId) {
        $tweet = $this->marketingModel->getTweetById($tweetId);

        if (!$tweet) {
            return $this->failNotFound('Tweet not found');
        }

        $generatedContent = $this->getMyMIMarketing()->generateContentFromTweets([$tweet]);

        $this->marketingModel->storeGeneratedContent([
            'tweet_id' => $tweetId,
            'content' => json_encode($generatedContent),
            'created_at' => date('Y-m-d H:i:s')
        ]);

        $this->getMyMIMarketing()->postToTwitter($generatedContent['platform_content']['Twitter']);

        return $this->respond(['message' => 'Content generated and posted successfully']);
    }

    public function generateDailyContentDigest()
    {
        log_message('debug', 'üß† Start Memory Usage: ' . memory_get_usage(true));
    
        @ini_set('memory_limit', '768M');
        $limit = 5;    
        $summary = [];
        $rawRecords = $this->marketingModel->getLatestUnprocessedEmails($limit);
        foreach ($rawRecords as $record) {
            $content = $record['content'] ?? '';
            if (empty($content) || strlen($content) < 500) {
                log_message('debug', "‚è≠Ô∏è Skipped record ID {$record['id']} - insufficient content.");
                continue;
            }
            $contentSize = strlen($content);
    
            log_message('debug', 'üìå Processing record ID ' . $record['id'] . ' with content size: ' . $contentSize);
            log_message('debug', 'Management/MarketingController L770 - $record Array: ' . print_r($record, true));
    
            if ($contentSize === 0) {
                log_message('debug', "‚è≠Ô∏è Skipped record ID {$record['id']} - empty content.");
                continue;
            }
    
            try {
                gc_collect_cycles(); // clean memory before heavy ops
    
                $processed = $this->getMarketingService()->generateContentFromRaw($record);
    
                if ($processed === null) {
                    log_message('debug', "‚ö†Ô∏è Skipped record ID {$record['id']} - generateContentFromRaw() returned null.");
                    continue;
                }
    
                $this->marketingModel->saveFinalizedMarketingContent($processed);
    
                $summary[] = [
                    'title'          => $processed['headline'],
                    'summary'        => $processed['summary'],
                    'subtopics'      => $processed['subtopics'],
                    'platform_posts' => $processed['posts'],
                ];
    
            } catch (\Throwable $e) {
                log_message('error', "‚ùå generateDailyContentDigest failed on record ID {$record['id']}: {$e->getMessage()}");
            }
        }
    
        // ‚úÖ Mark processed
        $this->marketingModel->markEmailsAsProcessed(array_column($rawRecords, 'id'));
    
        log_message('debug', 'üèÅ Peak Memory Usage: ' . memory_get_peak_usage(true));
        return $this->response->setJSON(['digest' => $summary]);
    }
    
    public function generateNewsletterContent() {
        $emailContents = $this->marketingModel->getEmailContentsForNewsletter();

        // Generate content
        $content = $this->getMyMIMarketing()->generateNewsletterContent($emailContents);

        // Save the generated content as a draft
        $newsletterData = [
            'title' => 'Monthly Financial Newsletter - ' . date('F Y'),
            'content' => $content,
            'status' => 'draft',
            'created_at' => date('Y-m-d H:i:s'),
        ];

        $this->marketingModel->storeNewsletterDraft($newsletterData);
    
        // Redirect after fetching emails
        return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                         ->with('success', 'Newsletter content generated successfully');
    }

    private function generateSummarizedFallbackContent($contentArray)
    {
        $summarizedContent = [];
        $summarizer = new \App\Libraries\ContentSummarizer();

        foreach ($contentArray as $content) {
            $summarizedContent[] = [
                'title' => $content->title ?? 'Untitled',
                'summary' => $summarizer->summarize($content->content ?? '', 200),
                'url' => $content->url ?? null,
            ];
        }

        return $summarizer->combineSummaries($summarizedContent);
    }
    
    private function getLogsOrFallback()
    {
        // Fetch today's logs
        $logs = $this->marketingModel->getDailyLogsByDate(date('Y-m-d'));
    
        if (!empty($logs)) {
            return ['type' => 'logs', 'data' => $logs];
        }
    
        // Fallback to generic content
        $scrapedContent = $this->marketingModel->getRecentScrapes();
        $campaigns = $this->marketingModel->getActiveCampaignsLimited(50);
    
        // Merge content from multiple sources
        $combinedContent = array_merge($scrapedContent, $campaigns['result']);
    
        // Summarize and generate fallback content
        $fallbackContent = $this->generateSummarizedFallbackContent($combinedContent);
    
        // Store generated fallback content in `bf_marketing_scraper` for future reference
        foreach ($fallbackContent as $content) {
            $this->marketingModel->saveDailyLog([
                'title' => $content['title'] ?? 'Automated Content',
                'content' => $content['summary'] ?? '',
                'type' => 'Automated',
                'tags' => implode(',', $content['keywords'] ?? []),
                'date_time' => date('Y-m-d H:i:s'),
                'author_information' => 'MyMI Automated System',
                'created_on' => date('Y-m-d H:i:s'),
            ]);
        }
    
        return ['type' => 'fallback', 'data' => $fallbackContent];
    }    

    public function getRecentScrapes() {
        try {
            $scrapes = $this->marketingModel->getRecentScrapes();
            return $this->response->setJSON(['success' => true, 'scrapes' => $scrapes]);
        } catch (\Throwable $th) {
            log_message('error', 'getRecentScrapes: Exception - ' . $th->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to fetch recent scrapes.']);
        }
    }

    private function handleMediaUpload($mediaFiles) {
        $uploadedMedia = [];
        
        foreach ($mediaFiles as $file) {
            if ($file->isValid() && !$file->hasMoved()) {
                // Move file to a designated folder, e.g., 'uploads/media/'
                $newFileName = $file->getRandomName();
                $file->move(WRITEPATH . 'uploads/media/', $newFileName);
                
                // Save the file info in an array (or a database)
                $uploadedMedia[] = [
                    'file_name' => $file->getClientName(),
                    'file_path' => WRITEPATH . 'uploads/media/' . $newFileName,
                    'file_size' => $file->getSize(),
                    'file_type' => $file->getMimeType(),
                ];
            }
        }
        
        return $uploadedMedia;
    }

    public function ideas() {
        $this->data['pageTitle'] = 'Marketing Campaigns | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        // log_message('debug', 'MarketingController L160 - $this->marketing: ' . (print_r($this->marketing, true))); 
        // Add $getActiveIdeas to the main $this->data array
        $this->data['getActiveIdeas'] = $this->marketingModel->getActiveIdeas(); // Method to retrieve active ideas

        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\ideas', $this->data);
    }  

    public function importScheduleCSV() {
        if ($this->request->getMethod() === 'post') {
            $file = $this->request->getFile('csv_file');
            
            if ($file->isValid() && !$file->hasMoved()) {
                $filePath = WRITEPATH . 'uploads/' . $file->store();
                $csvData = array_map('str_getcsv', file($filePath));

                // Assume the CSV structure is: ['date', 'time', 'activity', 'campaign_title', 'platform', ...]
                foreach ($csvData as $row) {
                    $scheduleData = [
                        'day' => $row[0],
                        'time' => $row[1],
                        'activity' => $row[2],
                    ];

                    $scheduleId = $this->marketingModel->addMarketingSchedule($scheduleData);

                    // Add related marketing campaigns
                    $campaignData = [
                        'sched_id' => $scheduleId,
                        'title' => $row[3],
                        'platform' => $row[4],
                        'content' => $row[5],
                    ];
                    $this->marketingModel->addMarketingCampaign($campaignData);
                }

                return redirect()->back()->with('success', 'Schedule and campaigns imported successfully.');
            }

            return redirect()->back()->with('error', 'Invalid CSV file.');
        }

        return $this->renderTheme('ManagementModule\Views\Marketing\importCSV');
    }

    public function processScheduledPosts()
    {
        $currentTimestamp = date('Y-m-d H:i:s');
        $scheduledPosts = $this->marketingModel->getPendingScheduledPosts($currentTimestamp);

        foreach ($scheduledPosts as $post) {
            $payload = [
                'platform' => $post->platform,
                'content' => $post->content,
                'media_url' => $post->media_url,
            ];

            try {
                $response = $this->sendToZapier($post->zapier_webhook_url, $payload);

                if ($response->getStatusCode() === 200) {
                    $this->marketingModel->updatePostStatus($post->id, 'posted');
                } else {
                    throw new Exception("Zapier response error: {$response->getBody()}");
                }
            } catch (Exception $e) {
                $this->handlePostFailure($post, $e->getMessage());
            }
        }
    }

    private function sendToZapier($webhookUrl, $payload)
    {
        $client = new \GuzzleHttp\Client();
        return $client->post($webhookUrl, [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $payload,
        ]);
    }

    private function handlePostFailure($post, $error)
    {
        $this->marketingModel->incrementRetryCount($post->id);
        log_message('error', "Failed to post to Zapier for Post ID {$post->id}: {$error}");

        if ($post->retry_count >= 3) {
            $this->marketingModel->updatePostStatus($post->id, 'failed');
        }
    }

    public function postCreator()
    {
        try {
            $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
            $this->commonData();
            return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
        } catch (\Throwable $th) {
            log_message('error', 'MarketingController postCreator error: ' . $th->getMessage());
        }
    }

    public function promote() {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->data['exchangeAssets'] = []; 
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\Promote', $this->data);
    }  
    
    public function publishBlog($blogId) {
        $blog = $this->marketingModel->getBlogPostDetails($blogId);
        if (!$blog) {
            return redirect()->back()->with('error', 'Blog post not found.');
        }

        // Update status to published
        $this->marketingModel->update($blogId, ['status' => 'published']);
        return redirect()->to('/Management/Marketing/Blogs')->with('success', 'Blog published successfully.');
    }

    public function rejectContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, ['status' => 'rejected']);
        return redirect()->back()->with('success', 'Content rejected successfully.');
    }
    
    public function runContentGeneration()
    {
        // Generate the content
        $generatedContent = $this->generateAutomatedContent();
    
        // Store the generated content temporarily in the session or database for review
        $this->session->set('generatedContent', $generatedContent);
    
        // Redirect to the content review page
        return redirect()->to('/Management/Marketing/ContentReview')->with('success', count($generatedContent) . ' content items generated successfully. Please review and approve.');
    }    
    
    private function sanitizeContent($content) {
        $content = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $content);
        $content = preg_replace('#<style(.*?)>(.*?)</style>#is', '', $content);
        $content = strip_tags($content);
        $content = preg_replace('/\s+/', ' ', $content);
        return trim($content);
    }
    
    private function saveCampaign($formData) {
        
        // Prepare the data
        $data = [
            'title' => $formData['title'],
            'description' => $formData['description'],
            // Add other fields
        ];
        
        // Save the campaign
        $this->marketingModel->addMarketingCampaign($data);
    }
    
    public function saveContentEdit($id) {
        $postData = $this->request->getPost();
    
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, [
            'content' => $postData['content'],
            'status' => 'pending',
        ]);
    
        return redirect()->to('/Management/Marketing/ContentReview')->with('success', 'Content updated successfully.');
    }

    private function saveSchedule($formData) {
        // Create a model for saving the schedule to the database
        $scheduleModel = new \App\Models\ScheduleModel();
        
        // Prepare the data
        $data = [
            'title' => $formData['title'],
            'description' => $formData['description'],
            // Add other fields
        ];
        
        // Save the schedule
        $scheduleModel->insert($data);
    }

    public function schedule($day = null) {
        if (!empty($day)) {
            $this->data['marketingSchedule'] = $this->marketingModel->getScheduleByDay($day);
            foreach ($this->data['marketingSchedule'] as &$schedule) {
                $schedule['campaigns'] = $this->marketingModel->getCampaignsBySchedId($schedule['id']);
            }
            $this->data['scheduleByDay'] = 'Yes';
        } else {
            $this->data['marketingSchedule'] = $this->marketingModel->getUpcomingSchedule();
            foreach ($this->data['marketingSchedule'] as &$schedule) {
                $schedule['campaigns'] = $this->marketingModel->getCampaignsBySchedId($schedule['id']);
            }
            $this->data['scheduleByDay'] = 'No';
        }
    
        $this->commonData();
        $this->data['pageTitle'] = 'Daily Schedule | Management | MyMI Wallet';    
        return $this->renderTheme('ManagementModule\Views\Marketing\Schedule', $this->data);
    }

    public function scheduleNewsletterCampaign() {
        $newsletterDraft = $this->marketingModel->getLatestNewsletterDraft();

        if (!$newsletterDraft) {
            return $this->response->setJSON(['success' => false, 'message' => 'No newsletter draft found']);
        }

        $campaignData = [
            'title' => $newsletterDraft['title'],
            'content' => $newsletterDraft['content'],
            'status' => 'scheduled',
            'send_date' => $this->request->getPost('send_date'),
            'target_audience' => 'all_users',
            'created_at' => date('Y-m-d H:i:s'),
        ];

        if ($this->marketingModel->scheduleNewsletterCampaign($campaignData)) {
            // Redirect after successfully scheduling the newsletter
            return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                             ->with('success', 'Newsletter campaign scheduled successfully');
        } else {
            // Redirect back to the previous page with an error message
            return redirect()->back()->with('error', 'Failed to schedule newsletter campaign');
        }
    }

    private function scrapeGoogleSearch($query) {
        $searchUrl = 'https://www.google.com/search?q=' . urlencode($query);
        $client = new Client();
        try {
            $response = $client->get($searchUrl);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $dom = new \DOMDocument();
                libxml_use_internal_errors(true);
                $dom->loadHTML($html);
                libxml_clear_errors();
                $xpath = new \DOMXPath($dom);
                $results = [];
                foreach ($xpath->query('//a[@href]') as $link) {
                    $href = $link->getAttribute('href');
                    if (strpos($href, '/url?q=') === 0) {
                        $href = substr($href, 7, strpos($href, '&') - 7);
                        $text = $link->nodeValue;
                        $results[] = ['href' => $href, 'text' => $text];
                    }
                }
                return $results;
            } else {
                log_message('error', 'scrapeGoogleSearch: Could not retrieve content, HTTP status code - ' . $response->getStatusCode());
                return ['error' => 'Could not retrieve content, HTTP status code - ' . $response->getStatusCode()];
            }
        } catch (RequestException $e) {
            log_message('error', 'scrapeGoogleSearch: RequestException - ' . $e->getMessage());
            return ['error' => 'RequestException error: ' . $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeGoogleSearch: General error - ' . $e->getMessage());
            return ['error' => 'General error: ' . $e->getMessage()];
        }
        return [];
    }

    public function scrapeLink() {
        $rawRequestBody = $this->request->getBody();
        $jsonData = json_decode($rawRequestBody, true);
        $url = $jsonData['url'] ?? null;

        if (!$url) {
            log_message('error', 'scrapeLink: URL is missing');
            return $this->response->setJSON(['success' => false, 'message' => 'URL is required.']);
        }

        try {
            log_message('debug', 'scrapeLink: Scraping URL - ' . $url);
            $scrapedData = $this->scrapeWebsiteWithFallback($url);

            if (isset($scrapedData['error'])) {
                log_message('error', 'scrapeLink: ' . $scrapedData['error']);
                return $this->response->setJSON(['success' => true, 'message' => 'Partially scraped data, proceeding with available data.']);
            }

            if (!empty($scrapedData['content'])) {
                $this->marketingModel->storeTempScrapedData([
                    'title' => $scrapedData['title'],
                    'content' => $scrapedData['content'],
                    'links' => json_encode($scrapedData['links']),
                    'url' => $scrapedData['url'],
                    'scraped_at' => date('Y-m-d H:i:s'),
                    'modified_on' => date('Y-m-d H:i:s'),
                ]);

                return $this->response->setJSON(['success' => true, 'message' => 'Scraped data stored successfully.', 'data' => $scrapedData]);
            } else {
                log_message('error', 'scrapeLink: Scraped data is empty');
                return $this->response->setJSON(['success' => false, 'message' => 'Scraping failed. Please check the URL and try again.']);
            }
        } catch (\Throwable $th) {
            log_message('error', 'scrapeLink: Exception - ' . $th->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'An error occurred during scraping.']);
        }
    }

    private function scrapeLinks($links) {
        $scrapedLinksData = [];
        foreach ($links as $link) {
            $url = filter_var($link['href'], FILTER_SANITIZE_URL);
            if (filter_var($url, FILTER_VALIDATE_URL)) {
                $scrapedData = $this->scrapeWebsite($url);
                if (!empty($scrapedData['content'])) {
                    $scrapedLinksData[] = $scrapedData;
                }
            }
        }
        return $scrapedLinksData;
    }

    private function scrapeWebsite($url) {
        $client = new Client();
        try {
            $response = $client->get($url, [
                'stream' => true,
                'headers' => [
                    'User-Agent' => 'MyMI Wallet Bot'
                ],
                'timeout' => 10, // optional: protect against hanging requests
                'http_errors' => false // prevents throwing exceptions on non-2xx responses
            ]);
            
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $dom = HtmlDomParser::str_get_html($html);
                if ($dom instanceof \voku\helper\HtmlDomParser) {
                    $title = $dom->find('title', 0)->text ?? 'No title found';
                    $bodyNode = $dom->find('body', 0);
                    $bodyContent = $bodyNode ? $this->sanitizeContent($bodyNode->innerHtml()) : 'No body content found';
                    $links = [];
                    foreach ($dom->find('a') as $link) {
                        $href = $link->getAttribute('href');
                        $text = $link->text;
                        $links[] = ['href' => $href, 'text' => $text];
                    }
                    log_message('debug', 'scrapeWebsite: Scraping successful for URL - ' . $url);
                    return [
                        'title' => $title,
                        'content' => $bodyContent,
                        'links' => $links,
                        'url' => $url
                    ];
                } else {
                    log_message('error', 'scrapeWebsite: DOM parsing failed for URL - ' . $url);
                    return ['error' => 'DOM parsing failed.'];
                }
            } else {
                log_message('error', 'scrapeWebsite: Could not retrieve content, HTTP status code - ' . $response->getStatusCode());
                return ['error' => 'Could not retrieve content, HTTP status code - ' . $response->getStatusCode()];
            }
        } catch (RequestException $e) {
            if ($e->hasResponse() && $e->getResponse()->getStatusCode() == 401) {
                log_message('error', 'scrapeWebsite: Unauthorized access for URL - ' . $url);
                return ['error' => 'Unauthorized access. Skipping URL.'];
            }
            log_message('error', 'scrapeWebsite: RequestException - ' . $e->getMessage());
            return ['error' => 'RequestException error: ' . $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeWebsite: General error - ' . $e->getMessage());
            return ['error' => 'General error: ' . $e->getMessage()];
        }
    }

    private function scrapeWebsiteWithFallback($url) {
        try {
            log_message('debug', 'scrapeWebsiteWithFallback: Scraping URL - ' . $url);
            $scrapedData = $this->scrapeWebsite($url);

            if (empty($scrapedData['content'])) {
                log_message('debug', 'scrapeWebsiteWithFallback: Scraped data is empty, performing Google search fallback');
                $googleSearchResults = $this->scrapeGoogleSearch($url);
                $scrapedLinksData = $this->scrapeLinks($googleSearchResults);
                $scrapedData['google_search_results'] = $scrapedLinksData;
            }

            return $scrapedData;
        } catch (RequestException $e) {
            log_message('error', 'scrapeWebsiteWithFallback: RequestException - ' . $e->getMessage());
            return ['error' => $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeWebsiteWithFallback: General error - ' . $e->getMessage());
            return ['error' => $e->getMessage()];
        }
    }

    public function searchAndApproveLogo($symbol)
    {
        $query = $symbol . ' logo png transparent';
        $searchUrl = 'https://www.google.com/search?q=' . urlencode($query) . '&tbm=isch';

        try {
            $response = $this->client->request('GET', $searchUrl);
            $htmlContent = $response->getBody()->getContents();

            // Use DOMDocument or other parsing methods to extract image URLs
            $dom = new \DOMDocument();
            @$dom->loadHTML($htmlContent);

            $xpath = new \DOMXPath($dom);
            $imageNodes = $xpath->query('//img');

            $imageUrls = [];
            foreach ($imageNodes as $imageNode) {
                $src = $imageNode->getAttribute('src');
                if ($src) {
                    $imageUrls[] = $src;
                }
            }

            // Pass image URLs to the view for approval
            return $this->renderTheme('ManagementModule\Views\Marketing\approve_logo', [
                'symbol' => $symbol,
                'imageUrls' => $imageUrls,
            ]);
        } catch (RequestException $e) {
            log_message('error', 'Google Search Request Failed: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to fetch logo suggestions.');
        }
    }

    public function sendScheduledNewsletter() {
        $campaigns = $this->marketingModel->getScheduledCampaigns();

        foreach ($campaigns as $campaign) {
            // Send the newsletter
            $this->getMyMIMarketing()->sendNewsletter($campaign['content'], $campaign['target_audience']);

            // Update the campaign status to 'sent'
            $this->marketingModel->updateCampaignStatus($campaign['id'], 'sent');
        }
        // Redirect after fetching emails
        return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                         ->with('success', 'Scheduled newsletters sent successfully');
    }

    public function standaloneAddSubscriber() {
        $this->data['pageTitle'] = 'Add Subscriber | Management | MyMI Wallet';
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneAddSubscriber', $this->data);
    }

    public function standaloneScrape() {
        $this->data['pageTitle'] = 'Quick Scraper | Management | MyMI Wallet';
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneScraper', $this->data);
    }

    private function storeScrapedData($scrapedData) {
        $db = \Config\Database::connect();
        $builder = $db->table('bf_marketing_temp_scraper');
        $data = [
            'title' => $scrapedData['title'],
            'content' => $scrapedData['content'],
            'links' => json_encode($scrapedData['links']),
            'url' => $scrapedData['url'],
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ];
        $builder->insert($data);
    }

    public function submitContent() {
        $request = service('request');

        // Validate the form input
        $validationRules = [
            'campaignName' => 'required|min_length[3]',
            'promotionalLinks' => 'required',
            'facebookMessage' => 'required',
            'linkedinMessage' => 'required',
            'discordMessage' => 'required',
            'stockTwitsMessage' => 'required',
            'tiktokMessage' => 'required',
            'youtubeMessage' => 'required',
            'emailMessage' => 'required',
        ];

        if (!$this->validate($validationRules)) {
            return redirect()->back()->with('errors', $this->validator->getErrors())->withInput();
        }

        // Retrieve input data
        $campaignData = [
            'name' => $request->getPost('campaignName'),
            'promotional_links' => json_encode($request->getPost('promotionalLinks')),  // Storing as JSON
            'facebook_message' => $request->getPost('facebookMessage'),
            'linkedin_message' => $request->getPost('linkedinMessage'),
            'discord_message' => $request->getPost('discordMessage'),
            'stocktwits_message' => $request->getPost('stockTwitsMessage'),
            'tiktok_message' => $request->getPost('tiktokMessage'),
            'youtube_message' => $request->getPost('youtubeMessage'),
            'email_message' => $request->getPost('emailMessage'),
            'additional_info' => $request->getPost('additionalInfo'),
            'created_on' => date('Y-m-d H:i:s'),
            'status' => 1,  // Default active status
            'stage' => 'draft',  // Default stage
        ];

        // Save data to the database
        $marketingModel = new MarketingModel();
        if ($marketingModel->insert($campaignData)) {
            return redirect()->to('/Marketing/Success')->with('success', 'Marketing content submitted successfully.');
        } else {
            return redirect()->back()->with('error', 'Failed to submit marketing content.')->withInput();
        }
    } 

    public function submitDailyLog()
    {
        $data = [
            'title' => $this->request->getPost('subject'),
            'content' => $this->request->getPost('log_content'),
            'subcontent' => json_encode($this->request->getPost('subcontent')),
            'tags' => $this->request->getPost('tags'),
            'type' => $this->request->getPost('content_type'),
            'url' => $this->request->getPost('url'),
            'author_information' => $this->request->getPost('author_information'),
            'date_time' => $this->request->getPost('date_time'),
            'trade_alert_subcategory' => $this->request->getPost('trade_alert_subcategory'), // New Field
            'created_on' => date('Y-m-d H:i:s'),
        ];
    
        if ($this->marketingModel->saveDailyLog($data)) {
            return $this->response->setJSON(['success' => true, 'message' => 'Daily log submitted successfully!']);
        } else {
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to submit daily log.']);
        }
    }    

    public function submitLargeContent() {
        log_message('debug', 'submitLargeContent method called');
        try {
            $subject = $this->request->getPost('subject');
            $url = $this->request->getPost('url');
            $content = $this->request->getPost('large_content');
            $tags = $this->request->getPost('tags');
            $uploadedFiles = $this->request->getFiles();
            $contentType = $this->request->getPost('content_type');
    
            // Handle media upload
            $mediaAssets = $this->handleMediaUpload($uploadedFiles['media_assets']);
    
            // Check if content is non-empty and properly formatted
            if (empty($content) || strlen($content) < 50) {
                throw new \Exception('Content too short or empty');
            }
    
            // Generate content from large text
            $generatedContent = $this->getMyMIMarketing()->generateContentFromLargeText($content, $tags);
    
            // Ensure 'keywords' is always an array// Ensure 'keywords' is always an array
            $keywords = is_array($generatedContent['keywords']) ? $generatedContent['keywords'] : [];
            
            // Store scraped content in the database
            $this->marketingModel->storeScrapedContent([
                'status' => 'pending',
                'type' => $contentType,
                'url' => $url,
                'title' => $subject,
                'summary' => $generatedContent['summary'],
                'content' => $content,
                'keywords' => implode(', ', $keywords), // Always pass an array to implode
                'created_on' => date('Y-m-d H:i:s'),
            ]);
    
            return $this->response->setJSON(['success' => true]);
        } catch (\Exception $e) {
            log_message('error', 'submitLargeContent error: ' . $e->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to submit content.']);
        }
    } 

    public function submitLargeContentForm() {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->commonData();
        $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneLargeContentForm', $this->data);
    }
    
    public function submitMarketingCampaign() {
        helper(['form', 'url']);
        
        // Capture and sanitize input
        $data = [
            'name' => $this->request->getPost('campaignName'),
            'assigned_to' => $this->request->getPost('assigned_to'),
            'promotional_links' => json_encode($this->request->getPost('promotionalLinks')),
            'facebook_message' => htmlentities($this->request->getPost('facebookMessage'), ENT_QUOTES, 'UTF-8'),
            'linkedin_message' => htmlentities($this->request->getPost('linkedinMessage'), ENT_QUOTES, 'UTF-8'),
            'discord_message' => htmlentities($this->request->getPost('discordMessage'), ENT_QUOTES, 'UTF-8'),
            'stocktwits_message' => htmlentities($this->request->getPost('stocktwitsMessage'), ENT_QUOTES, 'UTF-8'),
            'tiktok_message' => htmlentities($this->request->getPost('tiktokMessage'), ENT_QUOTES, 'UTF-8'),
            'youtube_message' => htmlentities($this->request->getPost('youtubeMessage'), ENT_QUOTES, 'UTF-8'),
            'email_message' => htmlentities($this->request->getPost('emailMessage'), ENT_QUOTES, 'UTF-8'),
            'additional_info' => htmlentities($this->request->getPost('additionalInfo'), ENT_QUOTES, 'UTF-8'),
            'overall_campaign_description' => htmlentities($this->request->getPost('overall_campaign_description'), ENT_QUOTES, 'UTF-8'),
            'voice_script' => htmlentities($this->request->getPost('voice_script'), ENT_QUOTES, 'UTF-8')
        ];

        // Validate the data
        if ($this->validate([
            'name' => 'required',
            'facebook_message' => 'required',
            // Add other validation rules as needed
        ])) {
            // Save data to the database using the model's method
            $this->marketingModel->submitCampaignContent($data);
            return redirect()->to('/dashboard')->with('success', 'Campaign submitted successfully.');
        } else {
            // Redirect back with input and errors if validation fails
            return redirect()->back()->withInput()->with('errors', $this->validator->getErrors());
        }
    }

    public function submitMarketIdeas() {
        if ($this->request->getMethod() === 'post') {
            $data = [
                'title' => $this->request->getPost('title'),
                'description' => htmlentities($this->request->getPost('description'), ENT_QUOTES, 'UTF-8'),
                'created_by' => session()->get('user_id'), // Assuming the user ID is stored in the session
                'assigned_to' => $this->request->getPost('assigned_to'),
                'priority' => $this->request->getPost('priority'),
                'status' => 'draft', // Initial status
                'platforms' => json_encode($this->request->getPost('platforms')),
                'additional_info' => htmlentities($this->request->getPost('additional_info'), ENT_QUOTES, 'UTF-8'),
            ];
    
            // Handle image uploads
            $uploadedFiles = $this->request->getFiles();
            $filePaths = [];
    
            if ($uploadedFiles && isset($uploadedFiles['imageFiles'])) {
                foreach ($uploadedFiles['imageFiles'] as $file) {
                    if ($file->isValid() && !$file->hasMoved()) {
                        $newName = $file->getRandomName();
                        $file->move(FCPATH . 'public/assets/images/Marketing/Ideas', $newName);
                        $filePaths[] = base_url('assets/images/Marketing/Ideas/' . $newName);
                    }
                }
            }
    
            // Store file paths as a JSON array in the database
            if (!empty($filePaths)) {
                $data['image_paths'] = json_encode($filePaths);
            }
    
            // Validate and submit data
            if ($this->validate([
                'title' => 'required',
                'description' => 'required'
            ])) {
                $this->marketingModel->submitIdea($data);
                return redirect()->back()->with('success', 'Idea submitted successfully.');
            } else {
                return redirect()->back()->withInput()->with('errors', $this->validator->getErrors());
            }
        }
    }

    public function topCommunities($channel = null) {
        $this->commonData(); // Call this to populate $this->data
    
        $MyMIExchange = new MyMIExchange(); 
        $exchangeTokens = $MyMIExchange->getSolanaTokens();
        
        if (!empty($channel)) {
            if ($channel === 'Discord') {
                $this->data['tokens'] = $exchangeTokens['discord'];
                $this->data['pageTitle'] = 'Discord Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\discord', $this->data);
            } elseif ($channel === 'Facebook') {
                $this->data['tokens'] = $exchangeTokens['facebook'];
                $this->data['pageTitle'] = 'Facebook Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\facebook', $this->data);
            } elseif ($channel === 'Twitter') {
                $this->data['tokens'] = $exchangeTokens['x_twitter'];
                $this->data['pageTitle'] = 'Twitter Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\twitter', $this->data);
            } elseif ($channel === 'Website') {
                $this->data['tokens'] = $exchangeTokens['website'];
                $this->data['pageTitle'] = 'Website Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\website', $this->data);
            } else {
                // Default to 'all' if the channel is not recognized
                $this->data['tokens'] = $exchangeTokens['all'];
                $this->data['pageTitle'] = 'All Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens', $this->data);
            }
        } else {
            // If no channel is specified, show all tokens
            $this->data['tokens'] = $exchangeTokens['all'];
            $this->data['pageTitle'] = 'All Communities';
            $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens', $this->data);
        }
    }

    public function twitterDashboard() {
        $data = [
            'pageTitle' => 'Twitter Dashboard',
            'hashtags' => $this->request->getPost('hashtags') ?? '',
            'tweets' => []
        ];

        if ($this->request->getMethod() === 'post') {
            $hashtags = $this->request->getPost('hashtags');
            $tweets = $this->getMyMIMarketing()->fetchTweets($hashtags);
            $data['tweets'] = $tweets;
        }

        return $this->renderTheme('Management/Marketing/Twitter', $data);
    }

    public function upcomingEarnings()
    {
        // Fetch upcoming earnings from a model (assuming you have a model for this)
        $model = new \App\Models\EarningsModel();
        $upcomingEarnings = $model->getUpcomingEarnings(); // Fetch upcoming earnings

        // Prepare data for the view
        $this->data['upcomingEarnings'] = $upcomingEarnings;

        return $this->renderTheme('ManagementModule\Views\Marketing\upcoming_earnings', $this->data);
    }

    public function viewBlog($slug)
    {
        $blogPost = $this->marketingModel->getBlogPostBySlug($slug);
    
        if (!$blogPost) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Blog post not found');
        }
    
        return $this->renderTheme('blog/view', ['blogPost' => $blogPost]);
    }
    
    public function viewCampaign($campaign_id) {
        $campaignModel = new CampaignModel();
        $campaign = $this->marketingModel->getCampaignsById($campaign_id);

        if (!$campaign) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException("Campaign not found");
        }

        return $this->renderTheme('ManagementModule\Views\Marketing\Campaigns\View', ['campaign' => $campaign]);
    }     
    
    public function viewDailyLogs($date = null)
    {
        $date = $this->siteSettings->date ?? date('Y-m-d');

        $this->data['pageTitle'] = 'Marketing Daily Log | ' . $date . ' | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        $this->data['logs'] = $this->marketingModel->getDailyLogsByDate($date);
        $this->commonData();
        return $this->renderTheme('ManagementModul\Views\Marketing\Daily_Logs', ['logs' => $logs, 'date' => $date]);
    }

    public function viewEmail($titleEncoded = null, $messageId = null)
    {
        log_message('debug', 'üìß ManagementController::viewEmail called');
    
        try {
            if (empty($messageId)) {
                return redirect()->back()->with('error', 'Invalid email identifier.');
            }
    
            $emailRecord = $this->marketingModel->getEmailByMessageId($messageId);
    
            if (!$emailRecord) {
                return redirect()->back()->with('error', 'Email not found.');
            }
    
            $socialMediaPosts = $this->getMarketingService()->generateContentFromRaw($emailRecord);
            $emailRecord['social_media'] = $socialMediaPosts['posts'] ?? [];
    
            return $this->renderTheme('Management/Marketing/EmailDetail', [
                'email' => $emailRecord
            ]);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå viewEmail() failed: ' . $e->getMessage());
            return $this->failServerError('Unable to load email.');
        }
    }
    
    public function viewGeneratedContent() {
        $contentData = $this->marketingModel->getLastGeneratedContent();  // Get last generated content
        $platformsContent = json_decode($contentData['platforms_content'], true);  // Decode the JSON
    
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->data['platforms_content'] = $platformsContent;
        $this->commonData();
        $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneGeneratedContent', $this->data);
    }   
}
?>
<?php

namespace App\Libraries;

use App\Config\{SiteSettings, SocialMedia};
use App\Libraries\{BaseLoader, MyMIInvestments};
use App\Libraries\Traits\TextProcessor;
use App\Models\{AnalyticalModel, MarketingModel};
use App\Services\{EmailService, MarketingService, SolanaService};
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\Session\Session;
use Myth\Auth\Authorization\GroupModel;
use Exception;
use HTMLPurifier;
use HTMLPurifier_Config;
use Phpml\FeatureExtraction\TokenCountVectorizer;
use Phpml\Tokenization\WhitespaceTokenizer;
use Phpml\FeatureExtraction\TfIdfTransformer;
use NlpTools\Tokenizers\WhitespaceTokenizer as NlpWhitespaceTokenizer;
use NlpTools\Similarity\CosineSimilarity;
use Facebook\Facebook;
use Abraham\TwitterOAuth\TwitterOAuth;
use Happyr\LinkedIn\LinkedIn;
use Discord\Discord;
use Discord\Parts\Channel\Message;
use GuzzleHttp\Client;
use Scrapemax\ScrapemaxClient;
use Pscrape\Pscrape\Scrape as PscrapeScraper;


class MyMIMarketing
{
    use BaseLoader;
    use TextProcessor;
    protected $auth;
    protected $cuID;
    protected $data;
    protected $debug;
    protected $logger;
    protected $request;
    protected $session;
    protected $uri;
    protected $APIs;
    protected $emailService;
    protected $solanaService;
    protected $siteSettings;
    protected $marketingModel;
    protected $analyticalModel;
    protected $socialMedia;
    protected $facebook;
    protected $twitter;
    protected $linkedin;
    protected $discord;
    protected $scrapemax;
    protected $pscrape;
    // protected $initializeServices;

    public function __construct()
    {
        $this->auth = service('authentication');
        $this->logger = service('logger');
        $this->request = service('request');
        $this->session = service('session');
        $this->uri = $this->request->getUri();
        $this->APIs = config('APIs');
        $this->socialMedia = config('SocialMedia');
        $this->siteSettings = config('SiteSettings');
        $this->debug = $this->siteSettings->debug;
        $this->socialMedia = config('SocialMedia');
        $this->marketingModel = new MarketingModel();
        $this->analyticalModel = new AnalyticalModel();
        $this->emailService = service('email');
        $this->solanaService = new SolanaService();
        // $this->twitter = new TwitterOAuth(
        //     API_KEY, 
        //     API_SECRET, 
        //     ACCESS_TOKEN, 
        //     ACCESS_SECRET
        // );
        // $this->initializeServices();
        
        // Initialize Scrapemax and Pscrape clients
        $this->scrapemax = new ScrapemaxClient('https://api.scrapemax.com', $this->APIs->scrapemax_api_key);
        $this->pscrape = new PscrapeScraper();
        
        // Facebook Configuration

        // $fbConfig = config('Facebook');
        // $this->facebook = new Facebook([
        //     'app_id' => $fbConfig->app_id,
        //     'app_secret' => $fbConfig->app_secret,
        //     'default_graph_version' => $fbConfig->default_graph_version,
        // ]);

        // $this->twitter = new TwitterOAuth(
        //     $this->socialMedia->twitter_api_key,
        //     $this->socialMedia->twitter_api_secret_key,
        //     $this->socialMedia->twitter_access_token,
        //     $this->socialMedia->twitter_access_token_secret
        // );

        // $this->linkedin = new LinkedIn(
        //     $this->socialMedia->linkedin_client_id,
        //     $this->socialMedia->linkedin_client_secret
        // );

        // $this->discord = new Discord([
        //     'token' => $twitterConfig->discord_bot_token
        // ]);
    }

    public function marketing()
    {
        $department = $this->department();
        $links = $this->social_media();
        return ['links' => $links, 'department' => $department];
    }

    public function distributeTradeAlert($alert, $action = 'BUY')
    {
        $message = $this->generateTradeAlertMessage($alert, $action);
    
        // Post to each platform
        $this->postToDiscord($message);
        $this->postToTwitter($message);
        $this->postToFacebook($message);
        $this->postToLinkedIn($message);
    }
    
    /**
     * Generate randomized marketing content for a trade alert.
     *
     * @param array $tradeAlert A record from bf_investment_trade_alerts.
     * @return array Associative array with keys for each social platform.
     */
    public function generateRandomMarketingContent(array $tradeAlert): array
    {
        // üî• Diverse intros for engagement
        $intros = [
            "üö® Breaking Market Update!",
            "üì¢ Urgent Trade Alert!",
            "üî• High-Momentum Stock Pick!",
            "üöÄ Skyrocketing Stocks!",
            "üí∞ Smart Money Moves!",
            "‚ö° Quick Market Insight!",
            "üìà Bullish Breakout Alert!",
            "üìä Technical Setup Unfolding!",
            "üßê Deep Market Analysis!",
            "üí° Pro-Level Trading Insight!"
        ];
    
        // üé≠ Emoticons to boost visibility
        $emoticons = ['üöÄ', 'üî•', 'üí∞', 'üìà', 'üìä', '‚ö°', '‚úÖ', 'ü§ñ', 'üéØ', 'üîç'];
    
        // üèÜ CTAs with strong call-to-action
        $outros = [
            "üìä Stay ahead of the markets!",
            "‚è≥ Don't miss this setup!",
            "üí∞ Trade smart & maximize gains!",
            "üöÄ Follow for more trade alerts!",
            "üìà Watch this ticker closely!",
            "üî• This could be the next big mover!",
            "üí° Insights that matter. Stay tuned!",
            "üíé Precision trading at its best!",
            "‚ö° More insights coming soon!",
            "üì¢ Tap in for more premium setups!"
        ];
    
        // üéØ Randomly select elements
        $intro = $intros[array_rand($intros)];
        $outro = $outros[array_rand($outros)];
        $emote1 = $emoticons[array_rand($emoticons)];
        $emote2 = $emoticons[array_rand($emoticons)];
    
        // üìå Extract core trade details
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $tradeDesc = trim($tradeAlert['trade_description'] ?? '');
        $news = trim($tradeAlert['financial_news'] ?? '');
        $details = trim($tradeAlert['details'] ?? '');
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $link = trim($tradeAlert['tv_chart'] ?? $tradeAlert['tv_chart_link'] ?? '');
    
        // üìä Prepare chart link text (if available)
        $chartText = (!empty($link)) ? "üìâ Chart: [View Here]({$link})\n" : '';
    
        // üßÆ Calculate space used by fixed elements
        $fixedLength = strlen($intro) + strlen($outro) + strlen($emote1) + strlen($emote2) + strlen($chartText) + 12; // Buffer spacing
    
        // üìè Set max allowed length for trade message
        $maxMessageLength = 2000 - $fixedLength;
    
        // ‚úçÔ∏è Construct the trade alert message
        $coreMessage = "Trade Alert for **{$ticker}** ({$company}):\n"
                     . "Price: \${$price}\n"
                     . "Signal: {$tradeDesc}\n"
                     . "News: {$news}\n"
                     . "Details: {$details}\n"
                     . $chartText;
    
        // üî™ Trim if it exceeds max allowed length
        if (strlen($coreMessage) > $maxMessageLength) {
            $coreMessage = substr($coreMessage, 0, $maxMessageLength - 3) . "...";
        }
    
        // üèÅ Final assembly with intros, outros, and chart link
        $finalMessage = "{$emote1} {$intro}\n{$coreMessage}\n{$outro} {$emote2}";
    
        // üì≤ Return platform-specific formats
        return [
            'twitter'  => substr($finalMessage, 0, 280),   // Twitter (X) limit
            'facebook' => substr($finalMessage, 0, 2000),  // Facebook limit
            'linkedin' => substr($finalMessage, 0, 2000),  // LinkedIn limit
            'discord'  => substr($finalMessage, 0, 2000)   // Discord limit
        ];
    }
    
    /**
     * Generate Email content.
     */
    public function generateEmailContent(array $tradeAlert): string
    {
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $tradeDesc = $tradeAlert['trade_description'] ?? '';
        $news = $tradeAlert['financial_news'] ?? '';
        $details = $tradeAlert['details'] ?? '';
        $content = "Email Alert for {$ticker} ({$company}):\n"
                 . "Current Price: \${$price}\n"
                 . "Trade Signal: {$tradeDesc}\n"
                 . "Latest News: {$news}\n"
                 . "Analysis Details: {$details}\n"
                 . "For more information, visit our website.";
        return $content;
    }

    /**
     * Generate Blog post content.
     */
    public function generateBlogContent(array $tradeAlert): string
    {
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $tradeDesc = $tradeAlert['trade_description'] ?? '';
        $news = $tradeAlert['financial_news'] ?? '';
        $details = $tradeAlert['details'] ?? '';
        $content = "Blog Post: In-depth Market Analysis on {$ticker} ({$company})\n\n"
                 . "Current Price: \${$price}\n\n"
                 . "Trade Analysis: {$tradeDesc}\n\n"
                 . "Financial News: {$news}\n\n"
                 . "Detailed Analysis: {$details}\n\n"
                 . "Stay tuned for more insights!";
        return $content;
    }

    /**
     * Generate a Voiceover Script for Video.
     */
    public function generateVoiceoverScriptContent(array $tradeAlert): string
    {
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $tradeDesc = $tradeAlert['trade_description'] ?? '';
        $script = "Voiceover Script:\n"
                . "Welcome to today's market update. Our focus is on {$ticker} from {$company}.\n"
                . "The current trading price is \${$price}.\n"
                . "Trade insight: {$tradeDesc}.\n"
                . "Thank you for watching. Stay tuned for more updates.";
        return $script;
    }

    /**
     * Generate Email Content using a template with dynamic placeholders.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertEmailContent(array $tradeAlert): string
    {
        // Define a default email template (this could also be stored in a DB for flexibility)
        $defaultTemplate = <<<EOT
        Hello,

        {intro}

        Check out our latest trade alert on {ticker} from {company}!
        Current Price: \${price}
        Trade Signal: {trade_description}
        Latest News: {financial_news}
        For more details, view the full analysis here: {trade_chart_link}

        {outro}
        EOT;
        // Randomized intros and outros for variation:
        $intros = [
            "Heads up, traders!",
            "Breaking news from the market!",
            "Your daily trade update is here!",
            "Hot off the press!",
            "Market alert!"
        ];
        $outros = [
            "Happy trading!",
            "Stay tuned for more insights.",
            "Trade smart and prosper!",
            "Keep your eyes on the market!",
            "Have a great trading day!"
        ];
        $intro = $intros[array_rand($intros)];
        $outro = $outros[array_rand($outros)];

        // Build the replacement map. Use defaults if a field is missing.
        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.',
            '{financial_news}'    => $tradeAlert['financial_news'] ?? 'No news available.',
            '{trade_chart_link}'  => $tradeAlert['trade_chart_link'] ?? 'https://www.mymiwallet.com/trade-overview?ticker=' . urlencode($tradeAlert['ticker'] ?? ''),
            '{intro}'             => $intro,
            '{outro}'             => $outro
        ];

        // Replace all placeholders in the template.
        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Generate Blog Content using a template.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertBlogContent(array $tradeAlert): string
    {
        $defaultTemplate = <<<EOT
        Blog Post: Market Analysis on {ticker} ({company})

        **Current Price:** \${price}

        **Trade Analysis:**
        {trade_description}

        **Financial News Update:**
        {financial_news}

        For a detailed review, visit our website.
        EOT;

        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.',
            '{financial_news}'    => $tradeAlert['financial_news'] ?? 'No news available.'
        ];

        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Generate Voiceover Script Content using a template.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertVoiceoverScriptContent(array $tradeAlert): string
    {
        $defaultTemplate = <<<EOT
        Voiceover Script for {ticker}:

        "Welcome to today‚Äôs market update. Our focus is on {ticker} from {company}. 
        Currently, it is trading at \${price}. 
        Trade insight: {trade_description}. 
        Stay tuned for further updates and in-depth analysis."

        Thank you for watching!
        EOT;

        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.'
        ];

        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Example method to generate randomized social media content.
     * (This method already exists in your codebase.)
     *
     * @param array $tradeAlert
     * @return array
     */
    public function generateTradeAlertRandomMarketingContent(array $tradeAlert): array
    {
        $intros = [
            "Heads up, traders!",
            "üî• Hot Trade Alert!",
            "üöÄ Ready for a breakout?",
            "Attention: Market Movers!",
            "‚ö° Quick update:"
        ];
        $emoticons = ['üöÄ', 'üî•', 'üí∞', 'üìà', 'üìä', '‚ö°', '‚úÖ', 'ü§ñ'];
        $outros = [
            "Stay tuned for more!",
            "Don't miss out!",
            "Trade smart and prosper!",
            "Keep your eyes on the market!",
            "Happy trading!"
        ];
        $intro = $intros[array_rand($intros)];
        $emote = $emoticons[array_rand($emoticons)];
        $outro = $outros[array_rand($outros)];
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $tradeDesc = trim($tradeAlert['trade_description'] ?? '');
        $news = trim($tradeAlert['financial_news'] ?? '');
        $details = trim($tradeAlert['details'] ?? '');
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        
        $baseMessage = "{$emote} {$intro}\n" .
            "Trade Alert for **{$ticker}** ({$company}):\n" .
            "Price: \${$price}\n" .
            "Signal: {$tradeDesc}\n" .
            "News: {$news}\n" .
            "Details: {$details}\n" .
            "{$outro} {$emote}";
        
        $socialContent = [
            'twitter'  => substr($baseMessage, 0, 280),
            'facebook' => $baseMessage,
            'linkedin' => $baseMessage,
            'discord'  => $baseMessage
        ];
        
        return $socialContent;
    }

    public function getBlogPosts()
    {
         
        $getBlogPosts = $this->marketingModel->getBlogPosts();
        return ['getBlogPosts' => $getBlogPosts];
    }

    // public function getCampaignsBySchedId($accountid) {
    //     
    //     $campaigns = $this->marketingModel->getCampaignsBySchedId($accountid); 
    //     return $campaigns; 
    // } 

    public function getCampaigns() {
        
        $getMarketingCampaigns = $this->marketingModel->getActiveCampaigns(); 
        return $getMarketingCampaigns; 
    }

    public function getCampaignByID($campaignID) { 
        
        $campaignInfo = $this->marketingModel->getCampaignById($campaignID); 
        return $campaignInfo; 
    }

    public function getCampaignsBySchedId($sched_id) {
        
        $campaigns = $this->marketingModel->getCampaignsBySchedId($sched_id); 
        if ($campaigns) {
            foreach ($campaigns as &$campaign) {
                $campaign['primary_content'] = $this->generateSchedPrimaryContent($campaign['id']);
                $campaign['social_media_content'] = $this->generateSchedSocialMediaContent($campaign['id']);
            }
        } else {
            $campaigns = []; // Ensure campaigns is an array
        }
        log_message('debug', 'MyMIMarketing::getCampaignsBySchedId - $campaigns: ' . print_r($campaigns, true));
        return $campaigns;
    }  

    public function getFeatures() {
        
        $getFeatures                        = $this->marketingModel->getFeatures(); 
        if ($this->debug === 1) {
            // log_message('debug', 'MyMIDashboard L113 - $getFeatures: ' . (print_r($getFeatures, true)));
        }
        return $getFeatures; 
    }

    public function getManagementTeam() {
        
        $getManagementTeam                 = $this->marketingModel->getMarketingTeam(); 
        if ($this->debug === 1) {
            // log_message('debug', 'MyMIDashboard L121 - $getManagementTeam: ' . (print_r($getManagementTeam, true)));
        }
        return $getManagementTeam; 
    }
    
    public function generateContentForZapier($platform, $contentData)
    {
        $payload = [
            'platform' => $platform,
            'content' => $contentData['content'],
            'media_url' => $contentData['media_url'] ?? null,
        ];

        return json_encode($payload);
    } 
    
    public function generateContentFromRaw(array $emailRecord)
    {
        if (!isset($emailRecord['content']) || strlen(trim($emailRecord['content'])) < 1000) {
            log_message('error', 'generateContentFromRaw(): Invalid or too short content.');
            return null;
        }        
    
        // üîΩ Sanitize BEFORE splitting
        $rawText = $emailRecord['content'];
        $cleanContent = $this->sanitizeRawEmailContent($rawText);
    
        // Optional guard clause for malformed bodies
        if (strlen($cleanContent) < 500 || substr_count($cleanContent, ' ') < 10) {
            log_message('error', "‚ùå Skipping record ID {$emailRecord['id']} ‚Äî insufficient cleaned content.");
            return null;
        }           
    
        $summaryData = $this->summarizeContentFromHtml($cleanContent);
    
        if (empty($summaryData) || empty($summaryData['summary'])) {
            log_message('error', 'Failed to summarize content for record ID '.$emailRecord['id'] . ' For Array: ' . (print_r($summaryData,true)));
            return null;
        }
    
        $summary = $summaryData['summary'];
        $headline = $this->generateHeadline($summary);
        $subtopics = $this->extractSubtopics($text);
    
        $posts = [
            'blog'     => $this->formatBlogPost($headline, $summary),
            'email'    => $this->formatEmailBlast($headline, $summary),
            'facebook' => $this->formatSocialPost($headline, $summary, 'facebook'),
            'linkedin' => $this->formatSocialPost($headline, $summary, 'linkedin'),
            'twitter'  => $this->formatSocialPost($headline, $summary, 'twitter'),
            'discord'  => $this->formatDiscordPost($headline, $summary),
        ];
    
        $this->insertFinalScraper($emailRecord, [
            'summary'  => $summary,
            'keywords' => $summaryData['keywords'] ?? [],
        ]);
    
        return [
            'headline'  => $headline,
            'summary'   => $summary,
            'subtopics' => $subtopics,
            'posts'     => $posts,
            'source_id' => $emailRecord['id'],
            'platforms' => json_encode(array_keys($posts)),
            'status'    => 'ready',
        ];
    }
    
    public function generateHeadline(string $summary): string
    {
        if (empty($summary)) {
            log_message('warning', '‚ö†Ô∏è generateHeadline: summary is empty.');
            return 'MyMI Update';
        }
    
        // Basic headline generation: use the first sentence or a truncated version
        $sentences = preg_split('/(\.|\?|!)\s/', strip_tags($summary), 2);
        $headline = $sentences[0] ?? $summary;
    
        // Clean it and limit to 12 words max
        $words = explode(' ', $headline);
        $cleanHeadline = implode(' ', array_slice($words, 0, 12));
    
        // Ensure it ends cleanly
        return rtrim($cleanHeadline, ',;:') . (count($words) > 12 ? '...' : '');
    }
    
    private function generateSchedPrimaryContent($campaignId) {
        // Logic to generate primary content
        return 'Primary content for campaign ID ' . $campaignId;
    }
    
    private function generateSchedSocialMediaContent($campaignId) {
        // Logic to generate social media content
        return [
            'facebook' => 'Facebook content for campaign ID ' . $campaignId,
            'twitter' => 'Twitter content for campaign ID ' . $campaignId,
        ];
    }

    private function generateTradeAlertMessage($alert, $action)
    {
        return "**üöÄ TRADE ALERT! üöÄ**\n"
            . "**Symbol:** {$alert['ticker']}\n"
            . "**Company:** {$alert['company']}\n"
            . "**Type:** {$action}\n"
            . "**Price:** \${$alert['price']}\n"
            . "**Target:** \${$alert['target_price']}\n"
            . "**Stop Loss:** \${$alert['stop_loss']}\n"
            . "[üìä View Chart]({$alert['tv_chart']})";
    }   

    private function buildSummaryToCharLimit($sentences, $scores, $charLimit = 500)
    {
        arsort($scores, SORT_NUMERIC);
        $summary = '';
        foreach ($scores as $index => $score) {
            $sentence = $sentences[$index] . ' ';
            if (strlen($summary) + strlen($sentence) > $charLimit) break;
            $summary .= $sentence;
        }
        return trim($summary);
    }

    private function compressEmailBody($body)
    {
        // Replace multiple whitespaces (tabs, newlines) with a single space
        $body = preg_replace('/\s+/', ' ', $body);
        return trim($body);
    }

    public function convertToUtf8($content)
    {
        $encoding = mb_detect_encoding($content, "UTF-8, ISO-8859-1, GBK", true);
        return ($encoding == "UTF-8") ? $content : mb_convert_encoding($content, "UTF-8", $encoding);
    }
    
    public function convertUrlsToLinks($text)
    {
        $urlPattern = '/\bhttps?:\/\/\S+/i';
        return preg_replace($urlPattern, '<a href="$0" target="_blank">$0</a>', $text);
    }

    public function calculateCosineSimilarity($text1, $text2)
    {
        $tokenizer = new NlpWhitespaceTokenizer();
        $cosine = new CosineSimilarity();
        $set1 = $tokenizer->tokenize($text1);
        $set2 = $tokenizer->tokenize($text2);
        $similarity = $cosine->similarity($set1, $set2);
        $this->logger->debug('Cosine Similarity: ' . $similarity);
        return $similarity;
    }

    private function calculateFeatureScore($sentence, $features)
    {
        $score = 0;
        $words = explode(" ", strtolower($sentence));
        foreach ($words as $word) {
            $score += $features[$word] ?? 0.1; // Default score if feature not found
        }
        return $score;
    }

    private function calculateKeywordScore($sentence, $tokens)
    {
        $score = 0;
        foreach ($tokens as $token) {
            if (strpos(strtolower($sentence), strtolower($token)) !== false) {
                $score++;
            }
        }
        $this->logger->debug('Keyword Score for sentence: ' . $score);
        return $score;
    }

    private function calculateSemanticDiversity($sentence, $summary, $tokens)
    {
        $diversityScore = 0;
        foreach ($summary as $summarizedSentence) {
            if ($this->isSemanticallyDifferent($sentence, $summarizedSentence, $tokens)) {
                $diversityScore++;
            }
        }
        $this->logger->debug('Semantic Diversity Score for sentence: ' . $diversityScore);
        return $diversityScore;
    }

    public function extractFeaturesWithPhpMl($content)
    {
        $vectorizer = new TokenCountVectorizer(new WhitespaceTokenizer());
        $samples = [$content];
        $vectorizer->fit($samples);
        $vectorizer->transform($samples);
        $this->logger->debug('Feature Vectors: ' . print_r($samples, true));
        return $samples;
    }

    /**
     * Dynamically extract top hashtags from content
     */
    protected function extractHashtags(string $text): string
    {
        $words = str_word_count(strtolower(strip_tags($text)), 1);
        $wordFreq = array_count_values($words);

        $filtered = array_filter($wordFreq, fn($freq, $word) => strlen($word) > 3 && $freq > 1, ARRAY_FILTER_USE_BOTH);
        arsort($filtered);

        $topWords = array_slice(array_keys($filtered), 0, 5);

        return implode(' ', array_map(fn($word) => '#' . ucfirst($word), $topWords));
    }

    public function extractKeywords($content, $maxKeywords = 5)
    {
        if (!is_string($content)) {
            log_message('error', 'MyMIMarketing L1004 -extractKeywords(): Content must be a string');
            return [];
        }
    
        $content = $this->normalizeUtf8($content);
        $sentences = $this->splitIntoSentences($content);
        if (empty($sentences)) {
            log_message('error', 'MyMIMarketing L1011 -extractKeywords(): No valid sentences to process');
            return [];
        }
    
        $tfIdf = new TfIdfTransformer();
        $tokenized = array_values(array_filter(array_map(function($sentence) {
            $cleaned = strtolower($this->normalizeUtf8(trim($sentence)));
            $tokens = array_filter(explode(' ', $cleaned), fn($w) => strlen($w) > 1);
            return count($tokens) > 0 ? $tokens : null;
        }, $sentences)));
        
        if (empty($tokenized) || !is_array($tokenized[0])) {
            log_message('error', '‚ùå MyMIMarketing L1023 -Tokenized input invalid for TF-IDF. Content: ' . print_r($tokenized, true));
            return [];
        }        
    
        try {
            $tfIdf->fit($tokenized);
            $tfIdf->transform($tokenized);
        } catch (\Throwable $e) {
            log_message('error', '‚ùå MyMIMarketing L1031 - TF-IDF error: ' . $e->getMessage());
            return [];  // or continue to next valid record
        }        
    
        $scores = [];
        foreach ($tokenized as $tokens) {
            foreach ($tokens as $token) {
                if (!isset($scores[$token])) {
                    $scores[$token] = 0;
                }
                $scores[$token] += is_numeric($token) ? 0 : 1;
            }
        }
    
        arsort($scores);
        return array_slice(array_keys($scores), 0, $maxKeywords);
    }    
    
    public function extractSubtopics(string $text): array
    {
        $sentences = explode('.', $text);
        $chunks = array_chunk($sentences, 2); // Every 2 sentences = 1 subtopic
        $subtopics = [];
    
        foreach ($chunks as $chunk) {
            $summary = implode('. ', $chunk);
            $subtopics[] = trim($summary);
        }
    
        return $subtopics;
    }    

    public function fetchAndStoreEmails($emailType)
    {
        log_message('info', "Starting to fetch and store emails of type: {$emailType}");
    
        
        $emailCredentials = [
            'hostname' => '{smtp.dreamhost.com:993/imap/ssl}INBOX',
            'username' => $emailType . '@mymiwallet.com',
            'password' => $this->APIs->emailPassword,
        ];
    
        $inbox = $this->retry(function () use ($emailCredentials) {
            return imap_open($emailCredentials['hostname'], $emailCredentials['username'], $emailCredentials['password']);
        });
    
        if (!$inbox) {
            $this->logger->error('Cannot connect to email server: ' . imap_last_error());
            return;
        }
    
        try {
            $since = date("d-M-Y", strtotime("-1 days"));
            $emails = imap_search($inbox, 'SINCE "' . $since . '"');
            $this->logger->debug('Emails fetched: ' . print_r($emails, true));
    
            $processedEmails = $this->marketingModel->getProcessedEmails(date('Y-m-d'));
    
            if ($emails) {
                $config = \HTMLPurifier_Config::createDefault();
                $purifier = new \HTMLPurifier($config);
    
                foreach ($emails as $email_number) {
                    $overview = imap_fetch_overview($inbox, $email_number, 0);
                    $subject = $this->convertToUtf8($overview[0]->subject ?? '');
                    $date = date("Y-m-d H:i:s", strtotime($overview[0]->date));
                    $sender = $overview[0]->from ?? '';
                    $emailIdentifier = md5($subject . $date . $sender);
    
                    if (in_array($emailIdentifier, $processedEmails)) {
                        log_message('info', "Email already processed: {$emailIdentifier}");
                        continue;
                    }
    
                    $emailBody = imap_fetchbody($inbox, $email_number, 1);
                    if (empty(trim($emailBody))) {
                        log_message('error', "Email body is empty for email #{$email_number}");
                        continue;
                    }
    
                    $decodedMessage = $this->decodeSpecialCharacters($emailBody);
                    $sanitizedBody = $purifier->purify($decodedMessage);
                    $compressedBody = $this->compressEmailBody($sanitizedBody);
                    $compressedBody = mb_substr($compressedBody, 0, 60000); // Truncate to 60K chars
    
                    $textOnlyContent = $this->stripHtmlTags($sanitizedBody);
                    $summaryArray = $this->summarizeContent($textOnlyContent);
    
                    if (is_array($summaryArray)) {
                        $summaryString = $summaryArray['summary'] ?? implode('. ', array_map('strval', $summaryArray));
                        $features = $summaryArray['features'] ?? [];
                        $tokens = $summaryArray['tokens'] ?? [];
                        $sentences = $summaryArray['sentences'] ?? [];
                    } else {
                        $summaryString = strval($summaryArray);
                        $features = $tokens = $sentences = [];
                    }
    
                    // ANALYTICS: Calculate and log feature, keyword, and diversity scores
                    $featureScore = $this->calculateFeatureScore($summaryString, $features);
                    $keywordScore = $this->calculateKeywordScore($summaryString, $tokens);
                    $semanticDiversityScore = $this->calculateSemanticDiversity($summaryString, $sentences, $tokens);
                    $this->logger->info("Analytics: FeatureScore={$featureScore}, KeywordScore={$keywordScore}, SemanticDiversity={$semanticDiversityScore}");
    
                    // üõ†Ô∏è Add fallback title and URL before insert
                    $fallbackTitle = !empty($subject) ? $subject : 'Untitled Email';
                    $fallbackUrl = 'https://www.mymiwallet.com/email/' . urlencode(substr($subject, 0, 50)) . '/' . md5($emailIdentifier);

                    $email_data = [
                        'status'          => 'In Review',
                        'type'            => $emailType === 'alerts' ? 'Trade Alerts' : 'Email/Newsletters',
                        'summary'         => $summaryString,
                        'content'         => $textOnlyContent,
                        'email_date'      => $date,
                        'email_subject'   => $subject,
                        'email_body'      => $compressedBody,
                        'email_sender'    => $sender,
                        'created_on'      => date("Y-m-d H:i:s"),
                        'modified_on'     => date("Y-m-d H:i:s"),
                        'email_identifier'=> $emailIdentifier,
                        'scraped_at'      => date("Y-m-d H:i:s"),
                        'title'           => $fallbackTitle,
                        'url'             => $fallbackUrl, // üëà inject URL here
                    ];

                    $this->marketingModel->storeEmail($email_data);
    
                    // Store analytics for categorization
                    $analyticsData = [
                        'email_identifier' => $emailIdentifier,
                        'feature_score' => $featureScore,
                        'keyword_score' => $keywordScore,
                        'semantic_diversity_score' => $semanticDiversityScore,
                        'created_on' => date("Y-m-d H:i:s")
                    ];
                    $this->marketingModel->storeContentAnalytics([
                        'source_type'               => 'email',
                        'source_identifier'         => $emailIdentifier,
                        'feature_score'             => $featureScore,
                        'keyword_score'             => $keywordScore,
                        'semantic_diversity_score'  => $semanticDiversityScore,
                        'created_on'                => date("Y-m-d H:i:s")
                    ]);                    
    
                    log_message('info', "Stored email and analytics: {$emailIdentifier}");
                }
            } else {
                $this->logger->info('No new emails found.');
            }
        } catch (\Exception $e) {
            $this->logger->error('Exception occurred: ' . $e->getMessage());
            $this->notifyAdminOnError('Email Fetch Exception', $e->getMessage());
        } finally {
            imap_close($inbox);
        }
    }
    
    public function formatBlogPost(string $headline, string $summary): string
    {
        return <<<HTML
    <h2>{$headline}</h2>
    <p>{$summary}</p>
    <p>Get the full breakdown inside your MyMI Wallet dashboard, where investing meets innovation.</p>
    HTML;
    }
    
    public function formatEmailBlast(string $headline, string $summary): string
    {
        return <<<EMAIL
    Subject: {$headline}
    
    {$summary}
    
    Explore more at https://www.mymiwallet.com
    EMAIL;
    }
    
    public function formatSocialPost(string $headline, string $summary, string $platform = 'generic'): string
    {
        $hashtags = '#MyMIWallet #InvestSmarter #FinancialFreedom';
        switch ($platform) {
            case 'facebook':
            case 'linkedin':
                return "{$headline}\n\n{$summary}\n\nStart your journey: https://www.mymiwallet.com\n\n{$hashtags}";
            case 'twitter':
            case 'x':
                $shortSummary = substr($summary, 0, 180);
                return "{$headline} ‚Äî {$shortSummary}...\nhttps://www.mymiwallet.com\n{$hashtags}";
            default:
                return "{$headline}\n\n{$summary}\nhttps://www.mymiwallet.com";
        }
    }
    
    public function formatDiscordPost(string $headline, string $summary): string
    {
        return "**{$headline}**\n\n{$summary}\n\nüëâ <https://www.mymiwallet.com>";
    }
    
    // private function normalizeUtf8($text)
    // {
    //     return is_string($text) ? mb_convert_encoding($text, 'UTF-8', 'UTF-8') : '';
    // }

    private function normalizeUtf8($text)
    {
        return mb_convert_encoding($text, 'UTF-8', mb_detect_encoding($text, 'UTF-8, ISO-8859-1', true));
    }

    private function notifyAdminOnError($subject, $message)
    {
        $this->emailService->setFrom('no-reply@mymiwallet.com', 'MyMI Wallet');
        $this->emailService->setTo('team@mymiwallet.com');
        $this->emailService->setSubject($subject);
        $this->emailService->setMessage($message);

        if (!$this->emailService->send()) {
            $this->logger->error('Failed to send error notification email: ' . print_r($this->emailService->printDebugger(), true));
        }
    }

    public function reprocessIncompleteEmails()
    {
        $model = new \App\Models\MarketingModel();
        $incompleteRecords = $model->getEmailsMissingTitleOrUrl(20); // Add this method to model
    
        foreach ($incompleteRecords as $record) {
            try {
                $emailId = $record['message_id'] ?? null;
                $content = $record['content'] ?? '';
                $title = $record['title'] ?? '';
                $url = $record['url'] ?? '';
    
                if (!$emailId) continue;
    
                $email = $this->fetchEmailByMessageId($emailId); // You can define a helper that uses IMAP
                if ($email) {
                    $content = $email['body'] ?? $content;
                    $title = $email['subject'] ?? $title;
                    $url = $email['link'] ?? $url;
                }
    
                // Use fallback if missing
                $title = $title ?: 'Untitled Email - ' . date('Y-m-d H:i');
                $url = $url ?: 'https://mymiwallet.com/news/fallback';
    
                $model->updateEmailFields($record['id'], $title, $url, $content);
            } catch (\Throwable $e) {
                log_message('error', '‚ùå Error backfilling email ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    }
    
    private function retry($function, $attempts = 3, $delay = 2000)
    {
        $attempt = 0;
        while ($attempt < $attempts) {
            try {
                return $function();
            } catch (Exception $e) {
                $attempt++;
                if ($attempt >= $attempts) {
                    throw $e;
                }
                sleep($delay / 1000);
            }
        }
    }
    
    private function sanitizeContent($content)
    {
        // Remove script tags and their content
        $content = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $content);

        // Remove noscript tags and their content
        $content = preg_replace('#<noscript(.*?)>(.*?)</noscript>#is', '', $content);

        // Strip remaining HTML tags
        $content = strip_tags($content) ?? '';

        // Ensure space between sentences
        $content = preg_replace('/\.\s*/', '. ', $content);

        return $content;
    }

    public function sanitizeRawEmailContent(string $content): string
    {
        // Decode quoted-printable content (removes soft line breaks like =\n)
        $content = quoted_printable_decode($content);
    
        // Remove common Beehiiv or mail-specific clutter
        $content = preg_replace('/=\r?\n/', '', $content);               // soft breaks
        $content = preg_replace('/[=]+/', '=', $content);                // excessive equals
        $content = preg_replace('/View image: \([^)]+\)/i', '', $content); // strip image links
        $content = preg_replace('/Caption:.*?(?=(View image:|\Z))/is', '', $content); // strip captions
    
        // Clean up rogue or junk characters
        $content = mb_convert_encoding($content, 'UTF-8', 'UTF-8');
    
        return $content;
    }    
    
    private function sanitizeText(string $text): string
    {
        return strip_tags(html_entity_decode($text));
    }

    public function saveTradingViewChart($chartUrl, $ticker)
    {
        // Ensure the directory exists
        $saveDir = FCPATH . 'assets/images/Alerts/Charts/';
        if (!is_dir($saveDir)) {
            mkdir($saveDir, 0777, true);
        }
    
        // Define the filename based on the ticker and timestamp
        $timestamp = time();
        $filename = "{$ticker}_chart_{$timestamp}.jpg";
        $savePath = $saveDir . $filename;
    
        // Use cURL to download the image
        $ch = curl_init($chartUrl);
        $fp = fopen($savePath, 'wb');
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_exec($ch);
        curl_close($ch);
        fclose($fp);
    
        // Check if the file was saved successfully
        if (file_exists($savePath)) {
            // Store only the filename in the database
            return $filename;
        } else {
            return null;
        }
    }
    
    public function scrapeTokenContent($tokenInfo)
    {
        $scrapedData = [];
        foreach ($tokenInfo as $token) {
            if (!empty($token['website'])) {
                log_message('debug', 'MyMIMarketing L101 - $token[website]: ' . $token['website']);
                $websiteData = $this->scrapeWebsite($token['website']);
                log_message('debug', 'MyMIMarketing L103 - $websiteData: ' . print_r($websiteData, true));
                $this->storeTemporaryData($websiteData);
                $scrapedData[] = $websiteData;
            }
            if (!empty($token['facebook'])) {
                log_message('debug', 'MyMIMarketing L109 - $token[facebook]: ' . $token['facebook']);
                $facebookData = $this->scrapeFacebook($token['facebook']);
                log_message('debug', 'MyMIMarketing L111 - $facebookData: ' . print_r($facebookData, true));
                $this->storeTemporaryData($facebookData);
                $scrapedData[] = $facebookData;
            }
            if (!empty($token['twitter'])) {
                log_message('debug', 'MyMIMarketing L117 - $token[twitter]: ' . $token['twitter']);
                $twitterData = $this->scrapeTwitter($token['twitter']);
                log_message('debug', 'MyMIMarketing L119 - $twitterData: ' . print_r($twitterData, true));
                $this->storeTemporaryData($twitterData);
                $scrapedData[] = $twitterData;
            }
            log_message('debug', 'MyMIMarketing L117 - $token[symbol] $token[name]: ' . $token['symbol'] . ' ' . $token['coin_name']);
            $googleData = $this->scrapeGoogleSearch($token['symbol'] . ' ' . $token['coin_name']);
            $this->storeTemporaryData($googleData);
            $scrapedData[] = $googleData;
        }
        return $scrapedData;
    }

    public function scrapeAndGenerateContent($accountid, $category, $platform = null)
    {
        $generatedData = [];

        // Fetch token information based on category
        if ($category === 'Solana') {
            $this->solanaModel = new SolanaModel();
            $tokenInfo = $this->solanaModel->getTokenInfoByID($accountid);
        } else {
            $tokenInfo = [];
        }

        // Proceed if token information is available
        if (!empty($tokenInfo)) {
            $scrapedData = [];

            try {
                // Scrape content from token's website and social media
                log_message('debug', 'Attempting to scrape token content.');
                $scrapedData = $this->scrapeTokenContent($tokenInfo);
                log_message('debug', 'Scraped Data: ' . print_r($scrapedData, true));
            } catch (\GuzzleHttp\Exception\ClientException $e) {
                if ($e->getResponse()->getStatusCode() == 403) {
                    log_message('critical', '403 Forbidden encountered while scraping website: ' . $e->getMessage());
                } else {
                    log_message('critical', 'ClientException: ' . $e->getMessage());
                }
            } catch (\Exception $e) {
                log_message('critical', 'An error occurred while scraping token content: ' . $e->getMessage());
            }

            try {
                // Generate content from the scraped data
                if (!empty($scrapedData)) {
                    log_message('debug', 'Attempting to generate content from scraped data.');
                    $generatedData = $this->generateContentFromScrapedData($scrapedData, $platform);
                    log_message('debug', 'Generated Data: ' . print_r($generatedData, true));
                } else {
                    log_message('debug', 'Scraped data is empty.');
                }
            } catch (\Exception $e) {
                log_message('critical', 'An error occurred while generating content: ' . $e->getMessage());
            }
        } else {
            log_message('debug', 'Token information is empty.');
        }

        return $generatedData;
    }
    
    private function scrapeWebsite($url)
    {
        try {
            $client = new Client();
            $response = $client->get($url);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $crawler = new \Symfony\Component\DomCrawler\Crawler($html);
                return [
                    'title' => $crawler->filter('title')->text(),
                    'content' => $this->sanitizeContent($crawler->filter('body')->html()),
                ];
            }
        } catch (RequestException $e) {
            $this->logger->error('Error scraping website: ' . $e->getMessage());
        }
        return [];
    }

    private function scrapeFacebook($url)
    {
        return $this->scrapeWithRetries('facebook', $url, function($content) {
            return [
                'title' => $content['page_title'] ?? 'No title',
                'content' => $this->sanitizeContent($content['posts'] ?? 'No posts'),
            ];
        });
    }

    private function scrapeTwitter($url)
    {
        return $this->scrapeWithRetries('twitter', $url, function($content) {
            return [
                'title' => $content['profile'] ?? 'No title',
                'content' => $this->sanitizeContent($content['tweets'] ?? 'No tweets'),
            ];
        });
    }

    private function scrapeWithRetries($type, $url, $transform, $retries = 3) {
        $backoff = 1;
        for ($i = 0; $i < $retries; $i++) {
            try {
                $response = $this->scrapemax->scrape(['target_url' => $url, 'type' => 'data', 'js_enabled' => 1, 'base64_encoded' => 0]);
                $content = json_decode($response->getBody()->getContents(), true);
                if (empty($content)) {
                    throw new \Exception("No content returned");
                }
                return $transform($content);
            } catch (ServerException $e) {
                if ($i < $retries - 1) {
                    sleep($backoff);
                    $backoff *= 2;
                    continue;
                }
                $this->logger->error("Error scraping $type: " . $e->getMessage());
            } catch (RequestException $e) {
                $this->logger->error("Error scraping $type: " . $e->getMessage());
                break;
            } catch (\Exception $e) {
                $this->logger->error("General error scraping $type: " . $e->getMessage());
                break;
            }
        }
        return ['title' => 'No title', 'content' => 'No content'];
    }    

    private function scrapeGoogleSearch($query)
    {
        try {
            $results = $this->pscrape->rollingCurl('rollingCurl');
            $results->request('https://www.google.com/search?q=' . urlencode($query));
            $content = '';
            $resultsData = $results->execute();
            if (!is_array($resultsData)) {
                throw new \Exception("Google search did not return an array");
            }
            foreach ($resultsData as $result) {
                $content .= $result['title'] . ' ' . $result['link'] . ' ';
            }
            return [
                'title' => 'Google Search Results for ' . $query,
                'content' => $this->sanitizeContent($content),
            ];
        } catch (\Exception $e) {
            $this->logger->error('Error scraping Google Search: ' . $e->getMessage());
        }
        return [];
    }

    public function sendZapierTradeAlert($tradeAlert) {
        $zapierWebhookUrl = "YOUR_ZAPIER_WEBHOOK_URL";
    
        $payload = json_encode([
            'ticker' => $tradeAlert['ticker'],
            'price' => $tradeAlert['price'],
            'sentiment' => $tradeAlert['market_sentiment'],
            'chart_link' => $tradeAlert['link'],
            'created_on' => $tradeAlert['created_on']
        ]);
    
        $ch = curl_init($zapierWebhookUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $response;
    }
    
    public function standaloneScrapeWebsite($url) {
        try {
            $client = new Client();
            $response = $client->get($url);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $crawler = new Crawler($html);

                $content = $crawler->filter('body')->each(function ($node) {
                    return $node->text();
                });

                $content = array_filter($content, function ($text) {
                    return !str_contains($text, 'footer') && !str_contains($text, 'head');
                });

                $data = [
                    'url' => $url,
                    'content' => implode(' ', $content),
                    'scraped_at' => date('Y-m-d H:i:s')
                ];

                $this->saveTemporaryScrapedData($data);
                return $data;
            } else {
                log_message('error', 'Failed to scrape website. HTTP status code: ' . $response->getStatusCode());
            }
        } catch (RequestException $e) {
            log_message('error', 'RequestException while scraping website: ' . $e->getMessage());
        } catch (\Throwable $th) {
            log_message('error', 'Throwable error while scraping website: ' . $th->getMessage());
        }
        return false;
    }

    public function saveTemporaryScrapedData($data) {
        $marketingModel = new \App\Models\MarketingModel();
        return $this->marketingModel->insertTemporaryData($data);
    }

    private function storeTemporaryData($data)
    {
        
        if (!empty($data)) {
            $this->marketingModel->insertTemporaryData($data);
        } else {
            $this->logger->warning('Attempted to store empty data.');
        }
    }
    

    private function selectSummarySentences($sentences, $scores, $topN = 5)
    {
        arsort($scores, SORT_NUMERIC);
        $topSentenceIndexes = array_keys(array_slice($scores, 0, $topN, true));
        $summary = array_intersect_key($sentences, array_flip($topSentenceIndexes));
        usort($summary, function ($a, $b) use ($sentences) {
            return array_search($a, $sentences) - array_search($b, $sentences);
        });
        return $summary;
    }

    private function splitIntoSentences($content)
    {
        $content = preg_replace('/\s+/', ' ', trim($content));
        $sentences = preg_split('/(?<=[.!?])\s+(?=[A-Z])/', $content, -1, PREG_SPLIT_NO_EMPTY);
        return array_filter($sentences, function ($sentence) {
            return strlen(trim($sentence)) > 0;
        });
    }    

    public function summarize($text, $method = 'textrank', $charLimit = 500)
    {
        $text = $this->cleanText($text);
        if ($method === 'tfidf') {
            return $this->summarizeText($text);
        } else {
            return $this->summarizeContent($text, $charLimit);
        }
    }    
    
    public function summarizeContent($content, $charLimit = 500)
    {
        // !! DON'T HAVE OPENAI INTEGRATED, NEED TO INTEGRATE THAT API OR COMPOSER LIBRARY FIRST. THE CODE PROVIDED DIDN'T WORK FOR THIS SO PROVIDE THE CORRECT PHP COMPOSER LIBRARY TO ADD HERE - For ChatGPT Shadi GPT
        // try {
        //     $response = $this->openAI->completions()->create([
        //         'model' => 'text-davinci-003',
        //         'prompt' => 'Summarize the following content:\n\n' . $text,
        //         'max_tokens' => 150,
        //     ]);
        //     return explode('. ', $response['choices'][0]['text']);
        // } catch (Exception $e) {
        //     $this->logger->error('Error in summarizing content: ' . $e->getMessage());
        //     return [];
        // }

        if (empty(trim($content))) {
            $this->logger->error('$content is Empty for summarizeContent() function');
            return [];
        }

        $sentences = $this->splitIntoSentences($content);
        if (empty($sentences)) {
            log_message('warning', '‚ö†Ô∏è MyMIMarketing L1306 - summarizeContent(): No valid sentences found in content.');
            return null;
        }
        
        if (empty($sentences)) {
            $this->logger->error('No sentences found for summarization');
            return [];
        }

        $tokens = $this->tokenizeWithNlpTools($content);
        $features = $this->extractFeaturesWithPhpMl($content);
        $wordFrequencies = $this->calculateWordFrequencies($content, $this->getStopWords());
        $similarityMatrix = $this->buildSimilarityMatrix($sentences, $wordFrequencies);
        $scores = $this->pageRank($similarityMatrix);
        $summary = $this->buildSummaryToCharLimit($sentences, $scores, $charLimit);
        $finalSummary = $this->convertUrlsToLinks($summary);

        return !empty($finalSummary) ? [
            'sentences' => $sentences,
            'tokens' => $tokens,
            'features' => $features,
            'wordFrequencies' => $wordFrequencies,
            'similarityMatrix' => $similarityMatrix,
            'scores' => $scores,
            'summary' => $finalSummary,
        ] : $summary;
    }

    public function summarizeContentFromHtml(string $html): array
    {
        $html = quoted_printable_decode($html);
        $html = html_entity_decode($html, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $html = preg_replace('/=\r?\n/', '', $html); // Remove soft breaks
    
        $plainText = strip_tags(html_entity_decode($html));
        $cleaned = $this->sanitizeRawEmailContent($plainText); // ‚¨ÖÔ∏è integrated here
    
        if (empty($cleaned) || !is_string($cleaned)) {
            log_message('error', '‚ö†Ô∏è [MyMIMarketing] $plainText was empty or invalid in summarizeContent()');
            return ['summary' => '', 'keywords' => []];
        }
    
        $cleaned = preg_replace('/\s{2,}/', ' ', $cleaned);
        $summaryData = $this->summarizeContent($cleaned);
    
        if (!is_array($summaryData) || empty($summaryData['summary'])) {
            return ['summary' => '', 'keywords' => []];
        }
    
        $keywords = $this->marketingModel->extractKeywords($cleaned);
    
        return [
            'summary' => $summaryData['summary'],
            'keywords' => $keywords ?? [],
            'featureScore' => $summaryData['featureScore'] ?? null,
            'keywordScore' => $summaryData['keywordScore'] ?? null,
            'pageRankScore' => $summaryData['pageRankScore'] ?? null,
            'semanticDiversityScore' => $summaryData['semanticDiversityScore'] ?? null,
        ];
    }
    
    public function summarizeContentTextRank($content)
    {
        $sentences = $this->splitIntoSentences($content);
        $similarityMatrix = $this->buildSimilarityMatrix($sentences);
        $scores = $this->pageRank($similarityMatrix);
        return $this->extractTopSentences($sentences, $scores);
    }

    
    public function summarizeText($text, $numSentences = 3)
    {
        $this->logger->info("summarizeText: Starting summarization. Length: " . strlen($text));
    
        // Validate input type and content
        if (empty($text) || !is_string($text)) {
            log_message('warning', 'MyMIMarketing L1050 - summarizeText: Invalid or empty text input.');
            return '';
        }
    
        // Normalize encoding before anything
        $text = $this->normalizeUtf8($text);
    
        // Split into sentences
        $sentences = $this->splitIntoSentences($text);
    
        if (count($sentences) < 2) {
            log_message('debug', 'MyMIMarketing L1061 - summarizeText: Not enough valid sentences for summarization.');
            return $text;
        }
    
        $documents = array_filter(array_map(function($sentence){
            $tokens = $this->tokenizeWithNlpTools($this->normalizeUtf8($sentence));
            return is_array($tokens) && count($tokens) > 0 ? $tokens : null;
        }, $sentences));
        if (empty($documents)) {
            log_message('warning', 'MyMIMarketing L1070 - summarizeText(): All documents are empty after tokenization.');
            return '';
        }        
    
        try {
            $tfIdf = new TfIdfTransformer();
            $tfIdf->transform($documents);
    
            $scores = [];
    
            foreach ($documents as $i => $sentenceTokens) {
                $score = 0.0;
                foreach ($sentenceTokens as $token) {
                    if (is_numeric($token)) {
                        $score += floatval($token);
                    } elseif (is_string($token)) {
                        $score += strlen($token) > 3 ? 1.2 : 0.8;
                        // basic count fallback
                    }
                }
                $scores[$i] = $score;
            }
    
            arsort($scores);
            $topSentences = array_slice(array_keys($scores), 0, $numSentences);
            sort($topSentences); // Preserve original order
    
            $summary = implode(' ', array_intersect_key($sentences, array_flip($topSentences)));
            $summary = $this->normalizeUtf8($summary); // Optional final cleanup
    
            log_message('info', 'MyMIMarketing L1098 - summarizeText: Summary created with ' . count($topSentences) . ' sentences.');
            return $summary;
        } catch (\Throwable $e) {
            log_message('error', 'MyMIMarketing L1101 - summarizeText: Error during summarization: ' . $e->getMessage());
            return '';
        }
    }

    private function tokenizeSmart($text, $method = 'nlp') {
        return $method === 'nlp' 
            ? $this->tokenizeWithNlpTools($text) 
            : $this->tokenizeText($text);
    }
    
    private function tokenizeText($text)
    {
        $text = strtolower(strip_tags($text));
        return preg_split('/\W+/', $text, -1, PREG_SPLIT_NO_EMPTY);
    }
       
    public function tokenizeWithNlpTools($content)
    {
        $tokenizer = new NlpWhitespaceTokenizer();
        $tokens = $tokenizer->tokenize($content);
        $this->logger->debug('Tokens: ' . print_r($tokens, true));
        return $tokens;
    }

    public function insertFinalScraper($record, $summary)
    {
        $model = new MarketingModel();
    
        if (!isset($record['id']) || !$summary) {
            log_message('error', '‚ùå Missing record ID or summary when calling insertFinalScraper()');
            return false;
        }
    
        // ‚úÖ Prevent duplicate inserts
        $existing = $model->where('source_id', $record['id'])->first();
        if ($existing) {
            log_message('info', "‚ö†Ô∏è Final scrape already exists for source_id: {$record['id']}");
            return false;
        }
    
        // ‚úÖ Ensure encoding is safe
        $cleanSummary = mb_convert_encoding($summary['summary'], 'UTF-8', 'UTF-8');
        $cleanTitle = isset($record['title']) ? $record['title'] : word_limiter($cleanSummary, 12);
    
        // ‚úÖ Strip emojis and special characters from title
        $cleanTitle = preg_replace('/[^\p{L}\p{N}\s]/u', '', $cleanTitle);
    
        $data = [
            'source_id' => $record['id'],
            'title' => trim($cleanTitle),
            'summary' => trim($cleanSummary),
            'keywords' => isset($summary['keywords']) ? implode(',', $summary['keywords']) : '',
            'date_created' => date('Y-m-d H:i:s'),
        ];
    
        $result = $model->insert($data);
        if ($result) {
            log_message('info', "‚úÖ Final scraped content inserted for source_id: {$record['id']}");
        } else {
            log_message('error', "‚ùå Failed to insert final scrape for source_id: {$record['id']}");
        }
    
        return $result;
    }
    
    private function cleanText($text) {
        $text = $this->decodeSpecialCharacters($text);
        $text = $this->sanitizeRawEmailContent($text);
        return $this->normalizeUtf8(strip_tags($text));
    }    

    private function combineScores($featureScore, $keywordScore, $pageRankScore, $semanticDiversityScore)
    {
        $featureScore = is_numeric($featureScore) ? (float)$featureScore : 0.0;
        $keywordScore = is_numeric($keywordScore) ? (float)$keywordScore : 0.0;
        $pageRankScore = is_numeric($pageRankScore) ? (float)$pageRankScore : 0.0;
        $semanticDiversityScore = is_numeric($semanticDiversityScore) ? (float)$semanticDiversityScore : 0.0;
    
        $combinedScore = 0.4 * $featureScore + 0.2 * $keywordScore + 0.3 * $pageRankScore + 0.1 * $semanticDiversityScore;
        $this->logger->debug('‚úÖ Combined Score for sentence: ' . $combinedScore);
        return $combinedScore;
    }    

    private function buildSimilarityMatrix($sentences, $wordFrequencies)
    {
        $matrix = [];
        $sentenceLength = count($sentences);
        for ($i = 0; $i < $sentenceLength; $i++) {
            for ($j = 0; $j < $sentenceLength; $j++) {
                if ($i != $j) {
                    $matrix[$i][$j] = $this->calculateSimilarity($sentences[$i], $sentences[$j], $wordFrequencies);
                }
            }
        }
        return $matrix;
    }

    private function calculateSimilarity($sentence1, $sentence2, $wordFrequencies)
    {
        $sentence1 = is_string($sentence1) ? strtolower($sentence1) : '';
        $sentence2 = is_string($sentence2) ? strtolower($sentence2) : '';
    
        $words1 = array_unique(str_word_count($sentence1, 1));
        $words2 = array_unique(str_word_count($sentence2, 1));
        $commonWords = array_intersect($words1, $words2);
    
        $score = 0;
        foreach ($commonWords as $word) {
            $score += (float) ($wordFrequencies[$word] ?? 0);
        }
    
        $logWordCount1 = count($words1) > 0 ? log(count($words1)) : 0;
        $logWordCount2 = count($words2) > 0 ? log(count($words2)) : 0;
    
        if ($logWordCount1 + $logWordCount2 == 0) {
            return 0;
        }
    
        return $score / ($logWordCount1 + $logWordCount2);
    }    
    
    private function calculateWordFrequencies($content, $stopWords)
    {
        $frequencies = [];
        $words = preg_split('/\s+/', strtolower($content));
        foreach ($words as $word) {
            if (!in_array($word, $stopWords) && strlen($word) > 1) {
                $frequencies[$word] = ($frequencies[$word] ?? 0) + 1;
            }
        }
        arsort($frequencies);
        return $frequencies;
    }

    private function decodeSpecialCharacters($text)
    {
        return html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    }

    public function getScrapesByKeyword($keyword) {
        return $this->marketingModel->getScrapesByKeyword($keyword); // assumes this method exists in model
    }

    private function getStopWords()
    {
        return [
            "a", "the", "and", "of", "in", "to", "is", "you", "that", "it", "he", "was", "for", "on", "are", "as", "with", "his", "they", "I", "at", "be", "this", "have", "from", "or", "one", "had", "by", "word", "but", "not", "what", "all", "were", "we", "when", "your", "can", "said", "there", "use", "an", "each", "which", "she", "do", "how", "their", "if", "will", "up", "other", "about", "out", "many", "then", "them", "these", "so", "some", "her", "would", "make", "like", "him", "into", "time", "has", "look", "two", "more", "write", "go", "see", "number", "no", "way", "could", "people", "my", "than", "first", "water", "been", "call", "who", "oil", "its", "now", "find", "long", "down", "day", "did", "get", "come", "made", "may", "part"
        ];
    }

    private function isSemanticallyDifferent($sentence1, $sentence2, $tokens)
    {
        $tokens1 = array_intersect($tokens, str_word_count(strtolower($sentence1), 1));
        $tokens2 = array_intersect($tokens, str_word_count(strtolower($sentence2), 1));
        $overlap = count(array_intersect($tokens1, $tokens2));
        $threshold = 2;
        return $overlap < $threshold;
    }

    private function pageRank($matrix, $dampingFactor = 0.85, $maxIterations = 100, $tolerance = 1e-6)
    {
        $numSentences = count($matrix);
        if ($numSentences == 0) {
            return [];
        }

        $pagerank = array_fill(0, $numSentences, 1 / $numSentences);
        $tempRank = array_fill(0, $numSentences, 0);

        for ($iter = 0; $iter < $maxIterations; $iter++) {
            for ($i = 0; $i < $numSentences; $i++) {
                $tempRank[$i] = (1 - $dampingFactor) / $numSentences;
                for ($j = 0; $j < $numSentences; $j++) {
                    if ($i != $j && isset($matrix[$j][$i])) {
                        $matrixRowSum = array_sum($matrix[$j]);
                        if ($matrixRowSum != 0) {
                            $tempRank[$i] += $dampingFactor * ($matrix[$j][$i] * $pagerank[$j] / $matrixRowSum);
                        }
                    }
                }
            }

            $diff = 0;
            for ($i = 0; $i < $numSentences; $i++) {
                $diff += abs($tempRank[$i] - $pagerank[$i]);
            }

            if ($diff < $tolerance) {
                break;
            }
            $pagerank = $tempRank;
        }
        return $pagerank;
    }

    private function extractTopSentences($sentences, $scores, $topN = 5)
    {
        asort($scores, SORT_NUMERIC);
        $topSentenceIndexes = array_keys(array_slice($scores, -$topN, $topN, true));
        $summary = [];
        foreach ($topSentenceIndexes as $index) {
            $summary[] = trim($sentences[$index]);
        }
        return $summary;
    }

    public function enqueueEmailJob($emailData)
    {
        
        $data = ['type' => 'email_processing', 'data' => json_encode($emailData)];
        $this->marketingModel->insertJobQueue($data);
    }
    
    private function stripHtmlTags($htmlContent)
    {
        return strip_tags($htmlContent);
    }

    public function social_media()
    {
        return [
            'discord' => $this->socialMedia->discord,
            'facebook_page' => $this->socialMedia->facebook_page,
            'facebook_group' => $this->socialMedia->facebook_group,
            'linkedin' => $this->socialMedia->linkedin,
            'twitter' => $this->socialMedia->twitter,
            'youtube' => $this->socialMedia->youtube,
        ];
    }

    public function department()
    {
        
        $activeCampaigns = $this->marketingModel->getActiveCampaigns();
        $totalActiveCampaigns = $activeCampaigns['num_rows'];
        $activePriorityCampaigns = $this->marketingModel->getActivePriorityCampaigns();
        $totalActivePriorityCampaigns = $activePriorityCampaigns['num_rows'];
        return [
            'getActiveCampaigns' => $activeCampaigns['result'],
            'totalActiveCampaigns' => $totalActiveCampaigns,
            'getActivePriorityCampaigns' => $activePriorityCampaigns['result'],
            'totalActivePriorityCampaigns' => $totalActivePriorityCampaigns,
    ];
    }

    public function seoCheck()
    {
        
        $uri_string = $this->request->getUri()->getPath();
        $query = $this->marketingModel->where('url', $uri_string)->first();

        if (!$query) {
            $data = [
                'url' => $uri_string,
                'title' => str_replace(['_', '/'], [' ', ' - '], $uri_string),
                'description' => "Experience the future of personal finance with MyMI Wallet. We provide advanced budgeting and investment portfolio management solutions, empowering individuals to better manage their finances. Streamline your financial journey with our intuitive online fintech application and service.",
                'image' => base_url('/assets/images/Company/MyMI-Wallet-White.png'),
            ];

            $this->marketingModel->insert($data);
            $insert_id = $this->marketingModel->getInsertID();

            $task_info = [
                'task' => 'Page SEO Edit',
                'title' => str_replace(['_', '/'], [' ', ' - '], $uri_string),
                'seo_id' => $insert_id,
                'url' => $uri_string,
            ];

            $this->assignMarketingTask($task_info);
        }
    }

    public function assignMarketingTask($task_info)
    {
        
        $data = [
            'status' => 'Pending',
            'group' => 'Marketing',
            'task' => $task_info['task'],
            'title' => $task_info['title'],
            'description' => 'Complete SEO for ' . $task_info['url'],
            'url' => site_url('/Management/Marketing/Page-SEO/' . $task_info['seo_id']),
        ];

        $this->marketingModel->insertManagementTask($data);
    }

    public function getPageHeaders()
    {
        
        $getPageSEO = $this->marketingModel->getMarketingPageSeo();
        $pageSEOData = [];
        foreach ($getPageSEO as $pageSEO) {
            $pageSEOData[] = [
                'page_id' => $pageSEO['id'],
                'page_name' => $pageSEO['page_name'],
                'page_title' => $pageSEO['page_title'],
                'page_url' => $pageSEO['page_url'],
                'page_sitemap_url' => $pageSEO['page_sitemap_url'],
                'page_internal_url' => $pageSEO['page_internal_url'],
                'page_controller' => $pageSEO['page_controller'],
                'page_controller_url' => $pageSEO['page_controller_url'],
                'page_controller_directory' => $pageSEO['page_controller_directory'],
                'page_file_directory' => $pageSEO['page_file_directory'],
                'page_image' => $pageSEO['page_image'],
                'page_description' => $pageSEO['page_description'],
                'page_address' => $pageSEO['page_address'],
                'page_city' => $pageSEO['page_city'],
                'page_state' => $pageSEO['page_state'],
                'page_country' => $pageSEO['page_country'],
                'page_zipcode' => $pageSEO['page_zipcode'],
                'page_facebook' => $pageSEO['page_facebook'],
                'linked' => $pageSEO['linked'],
                'functionality' => $pageSEO['functionality'],
                'design' => $pageSEO['design'],
                'seo' => $pageSEO['seo'],
                'ext_links' => $pageSEO['ext_links'],
                'grammar' => $pageSEO['grammar'],
                'd_optimize' => $pageSEO['d_optimize'],
                'load_perf' => $pageSEO['load_perf'],
                'additional_notes' => $pageSEO['additional_notes'],
            ];
        }
        return $pageSEOData;
    }

    public function getPageHeadersByName($pageName)
    {
        
        $getPageSEO = $this->marketingModel->getMarketingPageSeoByName($pageName);
        $pageSEOData = [];
        foreach ($getPageSEO as $pageSEO) {
            $pageSEOData[] = [
                'page_id' => $pageSEO['id'],
                'page_name' => $pageSEO['page_name'],
                'page_title' => $pageSEO['page_title'],
                'page_url' => $pageSEO['page_url'],
                'page_sitemap_url' => $pageSEO['page_sitemap_url'],
                'page_internal_url' => $pageSEO['page_internal_url'],
                'page_controller' => $pageSEO['page_controller'],
                'page_controller_url' => $pageSEO['page_controller_url'],
                'page_controller_directory' => $pageSEO['page_controller_directory'],
                'page_file_directory' => $pageSEO['page_file_directory'],
                'page_image' => $pageSEO['page_image'],
                'page_description' => $pageSEO['page_description'],
                'page_address' => $pageSEO['page_address'],
                'page_city' => $pageSEO['page_city'],
                'page_state' => $pageSEO['page_state'],
                'page_country' => $pageSEO['page_country'],
                'page_zipcode' => $pageSEO['page_zipcode'],
                'page_facebook' => $pageSEO['page_facebook'],
                'linked' => $pageSEO['linked'],
                'functionality' => $pageSEO['functionality'],
                'design' => $pageSEO['design'],
                'seo' => $pageSEO['seo'],
                'ext_links' => $pageSEO['ext_links'],
                'grammar' => $pageSEO['grammar'],
                'd_optimize' => $pageSEO['d_optimize'],
                'load_perf' => $pageSEO['load_perf'],
                'additional_notes' => $pageSEO['additional_notes'],
            ];
        }
        return $pageSEOData;
    }
    
    public function postToDiscord($message)
    {
        $discordWebhookUrl = "YOUR_DISCORD_WEBHOOK_URL";
    
        // ‚úÖ Ensure the message is within the 2000 character limit
        if (strlen($message) > 2000) {
            $message = substr($message, 0, 1997) . "..."; // Truncate and add "..."
        }
    
        $payload = json_encode(["content" => $message]);
    
        $ch = curl_init($discordWebhookUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $response;
    }
    
    public function postToFacebookPage($pageId, $message)
    {
        try {
            $response = $this->facebook->post("/{$pageId}/feed", [
                'message' => $message,
            ], $this->facebook->getAccessToken());

            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            log_message('error', 'Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            log_message('error', 'Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    public function postToFacebookGroup($groupId, $message)
    {
        try {
            $response = $this->facebook->post("/{$groupId}/feed", [
                'message' => $message,
            ], $this->facebook->getAccessToken());

            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            log_message('error', 'Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            log_message('error', 'Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    public function sendNotification($type, $viewPath, $data, $targetGroup = null, $socialMedia = [])
    {
        
        $userModel = new UserModel();
        if ($targetGroup) {
            $users = $userModel->where('group', $targetGroup)->findAll();
        } else {
            $users = $userModel->findAll();
        }

        $viewContent = view($viewPath, $data);

        $notoCount = 0;
        $emailNotoCount = 0;

        if (in_array('in-app', $type)) {
            foreach ($users as $user) {
                $this->sendInAppNotification($user, $viewContent);
                $notoCount++;
            }
        }

        if (in_array('email', $type)) {
            foreach ($users as $user) {
                $this->sendEmailNotification($user, $viewContent);
                $emailNotoCount++;
            }
        }

        foreach ($socialMedia as $platform) {
            switch ($platform) {
                case 'facebook':
                    $this->postToFacebook($data['message']);
                    break;
                case 'twitter':
                    $this->postToTwitter($data['message']);
                    break;
                case 'linkedin':
                    $this->postToLinkedIn($data['message']);
                    break;
                case 'discord':
                    $this->postToDiscord($data['message']);
                    break;
            }
        }

        $notificationData = [
            'active' => 1,
            'message' => $viewContent,
            'created_at' => date('Y-m-d H:i:s'),
            'created_by' => session('user_id'),
            'noto_count' => $notoCount,
            'email_noto_count' => $emailNotoCount,
        ];
        $this->marketingModel->storeNotification($notificationData);
    }

    private function sendInAppNotification($user, $content)
    {
        $db = \Config\Database::connect();
        $db->table('user_notifications')->insert([
            'user_id' => $user->id,
            'content' => $content,
            'created_at' => date('Y-m-d H:i:s')
        ]);
    }

    private function sendEmailNotification($user, $content)
    {
        $email = \Config\Services::email();
        $email->setTo($user->email);
        $email->setSubject('Notification');
        $email->setMessage($content);
        $email->send();
    }

    public function postToSocialMedia($content)
    {
        try {
            $this->postToFacebook($content);
            $this->postToTwitter($content);
            $this->postToLinkedIn($content);
            // Add more integrations if needed
        } catch (\Throwable $e) {
            $this->logger->error('‚ùå postToSocialMedia() failed: ' . $e->getMessage());
        }
    }
    

    private function postToFacebook($message)
    {
        try {
            $response = $this->facebook->post('/me/feed', ['message' => $message], $this->socialMedia->facebook_access_token);
            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            $this->logger->error('Facebook Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            $this->logger->error('Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Fetch tweets based on a specific hashtag or query.
     */
    public function fetchTweets($query, $count = 100) {
        
        try {
            $tweets = $this->twitter->get('search/tweets', [
                'q' => $query,
                'count' => $count
            ]);

            if ($this->twitter->getLastHttpCode() === 200) {
                $processedTweets = [];
                foreach ($tweets->statuses as $tweet) {
                    $processedTweets[] = [
                        'tweet_id' => $tweet->id_str,
                        'content' => $tweet->text,
                        'author' => $tweet->user->screen_name,
                        'created_at' => $tweet->created_at,
                        'url' => "https://twitter.com/{$tweet->user->screen_name}/status/{$tweet->id_str}"
                    ];
                }

                // Store in database
                foreach ($processedTweets as $tweetData) {
                    $this->marketingModel->storeScrapedContent([
                        'title' => $tweetData['content'],
                        'url' => $tweetData['url'],
                        'content' => $tweetData['content'],
                        'keywords' => json_encode([$tweetData['author']]),
                        'scraped_at' => date('Y-m-d H:i:s')
                    ]);
                }

                return $processedTweets;
            } else {
                throw new \Exception('Failed to fetch tweets: ' . $this->twitter->getLastBody());
            }
        } catch (\Throwable $th) {
            log_message('error', 'Error fetching tweets: ' . $th->getMessage());
            return [];
        }
    }

    /**
     * Generate content from tweets.
     */
    public function generateContentFromTweets($tweets) {
        $summary = $this->summarizeText(implode(' ', array_column($tweets, 'content');
        $keywords = $this->extractKeywords($summary);

        return [
            'summary' => $summary,
            'keywords' => $keywords,
            'platform_content' => $this->generatePlatformContent($summary, $keywords)
        ];
    }

    /**
     * Post content to Twitter.
     */
    public function postToTwitter($content) {
        try {
            $response = $this->twitter->post('statuses/update', ['status' => $content]);
            if ($this->twitter->getLastHttpCode() === 200) {
                log_message('info', 'Successfully posted to Twitter: ' . $content);
                return $response;
            } else {
                throw new \Exception('Failed to post to Twitter: ' . json_encode($response));
            }
        } catch (\Throwable $th) {
            log_message('error', 'Error posting to Twitter: ' . $th->getMessage());
            return false;
        }
    }

    private function postToLinkedIn($message)
    {
        try {
            $response = $this->linkedin->post('/people/~/shares', [
                'comment' => $message,
                'visibility' => [
                    'code' => 'anyone'
                ]
            ], $this->socialMedia->linkedin_access_token);
            return $response;
        } catch (Exception $e) {
            $this->logger->error('LinkedIn API returned an error: ' . $e->getMessage());
            return false;
        }
    }

    private function postToBlog($content)
    {
        // Assuming you're using WordPress for blogging
        $client = new Client([
            'base_uri' => $this->siteSettings->wordpress_site_url,
        ]);

        try {
            $response = $client->post('/wp-json/wp/v2/posts', [
                'auth' => [$this->siteSettings->wordpress_username, $this->siteSettings->wordpress_password],
                'json' => [
                    'title' => substr($content, 0, 50),
                    'content' => $content,
                    'status' => 'publish',
                ],
            ]);

            if ($response->getStatusCode() == 201) {
                $this->logger->info('Posted to blog: ' . $content);
                return json_decode($response->getBody(), true);
            } else {
                $this->logger->error('Failed to post to blog: ' . $response->getBody());
                return false;
            }
        } catch (RequestException $e) {
            $this->logger->error('Blog post request error: ' . $e->getMessage());
            return false;
        }
    }

    public function distributeContentToSocialMedia($content)
    {
        $twitterPost = "ÔøΩ **Stock Market Highlights** ÔøΩ\n";
        $facebookPost = "ÔøΩ **Market Movers Update** ÔøΩ\n";
        $linkedinPost = "ÔøΩ **Today's Market Summary** ÔøΩ\n";
        $discordPost = "ÔøΩ **TRADE ALERTS UPDATE!** ÔøΩ\n";

        foreach ($content['expandedContent'] as $post) {
            $twitterPost .= $post . "\n";
            $facebookPost .= $post . "\n";
            $linkedinPost .= $post . "\n";
            $discordPost .= $post . "\n";
        }

        // Post to Twitter (example using API)
        $this->postToTwitter($twitterPost);
        $this->postToFacebook($facebookPost);
        $this->postToLinkedIn($linkedinPost);
        $this->postToDiscord($discordPost);

        return [
            'twitter' => $twitterPost,
            'facebook' => $facebookPost,
            'linkedin' => $linkedinPost,
            'discord' => $discordPost
        ];
    }
    
    public function generateAndPostContent()
    {
        
        $emailSummaries = $this->marketingModel->getEmailSummariesForReview();
        foreach ($emailSummaries as $summary) {
            log_message('info', 'Generating content for email summary: ' . $summary['email_subject']);

            $content = $this->generateMarketingContent($summary['summary']);
            log_message('debug', 'Generated content: ' . print_r($content, true));

            $this->postToSocialMedia($content);
            $this->postToBlog($content);

            $this->marketingModel->updateEmailStatus($summary['email_identifier'], 'Posted');
            log_message('info', 'Updated email status to Posted for: ' . $summary['email_subject']);
        }
    }

    // private function generateMarketingContent($summary)
    // {
    //     $prompt = "Create a marketing post based on the following summary:\n\n" . $summary;
    //     $response = $this->openAI->complete([
    //         'prompt' => $prompt,
    //         'max_tokens' => 150,
    //     ]);

    //     return $response->choices[0]->text;
    // }


    /**
     * Generate content for each platform and save for publishing
     */
    public function generateMarketingContent(): void
    {
        $topStories = $this->marketingModel->getTopStories(10); // Existing call to get pending items
    
        $count = 0;
    
        foreach ($topStories as $story) {
            // ‚úÖ Skip if title is empty
            if (empty(trim($story['title'] ?? ''))) {
                log_message('debug', '‚è≠ Skipped record ID '.$story['id'].' - no title provided.');
                continue;
            }
    
            // ‚úÖ Break once top 5 valid entries found
            if ($count >= 5) {
                break;
            }
    
            $headline = $story['title'];
            $url = $story['source_url'] ?? '#';
            $summary = $this->generateSummary($story);
            $hashtags = $this->extractHashtags($story['title'].' '.$story['email_body']);
    
            $platformPosts = [
                'discord'  => "**{$headline}**\n{$summary}\nüîó {$url}\n{$hashtags}",
                'twitter'  => "{$headline} {$url} {$hashtags}",
                'linkedin' => "{$headline}\n{$summary}\nRead more: {$url} {$hashtags}",
                'facebook' => "{$headline}\n{$summary}\n{$url} {$hashtags}",
                'email'    => [
                    'subject' => $headline,
                    'body'    => "{$summary}\n\nRead More: {$url}\n{$hashtags}",
                ],
            ];
    
            $this->marketingModel->storeGeneratedContent($story['id'], $platformPosts);
            $count++;
        }
    }    

    private function logScrapeError($url, $error)
    {
        log_message('error', "Scraping failed for URL: $url, Error: $error");
    }

    public function generateContentFromData($title, $content, $tags)
    {
        // Process the content, summarize, or apply any NLP techniques.
        $summary = $this->summarizeContent($content); // Example NLP method

        // Generate the final content
        return $title . " - " . $summary . " Tags: " . implode(', ', $tags);
    }

    public function generateContentFromScrapedData($scrapedData, $platform)
    {
        
        $primaryContent = $this->generatePrimaryContent($scrapedData);
        $socialMediaContent = $this->generateSocialMediaContent($scrapedData);
        $generatedContent = [
            'status' => 'Generated',
            'type' => 'Promotional',
            'content' => $primaryContent,
            'social_media_content' => $socialMediaContent,
            'platform' => $platform,
            'created_on' => date("Y-m-d H:i:s"),
        ];
        $this->marketingModel->storeGeneratedContent($generatedContent);
        return $generatedContent;
    }

    public function generateContentFromLargeText($content, $tags) {
        if (empty($content)) {
            log_message('error', 'Content is empty in generateContentFromLargeText.');
            return ['summary' => '', 'keywords' => [], 'platforms_content' => []];
        }
    
        // Tokenize the content using WhitespaceTokenizer
        $tokenizer = new WhitespaceTokenizer();
        $samples = [$tokenizer->tokenize($content)];
    
        // Log the tokenized content to verify its structure
        log_message('debug', 'Tokenized samples: ' . print_r($samples, true));
    
        // Ensure samples are valid (not empty and properly formatted)
        if (empty($samples) || !isset($samples[0]) || empty($samples[0])) {
            log_message('error', 'No valid tokens found for TfIdfTransformer.');
            return ['summary' => '', 'keywords' => [], 'platforms_content' => []];
        }
        if (empty($samples) || !isset($samples[0])) {
            log_message('error', 'üö´ Empty or malformed document array before TF-IDF.');
            return [];
        }
        // Initialize TfIdfTransformer
        $tfidf = new TfIdfTransformer();
        $tfidf->fit($samples);
    
        try {
            // Perform the TfIdf transformation
            log_message('debug', 'Starting TfIdf transformation...');
            $tfidf->transform($samples);
            log_message('debug', 'TfIdf transformation successful: ' . print_r($samples, true));
    
        } catch (\Exception $e) {
            // Log the error and return default values if the transformation fails
            log_message('error', 'TfIdfTransformer failed: ' . $e->getMessage());
            return ['summary' => '', 'keywords' => [], 'platforms_content' => []];
        }
    
        // Generate summary and keywords
        $summary = $this->summarizeText($content);
        $keywords = $this->extractKeywords($content);
        $platforms_content = $this->generatePlatformContent($summary, $keywords);
    
        return [
            'summary' => $summary,
            'keywords' => $keywords,
            'platforms_content' => $platforms_content,
        ];
    }
    
    public function generateCanvaVideo()
    {
        $scriptResponse = $this->generateVoiceoverScript();
        if (!$scriptResponse['status'] === 'success') {
            return $this->respond(['status' => 'error', 'message' => 'Voiceover script not found'], 404);
        }
    
        $scriptText = $scriptResponse['script'];
    
        $canvaApiUrl = "https://api.canva.com/v1/projects";
        $headers = [
            'Authorization: Bearer YOUR_CANVA_API_KEY',
            'Content-Type: application/json'
        ];
    
        $payload = [
            'title' => 'MyMI Trade Alerts Video',
            'template' => 'YOUR_CANVA_TEMPLATE_ID',
            'elements' => [
                'text' => $scriptText,
                'voiceover' => base_url('uploads/voiceover.mp3')
            ]
        ];
    
        $ch = curl_init($canvaApiUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $this->respond(['status' => 'success', 'message' => 'Video generated', 'video_url' => json_decode($response)->video_url]);
    }

    public function generateEnhancedContent($voiceScript)
    {
        // Step 1: Summarize the voice script into a structured format
        $summary = $this->summarizeContent($voiceScript);

        // Step 2: Perform spelling & grammar check using an external API (Grammarly alternative)
        $checkedContent = $this->spellCheckAndRefine($summary);

        // Step 3: Generate additional content using MyMIMarketing::contentGenerator
        $expandedContent = $this->contentGenerator($checkedContent);

        return [
            'summary' => $summary,
            'checkedContent' => $checkedContent,
            'expandedContent' => $expandedContent
        ];
    }
    
    private function generatePrimaryContent($scrapedData)
    {
        // Generate the primary content based on the scraped data
        $content = "";
        foreach ($scrapedData as $data) {
            $content .= "Source: {$data['source']}\n";
            $content .= "Title: {$data['title']}\n";
            $content .= "Content: " . substr($data['content'], 0, 200) . "...\n";
            $content .= "Link: " . ($data['url'] ?? 'N/A') . "\n\n";
        }
        return $content;
    }
    
    public function generatePlatformContent($summary, $keywords, $mediaAssets = [])
    {
        // Facebook: Maximize engagement by adding hashtags
        $facebookContent = "Facebook Post: " . $summary . "\n\n" . "Related: #" . implode(' #', $keywords);
    
        // Twitter (X): Ensure content is within 280 characters
        $twitterContent = "Twitter: " . substr($summary, 0, 280) . "\n\n#" . implode(' #', $keywords);
    
        // StockTwits: Short, engaging financial-related content
        $stocktwitsContent = "StockTwits: " . substr($summary, 0, 250) . "\n\n" . implode(' ', $keywords);
    
        // Discord: Engaging message with hashtags
        $discordContent = "Discord: " . $summary . "\n\nJoin the discussion! #" . implode(' #', $keywords);
    
        // Blog: Provide a more detailed write-up
        $blogContent = "Blog Post\n\n" . $summary . "\n\nKeywords: " . implode(', ', $keywords);
    
        // Email Notification: Short summary and CTA
        $emailContent = "Email Notification: " . $summary . "\n\nRead more on our blog.";
    
        // In-Browser / Mobile Phone Notifications: Brief and action-oriented
        $browserNotificationContent = "New Update: " . substr($summary, 0, 100) . "... Click to learn more.";
    
        // TikTok Video Script: Generating a short script for voiceover
        $tiktokScript = $this->generateTikTokScript($summary, $keywords, $mediaAssets);
    
        // YouTube Video Script: More detailed video script
        $youtubeScript = $this->generateYouTubeScript($summary, $keywords, $mediaAssets);
    
        return [
            'Facebook' => $facebookContent,
            'Twitter' => $twitterContent,
            'StockTwits' => $stocktwitsContent,
            'Discord' => $discordContent,
            'Blog' => $blogContent,
            'Email' => $emailContent,
            'BrowserNotification' => $browserNotificationContent,
            'TikTok' => $tiktokScript,
            'YouTube' => $youtubeScript
        ];
    }   

    public function generateSocialPost(array $summary): array
    {
        $text = $summary['summary'] ?? '';
        $keywords = $summary['keywords'] ?? [];
    
        $hashtags = implode(' ', array_map(function ($word) {
            return '#' . ucfirst(trim($word));
        }, array_slice($keywords, 0, 5)));
    
        return [
            'twitter'  => substr("{$text} {$hashtags}", 0, 280),
            'facebook' => "{$text}\n\n{$hashtags}",
            'linkedin' => "{$text}\n\n#StayInformed {$hashtags}",
            'discord'  => "**News Summary:**\n{$text}\n\n{$hashtags}",
        ];
    }
    
    private function generateSocialMediaContent($scrapedData)
    {
        // Generate social media content for each platform based on the scraped data
        $facebookContent = "Facebook: ";
        $twitterContent = "Twitter: ";
        $linkedinContent = "LinkedIn: ";

        foreach ($scrapedData as $data) {
            $facebookContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
            $twitterContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
            $linkedinContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
        }

        return [
            'Facebook' => $facebookContent,
            'Twitter' => $twitterContent,
            'LinkedIn' => $linkedinContent,
        ];
    }

    /**
     * Basic summary (could be replaced with AI summary)
     */
    protected function generateSummary(array $story): string
    {
        return substr(strip_tags($story['email_body'] ?? ''), 0, 250) . '...';
    }
    
    public function generateTikTokScript($summary, $keywords, $mediaAssets = [])
    {
        $hook = "Did you know?";
        $cta = "Follow us for more updates!";
    
        // Optionally include media references (if provided)
        $mediaInclusion = !empty($mediaAssets) ? "Include these images/videos: " . implode(", ", $mediaAssets) : "";
    
        // TikTok video script generation
        return "TikTok Video Script:\n1. Hook: \"{$hook}\"\n2. Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";
    }
    
    public function generateYouTubeScript($summary, $keywords, $mediaAssets = [])
    {
        $hook = "Breaking news in the world of finance...";
        $cta = "Like, subscribe, and share for more updates!";
    
        // Optionally include media references (if provided)
        $mediaInclusion = !empty($mediaAssets) ? "Include these images/videos: " . implode(", ", $mediaAssets) : "";
    
        // YouTube video script generation
        return "YouTube Video Script:\n1. Hook: \"{$hook}\"\n2. Detailed Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";
    }

    public function generateVoiceoverAudio($text)
    {
        $client = new TextToSpeechClient();
        $input = new SynthesisInput();
        $input->setText($text);
    
        $voice = new VoiceSelectionParams();
        $voice->setLanguageCode('en-US');
        $voice->setSsmlGender('MALE');
    
        $audioConfig = new AudioConfig();
        $audioConfig->setAudioEncoding(AudioEncoding::MP3);
    
        $response = $client->synthesizeSpeech($input, $voice, $audioConfig);
        $audioContent = $response->getAudioContent();
    
        $filePath = WRITEPATH . 'uploads/voiceover.mp3';
        file_put_contents($filePath, $audioContent);
    
        return base_url('uploads/voiceover.mp3');
    }
         

    public function generateVoiceoverScript()
    {
        $tradeAlerts = $this->alertsModel->getFilteredTradeAlerts(['start' => date('Y-m-d 00:00:00'), 'end' => date('Y-m-d 23:59:59')])->get()->getResultArray();

        if (empty($tradeAlerts)) {
            return $this->respond(['status' => 'error', 'message' => 'No trade alerts found for today.'], 404);
        }

        $script = "**Voiceover Script: MyMI Trade Alerts - Top Stock Movers**\n\n[INTRO]\n";
        $script .= "Welcome to today‚Äôs MyMI Trade Alerts! We‚Äôre breaking down the hottest stocks in the market based on momentum, volume, and breakout potential. Let‚Äôs jump right in!\n\n";

        foreach ($tradeAlerts as $alert) {
            $script .= "**[{$alert['ticker']} - {$alert['company']}]**\n";
            $script .= "**Price:** \${$alert['price']}  |  **% Change:** {$alert['change']}%  |  **Volume:** {$alert['volume']}M\n";
            $script .= "ÔøΩ 52-Week High: \${$alert['high']}  |  ÔøΩ 52-Week Low: \${$alert['low']}\n";
            $script .= "Market Cap: {$alert['market_cap']}\n\n";
        }

        $script .= "[OUTRO]\nThat‚Äôs it for today‚Äôs MyMI Trade Alerts! Don‚Äôt forget to like, subscribe, and stay tuned for more market insights. Drop your thoughts in the comments‚Äîwhat‚Äôs your top stock pick today? See you in the next update!\n";

        return $this->respond(['status' => 'success', 'script' => $script]);
    }

    public function generateStockInformation($cuID)
    {
        $MyMIInvestments = new MyMIInvestments();
        // Fetch investment dashboard data
        $investmentData = $MyMIInvestments->getInvestmentDashboard($cuID);

        // Dynamically determine asset types (stocks, ETFs, crypto)
        $symbols = $this->getSymbolsByAssetType($investmentData['getSymbols']);

        $forecastData = [];
        $riskData = [];

        // Process each asset type
        foreach ($symbols as $type => $symbolList) {
            switch ($type) {
                case 'stocks':
                    $forecastData['stocks'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['stocks'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'stocks');
                    break;
                case 'etfs':
                    $forecastData['etfs'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['etfs'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'etfs');
                    break;
                case 'crypto':
                    $forecastData['crypto'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['crypto'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'crypto');
                    break;
            }
        }

        // Generate content based on the data
        $content = $this->generateContent($forecastData, $riskData);

        return $content;
    }

    private function getSymbolsByAssetType($symbols)
    {
        // Assuming we can identify the asset type by the symbol
        // This is just a placeholder logic and should be replaced with actual identification logic
        $result = [
            'stocks' => [],
            'etfs' => [],
            'crypto' => []
        ];

        foreach ($symbols as $symbol) {
            if (preg_match('/^[A-Z]{1,5}$/', $symbol)) {
                $result['stocks'][] = $symbol;
            } elseif (preg_match('/^[A-Z]{1,5}$/', $symbol)) {
                $result['etfs'][] = $symbol;
            } else {
                $result['crypto'][] = $symbol;
            }
        }

        return $result;
    }

    private function generateContent($forecastData, $riskData)
    {
        $content = "";

        // Stocks Content
        if (!empty($forecastData['stocks'])) {
            $content .= "### Stock Investment Forecast\n";
            foreach ($forecastData['stocks'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // ETFs Content
        if (!empty($forecastData['etfs'])) {
            $content .= "### ETF Investment Forecast\n";
            foreach ($forecastData['etfs'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // Crypto Content
        if (!empty($forecastData['crypto'])) {
            $content .= "### Crypto Investment Forecast\n";
            foreach ($forecastData['crypto'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // Risk Management Insights
        $content .= "\n### Risk Management Insights\n";
        foreach ($riskData as $type => $riskMetrics) {
            $content .= "#### " . ucfirst($type) . " Risks\n";
            foreach ($riskMetrics as $riskMetric => $details) {
                $content .= "- **{$riskMetric}**: " . json_encode($details) . "\n";
            }
        }

        return $content;
    }

    public function getRecentPosts($limit = 5)
    {
        // $marketingModel = new \App\Models\MarketingModel();
        return $this->marketingModel->getRecentPosts($limit);
    }
    
    /**
     * Pull news from MarketAux API (hourly)
     */
    public function pullFinancialNews(): void
    {
        
        $response = $this->client->get('https://www.marketaux.com/api/v1/news/all', [
            'query' => [
                'api_token' => getenv('marketaux.apiKey'),
                'language'  => 'en',
                'country'   => 'us',
                'published_after' => date('Y-m-d\TH:i:s\Z', strtotime('-1 hour')),
                'limit'     => 50,
            ],
        ]);

        $data = json_decode($response->getBody(), true);
        if (isset($data['data'])) {
            foreach ($data['data'] as $story) {
                $this->marketingModel->saveNews($story);
            }
        }
    }

    /**
     * Score and tag scraped news dynamically based on content
     */
    public function rankNewsArticles(): void
    {
        
        
        $unrankedNews = $this->marketingModel->getUnrankedNews();

        foreach ($unrankedNews as $news) {
            $content = strtolower(($news['title'] ?? '') . ' ' . ($news['email_subject'] ?? '') . ' ' . ($news['email_body'] ?? ''));
            $words = str_word_count(strip_tags($content), 1);
            $wordFreq = array_count_values($words);

            $filtered = array_filter($wordFreq, fn($freq, $word) => strlen($word) > 3 && $freq > 1, ARRAY_FILTER_USE_BOTH);
            arsort($filtered);

            $score = array_sum(array_values($filtered));
            $topKeywords = array_slice(array_keys($filtered), 0, 5);

            $this->marketingModel->updateRankedNews($news['id'], $score, implode(',', $topKeywords));
        }
    }

    public function summarizeMultipleArticles(array $articles): string
    {
        $allContent = '';
    
        foreach ($articles as $article) {
            $content = $article['content'] ?? '';
            $allContent .= strip_tags($content) . ' ';
        }
    
        if (empty(trim($allContent))) {
            log_message('error', 'summarizeMultipleArticles() received empty content.');
            return 'No content available to summarize.';
        }
    
        $summaryData = $this->summarizeContent($allContent);
        return is_array($summaryData) && isset($summaryData['summary']) ? $summaryData['summary'] : substr($allContent, 0, 300) . '...';
    }
    
}
?>
<?php namespace App\Libraries\Traits;

use Phpml\FeatureExtraction\TfIdfTransformer;
use Phpml\Tokenization\WhitespaceTokenizer;
use NlpTools\Tokenizers\WhitespaceTokenizer as NlpWhitespaceTokenizer;

trait TextProcessor
{
    public static function sanitize(string $text): string
    {
        $text = quoted_printable_decode($text);
        $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $text = strip_tags($text);
        $text = preg_replace('/\s{2,}/', ' ', $text);
        return trim(mb_convert_encoding($text, 'UTF-8', mb_detect_encoding($text, 'UTF-8, ISO-8859-1', true)));
    }

    public static function splitIntoSentences(string $content): array
    {
        $content = preg_replace('/\s+/', ' ', trim($content));
        $sentences = preg_split('/(?<=[.!?])\s+(?=[A-Z])/', $content, -1, PREG_SPLIT_NO_EMPTY);
        return array_filter($sentences, fn($s) => strlen(trim($s)) > 0);
    }

    public static function tokenize($text): array
    {
        $text = strtolower(strip_tags($text));
        return preg_split('/\W+/', $text, -1, PREG_SPLIT_NO_EMPTY);
    }

    public static function tokenizeWithNlp($text): array
    {
        $tokenizer = new NlpWhitespaceTokenizer();
        return $tokenizer->tokenize($text);
    }

    public static function summarize(string $text, string $method = 'tfidf', int $numSentences = 3): string
    {
        $text = self::sanitize($text);
        $sentences = self::splitIntoSentences($text);

        if (count($sentences) < 2) return $text;

        $documents = array_filter(array_map(function ($sentence) {
            $tokens = self::tokenize($sentence);
            return is_array($tokens) && count($tokens) > 0 ? $tokens : null;
        }, $sentences));

        if (empty($documents)) return '';

        try {
            $tfIdf = new TfIdfTransformer();
            $tfIdf->transform($documents);

            $scores = [];
            foreach ($documents as $i => $tokens) {
                $scores[$i] = array_reduce($tokens, function ($carry, $token) {
                    return $carry + (is_numeric($token) ? floatval($token) : (strlen($token) > 3 ? 1.2 : 0.8));
                }, 0.0);
            }

            arsort($scores);
            $top = array_slice(array_keys($scores), 0, $numSentences);
            sort($top); // preserve original order
            return implode(' ', array_intersect_key($sentences, array_flip($top)));
        } catch (\Throwable $e) {
            log_message('error', '[TextProcessor] Summarization failed: ' . $e->getMessage());
            return '';
        }
    }
}
?>
<?php
namespace App\Services;

use App\Libraries\{BaseLoader, MyMIMarketing};
use App\Models\{MarketingModel};
use GuzzleHttp\Client;

class MarketingService
{
    use BaseLoader;
    protected $MyMIMarketing;
    protected $marketingModel;
    protected $httpClient;

    public function __construct()
    {
        $this->MyMIMarketing = new MyMIMarketing();
        $this->marketingModel = new MarketingModel();

        // ‚úÖ Set up memory-safe Guzzle client
        $this->httpClient = new Client([
            'timeout' => 5,              // Prevents long hangs
            'stream' => true,            // Streams response to reduce memory
            'http_errors' => false,      // Avoid exceptions on bad responses
            'headers' => [
                'User-Agent' => 'MyMI Content Bot',
                'Accept-Encoding' => 'gzip, deflate, br',
            ]
        ]);
    }

    public function extractTopKeywords($summary) {
        return $this->getMyMIMarketing()->extractKeywords($summary['summary']);
    }

    public function fetchUnprocessedEmailSummaries() {
        return $this->getMyMIMarketing()->getEmailSummariesForReview();
    }
    
    public function getEmailRecordById($id)
    {
        return $this->marketingModel->getEmailRecordById($id);
    }
    
    // Method to fetch MyMI Services & All Of Their Features: 
    public function getFeatures() {
        $getFeatures = $this->getMyMIMarketing()->getFeatures(); 
        return $getFeatures; 
    }

    public function gatherKeywordBasedContent($keywords) {
        $allContent = [];
        foreach ($keywords as $keyword) {
            $secData = $this->getMyMIMarketing()->scrapeGoogleSearch("SEC filings {$keyword}");
            $alphaVantageData = $this->getMyMIMarketing()->scrapeGoogleSearch("AlphaVantage {$keyword}");
            $googleData = $this->getMyMIMarketing()->scrapeGoogleSearch($keyword, $this->httpClient);
            $internalData = $this->getMyMIMarketing()->getScrapesByKeyword($keyword); // Custom internal method
    
            $allContent[] = array_merge([$secData], [$alphaVantageData], [$googleData], $internalData);
        }
        return $allContent;
    }

    // REPLACE existing method in MarketingService.php
    public function generateContentFromPost($title, $content, $tags)
    {
        $summaryData = $this->getMyMIMarketing()->summarizeContent($content);
        if (empty($summaryData) || empty($summaryData['summary'])) {
            log_message('error', 'generateContentFromPost() failed to generate summary.');
            return null;
        }

        return $this->getMyMIMarketing()->generatePlatformContent($summaryData['summary'], $tags);
    }

    public function generateContentFromRaw(array $emailRecord)
    {
        if (empty(trim($emailRecord['content'] ?? ''))) {
            log_message('debug', 'üõë generateContentFromRaw() aborted: content is empty.');
            return null;
        }
    
        $text = strip_tags($emailRecord['content']);
        $text = trim(preg_replace('/\s+/', ' ', $text));
        $text = substr($text, 0, 250000); // cap before passing to NLP

        if (strlen($text) > 250000) {
            log_message('warning', 'Skipped record ID ' . $emailRecord['id'] . ' due to oversized body (' . strlen($text) . ' bytes)');
            return null;
        }
    
        if (strlen($text) < 1000) {
            log_message('debug', "‚ö†Ô∏è Skipping record ID {$emailRecord['id']} ‚Äî Content too short for NLP.");
            return null;
        }
    
        $summaryData = $this->getMyMIMarketing()->summarizeContentFromHtml($text);
    
        if (empty($summaryData) || empty($summaryData['summary'])) {
            log_message('error', 'Failed to summarize content for record ID '.$emailRecord['id'] . ' For Array: ' . (print_r($summaryData,true)));
            return null;
        }
    
        // ‚úÖ Validate scoring metrics before processing
        $featureScore = $summaryData['featureScore'] ?? null;
        $keywordScore = $summaryData['keywordScore'] ?? null;
        $pageRankScore = $summaryData['pageRankScore'] ?? null;
        $semanticDiversityScore = $summaryData['semanticDiversityScore'] ?? null;
    
        if (!is_numeric($featureScore) || !is_numeric($keywordScore) || !is_numeric($pageRankScore) || !is_numeric($semanticDiversityScore)) {
            log_message('error', '‚ùå Invalid score types detected', [
                'featureScore' => $featureScore,
                'keywordScore' => $keywordScore,
                'pageRankScore' => $pageRankScore,
                'semanticDiversityScore' => $semanticDiversityScore
            ]);
            return null;
        }
    
        $summary = $summaryData['summary'];
        $headline = $this->getMyMIMarketing()->generateHeadline($summary);
        $subtopics = $this->getMyMIMarketing()->extractSubtopics($text);
    
        $posts = [
            'blog'     => $this->getMyMIMarketing()->formatBlogPost($headline, $summary),
            'email'    => $this->getMyMIMarketing()->formatEmailBlast($headline, $summary),
            'facebook' => $this->getMyMIMarketing()->formatSocialPost($headline, $summary, 'facebook'),
            'linkedin' => $this->getMyMIMarketing()->formatSocialPost($headline, $summary, 'linkedin'),
            'twitter'  => $this->getMyMIMarketing()->formatSocialPost($headline, $summary, 'twitter'),
            'discord'  => $this->getMyMIMarketing()->formatDiscordPost($headline, $summary),
        ];
    
        $this->getMyMIMarketing()->insertFinalScraper($emailRecord, [
            'summary' => $summary,
            'keywords' => $summaryData['keywords'] ?? [],
        ]);
    
        return [
            'headline' => $headline,
            'summary' => $summary,
            'subtopics' => $subtopics,
            'posts' => $posts,
            'source_id' => $emailRecord['id'],
            'platforms' => json_encode(array_keys($posts)),
            'status' => 'ready',
        ];
    }
    
    public function generateFinalContentFromTemp()
    {
        $records = $this->marketingModel->getTopTempRecords(5);
    
        foreach ($records as $record) {
            if (empty($record['title']) || empty($record['content'])) continue;
    
            $summary = $this->summarizeContent($record['content']);
            $socialMediaPost = $this->generateSocialPost($summary);
    
            $final = [
                'title'       => $record['title'],
                'content'     => $summary,
                'post_text'   => $socialMediaPost,
                'source'      => 'email',
                'created_at'  => date('Y-m-d H:i:s'),
            ];
    
            $this->marketingModel->insertFinalScraper($final);
        }
    }
    
    public function generateFromTempScraper($limit = 5)
    {
        $records = $this->marketingModel->getLatestTempRecords($limit);
    
        if (empty($records)) {
            log_message('info', 'No temp scraper records found to process.');
            return;
        }
    
        foreach ($records as $record) {
            try {
                log_message('debug', 'üß™ Processing record ID ' . $record['id']);
                $summary = $this->generateContentFromRaw($record); // ‚úÖ Fixed: Pass the full record array
                if ($summary) {
                    $this->marketingModel->insertFinalScraper($record, $summary);
                    $this->marketingModel->markTempScraperProcessed($record['id']);
                    log_message('info', '‚úÖ Processed and stored content for record ID ' . $record['id']);
                } else {
                    log_message('warning', '‚ö†Ô∏è Summary was null/empty for record ID ' . $record['id']);
                }
            } catch (\Throwable $e) {
                log_message('error', '‚ùå Error generating content for record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    }      
    
    public function generatePlatformPosts($content) {
        $summaryText = implode(" ", array_column($content, 'content'));
        return $this->getMyMIMarketing()->generateContentFromLargeText($summaryText, []);
    }

    public function getManagementTeam() {
        $getManagementTeam = $this->getMyMIMarketing()->getManagementTeam(); 
        return $getManagementTeam;
    }

    public function getMarketingData($accountid, $category, $platform)
    {
        $data = [];

        // Scrape and generate marketing content
        if ($category && $accountid) {
            $scrapedData = $this->getMyMIMarketing()->scrapeTokenContentByAccountId($accountid);
            if ($scrapedData) {
                $data['generatedData'] = $this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData, $platform);
            } else {
                $data['generatedData'] = [];
            }
        }

        return $data;
    }

    // Method to fetch promotional banners for the user
    public function getPromotionalBanners($userId)
    {
        // You may add your logic here to fetch promotional banners.
        // Assuming `MyMIMarketing` has a method to retrieve banners based on userId.
        return $this->getMyMIMarketing()->fetchPromotionalBanners($userId);
    }

    public function getRecentGeneratedContent($limit = 10)
    {
        return $this->db->table('bf_marketing_scraper')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function regeneratePostsFromEmailId($id)
    {
        $record = $this->getEmailRecordById($id);
        if (!$record || empty($record['content'])) {
            log_message('error', "‚ùå Email record not found or empty for ID: $id");
            return null;
        }
    
        $processed = $this->generateContentFromRaw($record);
        if ($processed) {
            $this->marketingModel->insertFinalScraper($record, $processed);
            $this->marketingModel->markEmailsAsProcessed([$id]);
            return $processed;
        }
    
        return null;
    }
    
    public function sanitizeAndSummarize($content) {
        $cleanedBody = $this->marketingModel->cleanHtmlEmailContent($content);
        return $this->getMyMIMarketing()->summarizeContent($cleanedBody);
    }

    // public function scrapeAndStoreEmailsToTemp()
    // {
    //     $emails = $this->marketingModel->getNewEmails();
    
    //     foreach ($emails as $email) {
    //         if (!isset($email['content']) || empty($email['content'])) continue;
    
    //         $data = [
    //             'source'      => 'email',
    //             'title'       => $this->extractTitle($email['content']),
    //             'content'     => $this->sanitizeHtml($email['content']),
    //             'created_at'  => date('Y-m-d H:i:s'),
    //         ];
    
    //         $this->marketingModel->insertTempScraper($data);
    //     }
    // }    

    public function scrapeInboxAndStore()
    {
        $emails = $this->getMyMIMarketing()->fetchAndStoreEmails('news');
    
        if (empty($emails) || !is_array($emails)) {
            log_message('warning', '‚ö†Ô∏è No valid emails retrieved for scraping.');
            return;
        }
    
        foreach ($emails as $email) {
            try {
                $this->marketingModel->insertIntoTempScraper([
                    'type'         => 'Email/Newsletters',
                    'content'      => $email['body'] ?? '',
                    'title'        => $email['subject'] ?? '(No Subject)',
                    'email_date'   => $email['date'] ?? date('Y-m-d H:i:s'),
                    'email_sender' => $email['from'] ?? 'Unknown',
                    'status'       => 'In Review',
                ]);
                log_message('info', '‚úÖ Stored email into temp scraper: ' . ($email['subject'] ?? 'No Subject'));
            } catch (\Throwable $e) {
                log_message('error', '‚ùå Error inserting email into temp scraper: ' . $e->getMessage());
            }
        }
    }    
    
    public function storeGeneratedPostsForDashboard($posts) {
        $this->getMyMIMarketing()->storeGeneratedContent([
            'primary_content' => $posts['summary'],
            'social_media_content' => json_encode($posts['platforms_content']),
            'status' => 'Generated',
            'created_on' => date('Y-m-d H:i:s'),
        ]);
    }

    public function storeScrapedContent($content) {
        foreach ($content as $data) {
            $this->getMyMIMarketing()->storeTempScrapedData([
                'title' => $data['title'],
                'content' => $data['content'],
                'scraped_at' => date('Y-m-d H:i:s'),
                'type' => 'keyword_summary',
            ]);
        }
    }
}
?>
<!-- app/Modules/Management/Views/Marketing/index.php -->
<?php
// Management Configurations
$managementActionItems              = $siteSettings->managementActionItems; 
$today                              = $siteSettings->today; 
$month                              = $siteSettings->month; 
$day                                = $siteSettings->day;
$year                               = $siteSettings->year; 
$last_month                         = strtotime($month . ' - 1 month');
$pageURIB                           = $uri->getSegment(2);
$department                         = $pageURIB;

// Initialize data
$totalActiveUsers                   = 0; 
$totalActivePartners                = 0; 
$targetUsers                        = 0;
$totalActiveCampaigns               = []; 
$getTasksByDepartment               = $departmentTasks['getTasksByDepartment'] ?? [];
$totalDepartmentTasks               = $departmentTasks['totalTasks'] ?? [];
$totalPageSEOTasks                  = []; 
$totalTransFees                     = $reporting['totalTransFees'];
$totalLastTransFees                 = $reporting['totalLastTransFees'];
$usersPercentage                    = $reporting['usersPercentage'];
$getActiveCampaigns                 = []; 
$totalApprovedAssets                = 0; 
$totalPendingAssets                 = 0;
$userGoals                          = $progressGoalData['goals'] ?? [];
$newsUpdates                        = []; 
$getBlogPosts                       = []; 

$viewFileData                       = array(
    'managementActionItems'         => $managementActionItems,
    'targetUsers'                   => $targetUsers,
    'totalActiveUsers'              => $totalActiveUsers,
    'totalActivePartners'           => $totalActivePartners,
    'totalActiveCampaigns'          => $totalActiveCampaigns,
    'getTasksByDepartment'          => $getTasksByDepartment,
    'totalDepartmentTasks'          => $totalDepartmentTasks,
    'totalPageSEOTasks'             => $totalPageSEOTasks,
    'totalTransFees'                => $totalTransFees,
    'totalLastTransFees'            => $totalLastTransFees,
    'department'                    => $department,
    'usersPercentage'               => $usersPercentage,
    'getActiveCampaigns'            => $getActiveCampaigns,
    'totalApprovedAssets'           => $totalApprovedAssets,
    'totalPendingAssets'            => $totalPendingAssets,
    'userGoals'                     => $userGoals,
    'newsUpdates'                   => $newsUpdates,
    'getBlogPosts'                  => $getBlogPosts,
    'recentMarketingPosts'          => $recentMarketingPosts ?? [],
    'todaysStory'                   => $todaysStory ?? [],

);
?>
<div class="nk-block">
    <div class="row gy-gs">
        <div class="col-lg-12 col-xl-12">
            <div class="nk-block">
                <div class="nk-block-head-xs">
                    <div class="nk-block-head-content">
                        <h1 class="nk-block-title title">MyMI Management - <?php echo $pageURIB; ?></h1>
                        <p id="private_key"></p>
                        <p id="address"></p>
                        <a href="<?php echo site_url('/Management'); ?>">Back to Management Dashboard</a>
                    </div>
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- Action Center -->
                    <div class="col-12 col-xxl-4">
                        <?php echo view('ManagementModule/Views/Marketing\index\action_center_new', $viewFileData); ?>
                        <?php //echo view('ManagementModule/Views/Marketing\index\action_center', $viewFileData); ?>
                    </div>
                    <!-- Month-to-Month Overview -->
                    <div class="col-12 col-xxl-8">
                        <?php echo view('ManagementModule/Views/Marketing\index\most_recent_content', $viewFileData); ?>
                    </div>
                    <!-- üîò "Generate New Post" Button -->
                    <div class="col-12 mt-3">
                        <div class="card card-bordered">
                            <div class="card-inner d-flex justify-content-between align-items-center">
                                <h5 class="title mb-0">üìù Generate New Marketing Post</h5>
                                <button id="generatePostBtn" class="btn btn-success btn-sm">Generate Now</button>
                                <button 
                                    class="btn btn-warning" 
                                    onclick="triggerReprocessIncompleteEmails()" 
                                    data-bs-toggle="tooltip" 
                                    title="Try to fix email entries missing title or URL">
                                        üõ†Ô∏è Reprocess Incomplete Emails
                                </button>
                            </div>
                            <div id="generate-post-status" class="text-success mt-2"></div>
                        </div>
                    </div>

                    <div class="col-12 col-xxl-12 mt-3">
                        <div class="card card-bordered">
                            <div class="card-inner">
                                <h5 class="title">üì¢ Today‚Äôs Story</h5>
                                <?php 
                                if (!empty($todaysStory)): ?>
                                    <h6><?php echo esc($todaysStory['title']); ?></h6>
                                    <p><?php echo esc($todaysStory['content']); ?></p>
                                    <button onclick="generateTodaysStory()" class="btn btn-primary btn-sm">Generate Now</button>
                                <?php else: ?>
                                    <p>No story generated yet. <button onclick="generateTodaysStory()" class="btn btn-primary btn-sm">Generate Now</button></p>
                                <?php endif; ?>
                                <div id="todays-story-status" class="mt-2 text-success"></div>
                            </div>
                        </div>
                    </div>
                    <!-- ‚úÖ Recently Generated Posts Block -->
                    <div class="col-12 col-xxl-12 mt-3">
                        <div class="card card-bordered">
                            <div class="card-inner">
                                <h5 class="title">üì∞ Recent Marketing Posts</h5>
                                <?php 
                                $validPosts = array_filter($recentMarketingPosts, fn($p) => !empty($p->title));
                                if (!empty($validPosts)): ?>
                                    <ul class="list-group">
                                        <?php foreach ($validPosts as $post): ?>
                                            <li class="list-group-item d-flex justify-content-between align-items-start flex-column">
                                                <div class="w-100">
                                                    <strong><?= esc($post->title ?: '(Untitled Post)') ?></strong><br>
                                                    <small class="text-muted"><?= date('M d, Y h:i A', strtotime($post->created_at)) ?></small><br>
                                                    <?php if (!empty($post->short_description)): ?>
                                                        <small class="text-secondary"><?= esc($post->short_description) ?>...</small>
                                                    <?php else: ?>
                                                        <small class="text-secondary">No description available.</small>
                                                    <?php endif; ?>
                                                </div>
                                                <div class="mt-2">
                                                    <button class="btn btn-sm btn-primary"
                                                            onclick="dynamicModalLoader('Marketing', 'PreviewGeneratedPost', '<?= $post->id ?>')">
                                                        Preview
                                                    </button>
                                                </div>
                                            </li>
                                        <?php endforeach; ?>
                                    </ul>
                                <?php else: ?>
                                    <p>No posts with valid titles available yet. Click 'Generate' to create one!</p>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- Month-to-Month Overview -->
                    <div class="col-12 col-xxl-4">
                        <?php echo view('ManagementModule/Views/Marketing\index\exchange_action_center', $viewFileData); ?>
                        <?php // echo view('ManagementModule/Views/Marketing\resources\standaloneAnalytics', $viewFileData); ?>
                    </div>
                    <!-- Month-to-Month Overview -->
                    <div class="col-12 col-xxl-8">
                    <?php echo view('ManagementModule/Views/Marketing\index\target_users', $viewFileData); ?>
                    </div>
                    <!-- Month-to-Month Overview -->
                    <!-- <div class="col-lg-4">
                        <?php //echo view('ManagementModule/Views/Marketing\index\monthly_overview', $viewFileData); ?>
                    </div> -->
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- Month-to-Month Overview -->
                    <div class="col-lg-12">
                        <?php // echo view('ManagementModule/Views/Marketing\resources\standaloneCalendar', $viewFileData); ?>
                    </div>
                    <!-- Month-to-Month Overview -->
                    <!-- <div class="col-lg-4">
                        <?php //echo view('ManagementModule/Views/Marketing\index\monthly_overview', $viewFileData); ?>
                    </div> -->
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- Analytics & KPIs -->
                    <div class="col-12 col-md-6">
                        <?php //echo view('ManagementModule/Views/Marketing\index\analytics_kpis', $viewFileData); ?>
                    </div>
                    <div class="col-12 col-lg-6">
                        <?php //echo view('ManagementModule/Views/Marketing\User\MyMIGold-Tasks', $viewFileData); ?>
                    </div>
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- Campaigns Management -->
                    <div class="col-12 col-lg-6">
                        <?php //echo view('ManagementModule/Views/Marketing\Campaigns\Listing-Table', $viewFileData); ?>
                    </div>
                    <!-- Blog and User Tasks -->
                    <div class="col-12 col-lg-6">
                        <?php //echo view('ManagementModule/Views/Marketing\Blog\Listing-Table', $viewFileData); ?>
                    </div>
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- SEO Tasks -->
                    <div class="col-12">
                        <?php //echo view('ManagementModule/Views/Marketing\SEO\Listing-Table', $viewFileData); ?>
                    </div>
                </div>
            </div>
            <div class="nk-block">
                <div class="row">
                    <!-- News and Updates -->
                    <div class="col-12">
                        <?php //echo view('ManagementModule/Views/Marketing\News\Listing-Table', $viewFileData); ?>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script <?= $nonce['script'] ?? '' ?>>
function generateTodaysStory() {
    const statusEl = document.getElementById('todays-story-status');
    statusEl.textContent = '‚è≥ Generating...';

    fetch('<?php echo site_url('API/Marketing/generateDailyContentDigest'); ?>')
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            statusEl.textContent = '‚úÖ ' + data.message;
            location.reload(); // Reload to show updated story
        } else {
            statusEl.classList.add('text-danger');
            statusEl.textContent = '‚ùå ' + data.message;
        }
    })
    .catch(err => {
        statusEl.classList.add('text-danger');
        statusEl.textContent = '‚ùå Error: ' + err.message;
    });
}
</script>

<script <?= $nonce['script'] ?? '' ?>>
    function massResendActivationEmails() {
        const statusElement = document.getElementById('resend-status');
        statusElement.textContent = '‚è≥ Processing...';

        fetch('<?php echo site_url('API/Marketing/massResendActivationEmails'); ?>', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '<?php echo csrf_hash(); ?>'
            },
            body: JSON.stringify({})
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                statusElement.classList.remove('text-danger');
                statusElement.classList.add('text-success');
                statusElement.textContent = '‚úÖ ' + data.message;
            } else {
                statusElement.classList.remove('text-success');
                statusElement.classList.add('text-danger');
                statusElement.textContent = '‚ùå ' + data.message;
            }
        })
        .catch(error => {
            statusElement.classList.remove('text-success');
            statusElement.classList.add('text-danger');
            statusElement.textContent = '‚ùå Error: ' + error.message;
        });
    }
</script>
<script <?= $nonce['script'] ?? '' ?>>
document.getElementById("generatePostBtn").addEventListener("click", function () {
    const status = document.getElementById("generate-post-status");
    status.innerHTML = "‚è≥ Generating post...";

    fetch("<?= site_url('API/Marketing/generateContentFromScraper') ?>")
        .then(response => response.json())
        .then(data => {
            if (data.status === "success") {
                status.innerHTML = "‚úÖ Post generated successfully!";
                setTimeout(() => location.reload(), 1500);
            } else {
                status.innerHTML = "‚ùå " + data.message;
            }
        })
        .catch(err => {
            console.error("‚ùå Error:", err);
            status.innerHTML = "‚ùå An error occurred.";
        });
});
</script>
<script <?= $nonce['script'] ?? '' ?>>
function triggerReprocessIncompleteEmails() {
    if (confirm('Reprocess up to 20 incomplete emails?')) {
        $.ajax({
            url: "<?= site_url('Management/reprocessIncompleteEmails') ?>",
            method: "GET",
            success: function(response) {
                alert(response.message);
            },
            error: function(xhr) {
                alert("Error: " + xhr.responseJSON?.message || 'Failed to reprocess.');
            }
        });
    }
}
</script>
<!-- app/Modules/Management/Views/Marketing/index/action_center_new.php -->
<div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="card-title-group align-start">
            <div class="card-title">
                <h6 class="title">Action Center</h6>
                <p>Quick access to important actions and tools.</p>
            </div>
        </div>
    </div>
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-share-alt"></em>
                <div class="title">Content Generator</div>
                <p><a href="<?php echo site_url('/Marketing/Campaigns/Add'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/Campaigns/Add'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-book"></em>
                <div class="title">Generate Blog</div>
                <p><a href="<?php echo site_url('/Management/Marketing/RunContentGeneration'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/RunContentGeneration'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-book"></em>
                <div class="title">View Blogs</div>
                <p><a href="<?php echo site_url('/Management/Marketing/Blogs'); ?>"><strong><?php // echo $totalActiveUsers; ?> View & Manage</strong></a> all blog content that have been generated.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/Blogs'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-update"></em>
                <div class="title">Fetch Content</div>
                <p><a href="<?php echo site_url('/Management/Marketing/fetchEmails'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/fetchEmails'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-article"></em>
                <div class="title">Generate Newsletter</div>
                <p><a href="<?php echo site_url('Management/Marketing/generateNewsletter'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/generateNewsletter'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-calendar"></em>
                <div class="title">Schedule Newsletter</div>
                <p><a href="<?php echo site_url('Management/Marketing/scheduleNewsletters'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/scheduleNewsletters'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-briefcase"></em>
                <div class="title">Marketing Tools</div>
                <p><a href="<?php echo site_url('/Management/Marketing/Tools'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/Tools'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-eye"></em>
                <span>View</span>
            </a>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-send"></em>
                <div class="title">Mass Resend Activation Emails</div>
                <p>This will resend activation emails to all inactive users who haven‚Äôt confirmed their account.</p>
            </div>
            <button class="btn btn-danger btn-md" onclick="massResendActivationEmails()">
                <em class="icon ni ni-mail"></em>
                <span>Resend Now</span>
            </button>
        </div>
        <div id="resend-status" class="mt-2 text-success"></div>
    </div>

    <!-- <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-users"></em>
                <div class="title">Marketing Campaigns</div>
                <p><a href="<?php echo site_url('/Management/Marketing/Campaigns/Add'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Management/Marketing/Campaigns/Add'); ?>" class="btn btn-primary btn-md">
                <em class="icon ni ni-plus"></em>
                <span>Add Campaign</span>
            </a>
        </div>
    </div><!-- .card-inner --
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-users"></em>
                <div class="title">Active Users / Partners</div>
                <p><a href="<?php echo site_url('/Marketing/SEO/Tasks'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Marketing/SEO/Tasks'); ?>" class="btn btn-warning btn-md">
                <em class="icon ni ni-browser"></em>
                <span>Manage Users</span>
            </a>
        </div>
    </div><!-- .card-inner --
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-users"></em>
                <div class="title">Marketing Reports</div>
                <p><a href="<?php echo site_url('/Marketing/Reports'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Marketing/Reports'); ?>" class="btn btn-info btn-md">
                <em class="icon ni ni-report"></em>
                <span>View Reports</span>
            </a>
        </div>
    </div><!-- .card-inner --
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-users"></em>
                <div class="title">Marketing Tools</div>
                <p><a href="<?php echo site_url('/Marketing/Reports'); ?>"><strong><?php // echo $totalActiveUsers; ?> Active Users</strong></a> and <a href="#active-assets-overview"><strong><?php // echo $totalActivePartners; ?> Active Partners</strong></a>, thats need to be reviewed.</p>
            </div>
            <a href="<?php echo site_url('/Marketing/Tools'); ?>" class="btn btn-success btn-md">
                <em class="icon ni ni-list-index"></em>
                <span>View Tools</span>
            </a>
        </div>
    </div>.card-inner -->
</div>
<!-- app/Modules/Management/Views/Marketing/index/most_recent_content.php -->
<div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="card-title-group align-start">
            <div class="card-title">
                <h6 class="title">Recent Scraped Data</h6>
                <p>Quick access to important actions and tools.</p>
            </div>
        </div>
    </div>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content full-width">
                <em class="icon ni ni-link"></em>
                <div class="title">Newsletters: Add Subscriber</div>
                <p>
                    <?php echo view('ManagementModule/Views/Marketing\resources\standaloneAddSubscriberForm'); ?>
                </p>
            </div>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content full-width">
                <em class="icon ni ni-link"></em>
                <div class="title">Web Scraper: Enter Link</div>
                <p>
                    <?php echo view('ManagementModule/Views/Marketing\resources\standaloneScraperForm'); ?>
                </p>
            </div>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content full-width">
                <em class="icon ni ni-link"></em>
                <div class="title">Content Generator: </div>
                <p>
                    <?php echo view('ManagementModule/Views/Marketing\resources\standaloneLargeContentForm'); ?>
                </p>
            </div>
        </div>
    </div><!-- .card-inner -->
    <hr>
    <div class="card-body">
        <table class="table table-striped" id="scrapedDataTable">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Content</th>
                    <th>Links</th>
                    <th>URL</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
                <!-- Scraped data will be appended here -->
            </tbody>
        </table>
    </div>
</div>

<script <?= $nonce['script'] ?? '' ?>>
    $(document).ready(function() {
        // Initialize DataTable
        const table = $('#scrapedDataTable').DataTable();

        function truncateText(text, maxLength) {
            if (text.length > maxLength) {
                return text.substring(0, maxLength) + '...';
            }
            return text;
        }

        function addToScrapedDataTable(data) {
            let linksHtml = '<div class="dropdown">' +
                            '<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">' +
                            'Links' +
                            '</button>' +
                            '<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">';
            if (Array.isArray(data.links)) {
                data.links.forEach(link => {
                    linksHtml += `<li><a class="dropdown-item" href="${link.href}" target="_blank">${link.text}</a></li>`;
                });
            } else {
                linksHtml += '<li>No links</li>';
            }
            linksHtml += '</ul></div>';

            table.row.add([
                data.title || 'No title',
                truncateText(data.content || 'No content', 30),
                linksHtml,
                `<a href="${data.url}" target="_blank">${data.url}</a>`,
                new Date().toLocaleString()
            ]).draw();
        }

        // Fetch and display the most recent 5 tasks from the database
        fetch('<?php echo site_url('Management/Marketing/getRecentScrapes'); ?>')
        .then(response => response.json())
        .then(data => {
            if (data.success && data.scrapes) {
                data.scrapes.slice(0, 5).forEach(scrape => {
                    scrape.links = JSON.parse(scrape.links || '[]');
                    addToScrapedDataTable(scrape);
                });
            } else {
                console.error('No scrapes found or failed to fetch scrapes');
            }
        })
        .catch(error => console.error('Error fetching recent scrapes:', error));
    });
    </script>
    <div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="align-start card-title-group">
            <div class="card-title">
                <h6 class="title">Exchange Marketing Center</h6>
                <p>Quick access to our Exchange Marketing Tools.</p>
            </div>
        </div>
    </div>
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-users"></em>
                <div class="title">Top Communities</div>
                <p>
                    View The <a href="<?php echo site_url('/Management/Marketing/Exchanges/Top-Communities'); ?>"><strong><?php  ?>Exchange Communities</strong></a> 
                    to promote our services to.
                </p>
            </div>
            <!-- Dropdown Button for Generator -->
            <div class="dropdown">
                <button class="btn btn-md btn-primary dropdown-toggle" type="button" id="generatorDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <em class="icon ni ni-eye"></em> <span>View</span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="generatorDropdown">
                    <li><a class="dropdown-item" href="<?php echo site_url('/Management/Marketing/Exchanges/Top-Communities/Discord'); ?>">Discord</a></li>
                    <li><a class="dropdown-item" href="<?php echo site_url('/Management/Marketing/Exchanges/Top-Communities/Facebook'); ?>">Facebook</a></li>
                    <li><a class="dropdown-item" href="<?php echo site_url('/Management/Marketing/Exchanges/Top-Communities/Twitter'); ?>">X (Twitter)</a></li>
                    <li><a class="dropdown-item" href="<?php echo site_url('/Management/Marketing/Exchanges/Top-Communities/Website'); ?>">Website</a></li>
                </ul>
            </div>
        </div>
    </div>
    <hr>
    <div class="card-inner">
        <div class="nk-wg-action">
            <div class="nk-wg-action-content">
                <em class="icon ni ni-coin"></em>
                <div class="title">Top Performers</div>
                <p>
                    View the <a href="<?php echo site_url('Management/Marketing/Exchanges/Top-Performers'); ?>"><strong><?php  ?>Top Performing Currencies</strong></a> 
                    to promote to our Communities.
                </p>
            </div>
            <!-- Dropdown Button for View Tools -->
            <div class="dropdown">
                <button class="btn btn-md btn-primary dropdown-toggle" type="button" id="viewToolsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <em class="icon ni ni-eye"></em> <span>View</span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="viewToolsDropdown">
                    <li><a class="dropdown-item" href="#">Tool 1</a></li>
                    <li><a class="dropdown-item" href="#">Tool 2</a></li>
                    <li><a class="dropdown-item" href="#">Tool 3</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<?php
// Parameters
$start_date = new DateTime('2024-11-01');
$end_date = new DateTime('2025-11-01');
$target_users = 550; // Adjustable target user count
$start_users = 1; // Starting user base

// Calculate months between dates
$months = $start_date->diff($end_date)->m + ($start_date->diff($end_date)->y * 12);

// Calculate growth rate
$growth_rate = pow($target_users / $start_users, 1 / $months);

// Generate user growth data
$user_data = [];
$total_users = $start_users;
for ($month = 0; $month <= $months; $month++) {
    $monthly_users = round($total_users);
    $user_data[] = [
        'month' => $start_date->modify('+1 month')->format('F Y'),
        'new_users' => $month == 0 ? $monthly_users : round($total_users - $user_data[$month - 1]['new_users']),
        'total_users' => $monthly_users
    ];
    $total_users *= $growth_rate;
}
?>

<!-- HTML Structure -->
<div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="card-title-group align-start">
            <div class="card-title">
                <h6 class="title">Projected Monthly User Growth</h6>
                <p>Dynamically calculated user growth over the selected timeframe.</p>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-striped" id="userGrowthTable">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>New Users</th>
                    <th>Total Users</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($user_data as $data): ?>
                <tr>
                    <td><?= $data['month'] ?></td>
                    <td><?= $data['new_users'] ?></td>
                    <td><?= $data['total_users'] ?></td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
</div>
<div class="card card-bordered mt-4">
    <div class="card-header">
        <h4 class="card-title">Analytics Dashboard</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-12 col-xxl-6">
                <div class="card card-bordered">
                    <div class="card-header">
                        <h4 class="card-title">Email Open Rates</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="emailOpenRateChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-12 col-xxl-6">
                <div class="card card-bordered">
                    <div class="card-header">
                        <h4 class="card-title">User Engagement</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="userEngagementChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script <?= $nonce['script'] ?? '' ?>>
$(document).ready(function() {
    // Email Open Rate Chart
    var ctx = document.getElementById('emailOpenRateChart').getContext('2d');
    var emailOpenRateChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'Email Open Rate',
                data: [65, 59, 80, 81, 56, 55, 40],
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // User Engagement Chart
    var ctx2 = document.getElementById('userEngagementChart').getContext('2d');
    var userEngagementChart = new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'User Engagement',
                data: [65, 59, 80, 81, 56, 55, 40],
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});
</script>
<div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="card-title-group align-start mb-3">
            <div class="card-title">
                <h6 class="title">Monthly Overview</h6>
                <p>Key metrics and performance indicators for the current month.</p>
            </div>
        </div>
        <ul class="nk-block-tools g-3">
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Active Users</div>
                    <div class="nk-wg1-amount"><?php echo $totalActiveUsers ?? 0; ?></div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Active Partners</div>
                    <div class="nk-wg1-amount"><?php echo $totalActivePartners ?? 0; ?></div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Active Campaigns</div>
                    <div class="nk-wg1-amount"><?php echo $totalActiveCampaigns ?? 0; ?></div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Transaction Fees</div>
                    <div class="nk-wg1-amount">
                        $<?php echo is_numeric($totalTransFees) ? number_format((float)$totalTransFees, 2) : '0.00'; ?>
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>
<div class="nk-block">
    <div class="nk-content-body">
        <div class="row">
            <div class="col-12">
                <div class="nk-block nk-block-lg">
                    <div class="card card-bordered pb-4 pricing px-2">
                        <div class="pricing-head">
                            <div class="pricing-title text-center">
                                <h4 class="card-title title">Comprehensive Day-to-Day Marketing Strategy</h4>
                                <p class="sub-text">Weekly Marketing Strategy To Optimize Our Marketing Efforts</p>
                            </div>
                        </div>
                        <div class="pricing-body">
                            <div class="container-fluid mt-3 mb-5">
                                <table class="table table-bordered table-hover">
                                    <thead class="table-dark text-center">
                                        <tr>
                                            <th>Day</th>
                                            <th>Time</th>
                                            <th>Activity</th>
                                            <th>Links</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="table-active">
                                            <td rowspan="3">Monday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Share a short post with key market updates for the day.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Monday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Blog Post: Detailed market update on your website.<br>Email: Send out a newsletter with market updates, key insights, and links to detailed articles or videos.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Monday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>YouTube Video: A quick recap of the day‚Äôs market performance.<br>LinkedIn Post: Share the YouTube video with a summary and call to action.<br>Facebook Reel/YouTube Short: Highlight a key market update from the day.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Monday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-primary">
                                            <td rowspan="3">Tuesday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Share a tip or fact about investing or financial management.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Tuesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Infographic: Create and post an infographic about a key financial concept on Facebook, LinkedIn, and Discord.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Tuesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>YouTube Video: A short educational video on a financial topic.<br>Facebook Post: Share the video with a detailed description and encourage discussions.<br>Facebook Reel/YouTube Short: Quick educational snippet from the YouTube video.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Tuesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-secondary">
                                            <td rowspan="3">Wednesday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Announce any new features or updates in the MyMI Wallet.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Wednesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Blog Post: Detailed article on the new feature and how users can benefit from it.<br>Email: Notify users about the new feature with a link to the blog post.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Wednesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>YouTube Video: Demo or walkthrough of the new feature.<br>LinkedIn Post: Share the YouTube video with professional insights on the feature.<br>Facebook Reel/YouTube Short: Highlight a key aspect of the new feature.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Wednesday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-success">
                                            <td rowspan="3">Thursday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Start a poll or ask a question to engage followers.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Thursday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Facebook Stories: Share user testimonials or success stories.<br>Facebook Group: Post a discussion topic or question to encourage interaction among group members.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Thursday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>TikTok Video: User testimonial or a story of how MyMI Wallet has helped someone achieve their financial goals.<br>LinkedIn Post: Share a case study or user story with professional insights.<br>Facebook Reel/YouTube Short: Highlight from the user testimonial video.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Thursday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-warning">
                                            <td rowspan="3">Friday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Share a quick recap of the week's highlights.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Friday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Infographic: Weekly summary infographic posted on Facebook, LinkedIn, and Discord.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Friday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>YouTube Video: Weekly recap video summarizing the main events and updates.<br>Facebook Post: Share the video with a detailed summary and encourage followers to share their thoughts.<br>Facebook Reel/YouTube Short: Highlight of the week‚Äôs biggest news.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Friday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-info">
                                            <td rowspan="2">Saturday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Share a teaser for an in-depth article or research piece.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Saturday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Blog Post: Publish an in-depth article or research piece on your website.<br>LinkedIn Post: Share the article with professional insights and a call to action.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Saturday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr class="table-light">
                                            <td rowspan="3">Sunday</td>
                                            <td>Morning</td>
                                            <td>Twitter/X, Facebook, LinkedIn, Discord, TradingView, StockTwits: Share a fun fact or a motivational quote related to finance.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Sunday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Afternoon</td>
                                            <td>Facebook Stories: Share behind-the-scenes content or a day in the life of the MyMI Wallet team.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Sunday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Evening</td>
                                            <td>TikTok Video: Fun and interactive content such as finance tips, myths vs. facts, or a Q&A session.<br>Facebook Live: Host a live Q&A session to interact directly with your audience.</td>
                                            <td class="text-center">
                                                <a href="<?php echo site_url('/Management/Marketing/Schedule/Sunday'); ?>" class="btn btn-link">Details</a>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="card card-bordered h-100">
    <div class="card-inner">
        <div class="card-title-group align-start mb-3">
            <div class="card-title">
                <h6 class="title">Analytics & KPIs</h6>
                <p>Important analytics and key performance indicators.</p>
            </div>
        </div>
        <ul class="nk-block-tools g-3">
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">User Growth</div>
                    <div class="nk-wg1-amount"><?php echo $usersPercentage; ?>%</div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Approved Assets</div>
                    <div class="nk-wg1-amount"><?php echo $totalApprovedAssets; ?></div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Pending Assets</div>
                    <div class="nk-wg1-amount"><?php echo $totalPendingAssets; ?></div>
                </div>
            </li>
            <li>
                <div class="nk-wg1">
                    <div class="nk-wg1-title">Goals Progress</div>
                    <div class="nk-wg1-amount"><?php echo count($userGoals); ?> Goals</div>
                </div>
            </li>
        </ul>
    </div>
</div>
<div class="card card-bordered h-100" id="active-assets-overview">
    <div class="card-inner-group">
        <div class="card-inner card-inner-md">
            <div class="card-title-group">
                <div class="card-title">
                    <h6 class="title">MyMI Gold - Active Goals Checklist</h6>
                </div>
                <div class="card-tools me-n1">
                    <div class="row">
                        <span class="col">
                            <a class="link py-3" href="<?php echo site_url('Management/Marketing/MyMI-Gold/Tasks/Add'); ?>"><i class="icon ni ni-plus-circle"></i> <span class="pl-0" style="padding-top:3px;">Add News Task</span></a>
                        </span>
                        <span class="col">
                            <div class="drodown">
                                <a href="#" class="dropdown-toggle btn btn-icon btn-trigger pt-3 full-width" data-bs-toggle="dropdown"><em class="icon ni ni-more-h"></em></a>
                                <div class="dropdown-menu dropdown-menu-end">
                                    <ul class="link-list-opt no-bdr">
                                        <li><a href="#"><em class="icon ni ni-setting"></em><span>Action Settings</span></a></li>
                                        <li><a href="#"><em class="icon ni ni-notify"></em><span>Push Notification</span></a></li>
                                    </ul>
                                </div>
                            </div>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-inner">
            <div class="nk-block">
                <div class="row">
                    <div class="col">
                        <table class="table table-bordered table-striped" id="userGoalsOverview">
                            <thead>
                                <tr>
                                    <th class="d-none">ID</th>
                                    <th>Category</th>
                                    <th>Tasks</th>
                                    <th># of Tasks Completed</th>
                                    <th>Manage</th>
                                    <!-- 
                                    <th>URL</th>
                                    <th>Processed</th> -->
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be populated here by DataTables -->
                                <?php
                                // log_message('info', 'Marketing\Blog\Listing-Table L47 - getBlogPosts: ' . (print_r($getBlogPosts, true)));
                                if (empty($userGoals)) {
                                    echo '                                    
                                    <tr>
                                        <td class="d-none"></td>
                                        <td>N/A</td>
                                        <td>N/A</td>
                                        <td>N/A</td>
                                        <td><button class="btn btn-primary btn-badge" onclick="">Details</button></td>
                                    </tr>
                                    ';
                                } else { 
                                    foreach($userGoals as $goals) {
                                            echo '
                                        <tr>
                                            <td class="d-none">' . $goals['id'] . '</td>
                                            <td>' . $goals['category'] . '</td>
                                            <td>' . $goals['goal_description'] . '</td>
                                            <td>0 Goals</td>
                                            <td><button class="btn btn-primary btn-badge" onclick="">Details</button></td>
                                        </tr>
                                            ';
                                    } 
                                }
                                ?>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script <?= $nonce['script'] ?? '' ?>>
$(document).ready(function() {

    $('#userGoalsOverview').DataTable({
        order: [[3, "desc"], [0, "desc"]],
        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]]
    });
});

function summarizeArticle(articleId) {
    $.ajax({
        url: '<?php echo site_url('/Management/Marketing/summarizeArticle/'); ?>' + articleId,
        type: 'GET',
        success: function(response) {
            // Handle the response containing the summarized content
            // Example: Display the response in a modal, redirect to an edit page, etc.
        },
        error: function(error) {
            // Handle errors
        }
    });
}

</script>
<div class="card card-bordered h-100" id="active-campaigns-overview">
    <div class="card-inner-group">
        <div class="card-inner card-inner-md">
            <div class="card-title-group">
                <div class="card-title">
                    <h6 class="title">Active Marketing Campaigns</h6>
                </div>
                <div class="card-tools me-n1">
                    <div class="row">
                        <span class="col">                            
                        <a class="btn btn-primary text-white dynamicModalLoader" data-formtype="Marketing" data-endpoint="addCampaign" data-category="Add" data-accountid="<?= $cuID; ?>"> <i class="icon ni ni-plus-circle"></i> <span class="pl-0" style="padding-top:3px;">Add Campaign</span></a>

                        </span>
                        <span class="col">
                            <div class="drodown">
                                <a href="#" class="dropdown-toggle btn btn-icon btn-trigger pt-3 full-width" data-bs-toggle="dropdown"><em class="icon ni ni-more-h"></em></a>
                                <div class="dropdown-menu dropdown-menu-end">
                                    <ul class="link-list-opt no-bdr">
                                        <li><a href="#"><em class="icon ni ni-setting"></em><span>Action Settings</span></a></li>
                                        <li><a href="#"><em class="icon ni ni-notify"></em><span>Push Notification</span></a></li>
                                    </ul>
                                </div>
                            </div>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-inner">
            <div class="nk-block">
                <div class="row">
                    <div class="col">
                        <table class="table table-striped table-bordered" id="marketingCampaignOverview">
                            <thead>
                                <tr>
                                    <th class="d-none">Campaign</th>
                                    <th>Campaign</th>
                                    <th>Stage</th>
                                    <th>Created By</th>
                                    <th>Assigned To</th>
                                    <th>Actions...</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php 
                                foreach($getActiveCampaigns as $campaigns) {
                                    echo '
                                    <tr>
                                        <td class="d-none">' . $campaigns['id'] . '</td>
                                        <td><a class="btn text-primary dynamicModalLoader" data-formtype="Marketing" data-endpoint="viewCampaign" data-category="View" data-accountid="' . $campaigns['id'] . '">' . $campaigns['name'] . '</a></td>
                                        <td><a href="">' . $campaigns['stage'] . '</a></td>
                                        <td><a href="">' . $campaigns['username'] . '</a></td>
                                        <td><a href="">' . $campaigns['assigned_to'] . '</a></td>
                                        <td>
                                            <a href="' . site_url('Management/Marketing/Campaigns/View/' . $campaigns['id']) . '"><i class="icon myfs-md ni ni-eye"></i></a>
                                            <a href="' . site_url('Management/Marketing/Campaigns/Edit/' . $campaigns['id']) . '"><i class="icon myfs-md ni ni-edit"></i></a>
                                            <a href="' . site_url('Management/Marketing/Campaigns/Generate-Content/' . $campaigns['id']) . '"><i class="icon myfs-md ni ni-spark"></i></a>
                                            <a class="text-red" href="' . site_url('Management/Marketing/Campaigns/Delete/' . $campaigns['id']) . '"><i class="icon myfs-md ni ni-trash"></i></a>
                                        </td>
                                    </tr>
                                    ';
                                }
                                ?>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div><!-- .card-inner -->
    </div><!-- .card-inner-group -->
</div><!-- .card -->
<script <?= $nonce['script'] ?? '' ?>>
    $(document).ready(function() {
        $('#marketingCampaignOverview').DataTable({
            "order": [[ 2, "desc" ]],     
            "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
        });
    });
</script>
<div class="card card-bordered card-preview">
    <div class="card-inner">
        <table class="datatable-init nk-tb-list nk-tb-ulist" data-auto-responsive="false">
            <thead>
                <tr class="nk-tb-item nk-tb-head">
                    <th class="nk-tb-col"><span class="sub-text">Blog Title</span></th>
                    <th class="nk-tb-col tb-col-md"><span class="sub-text">Author</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Date</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Actions</span></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($getBlogPosts as $blog): ?>
                <tr class="nk-tb-item">
                    <td class="nk-tb-col"><?php echo $blog['title']; ?></td>
                    <td class="nk-tb-col tb-col-md"><?php echo $blog['author']; ?></td>
                    <td class="nk-tb-col tb-col-lg"><?php echo $blog['date']; ?></td>
                    <td class="nk-tb-col tb-col-lg">
                        <a href="<?php echo site_url('Marketing/Blog/Edit/' . $blog['id']); ?>" class="btn btn-sm btn-warning">Edit</a>
                        <a href="<?php echo site_url('Marketing/Blog/Delete/' . $blog['id']); ?>" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
</div>
<div class="card card-bordered card-preview">
    <div class="card-inner">
        <table class="datatable-init nk-tb-list nk-tb-ulist" data-auto-responsive="false">
            <thead>
                <tr class="nk-tb-item nk-tb-head">
                    <th class="nk-tb-col"><span class="sub-text">Task Name</span></th>
                    <th class="nk-tb-col tb-col-md"><span class="sub-text">Assigned To</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Status</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Due Date</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Actions</span></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($totalPageSEOTasks as $task): ?>
                <tr class="nk-tb-item">
                    <td class="nk-tb-col"><?php echo $task['name']; ?></td>
                    <td class="nk-tb-col tb-col-md"><?php echo $task['assigned_to']; ?></td>
                    <td class="nk-tb-col tb-col-lg"><?php echo $task['status']; ?></td>
                    <td class="nk-tb-col tb-col-lg"><?php echo $task['due_date']; ?></td>
                    <td class="nk-tb-col tb-col-lg">
                        <a href="<?php echo site_url('Marketing/SEO/Edit/' . $task['id']); ?>" class="btn btn-sm btn-warning">Edit</a>
                        <a href="<?php echo site_url('Marketing/SEO/Delete/' . $task['id']); ?>" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
</div>
<div class="card card-bordered card-preview">
    <div class="card-inner">
        <table class="datatable-init nk-tb-list nk-tb-ulist" data-auto-responsive="false">
            <thead>
                <tr class="nk-tb-item nk-tb-head">
                    <th class="nk-tb-col"><span class="sub-text">Title</span></th>
                    <th class="nk-tb-col tb-col-md"><span class="sub-text">Author</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Date</span></th>
                    <th class="nk-tb-col tb-col-lg"><span class="sub-text">Actions</span></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($newsUpdates as $news): ?>
                <tr class="nk-tb-item">
                    <td class="nk-tb-col"><?php echo $news['title']; ?></td>
                    <td class="nk-tb-col tb-col-md"><?php echo $news['author']; ?></td>
                    <td class="nk-tb-col tb-col-lg"><?php echo $news['date']; ?></td>
                    <td class="nk-tb-col tb-col-lg">
                        <a href="<?php echo site_url('Marketing/News/Edit/' . $news['id']); ?>" class="btn btn-sm btn-warning">Edit</a>
                        <a href="<?php echo site_url('Marketing/News/Delete/' . $news['id']); ?>" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
</div>

