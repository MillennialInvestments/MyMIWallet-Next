<?php namespace App\Modules\User\Controllers;

use CodeIgniter\Controller;
use Config\Services;
use App\Config\{Auth, SiteSettings, SocialMedia};
use App\Controllers\UserController;
use App\Libraries\{BaseLoader, MyMIAlerts, MyMIAnalytics, MyMIBudget, MyMICoin, MyMIDashboard, MyMIExchange, MyMIGold, MyMIInvestments, MyMIMarketing, MyMIOnboarding, MyMIProjects, MyMISolana, MyMIUser, MyMIWallet, MyMIWallets};
use App\Models\{AccountsModel, AlertsModel, DashboardModel, SolanaModel, UserModel};
use App\Services\{AccountService, BudgetService, DashboardService, EmailService, SolanaService, UserService};
use CodeIgniter\API\ResponseTrait;
use Myth\Auth\Authorization\GroupModel;
use DateTime;
use Psr\Log\LoggerInterface;

class DashboardController extends UserController
{
    use ResponseTrait;

    protected $auth;
    protected $session;
    protected $siteSettings;
    protected $debug;
    protected $request;
    protected $uri;
    protected $logger;
    protected $cuID;
    protected $data = [];

    protected $dashboardModel;
    protected $alertsModel;
    protected $accountsModel;
    protected $userModel;

    protected $accountService;
    protected $budgetService;
    protected $dashboardService;
    protected $emailService;
    protected $solanaService;
    protected $userService;

    public function __construct()
    {
        $this->auth = service('authentication');
        $this->session = Services::session();
        $this->request = service('request');
        $this->siteSettings = config('SiteSettings');
        $this->debug = $this->siteSettings->debug;
        $this->uri = $this->request->getUri();
        $this->logger = service('logger');

        $this->alertsModel = new AlertsModel();
        $this->dashboardModel = new DashboardModel();
        $this->userModel = new UserModel();

        $this->accountService = new AccountService();
        $this->budgetService = new BudgetService();
        $this->dashboardService = new DashboardService();
        $this->emailService = new EmailService();
        $this->solanaService = new SolanaService();

        $this->cuID = $this->auth->id() ?? $this->session->get('user_id');
    }

    public function commonData(): array
    {
        $this->userService = new UserService($this->siteSettings, $this->cuID, $this->request);
        $userData = $this->getuserService()->commonData();
        $this->data = array_merge($this->data, $userData);

        $this->data['siteSettings'] = $this->siteSettings;
        $this->data['debug'] = (string)$this->siteSettings->debug;
        $this->data['uri'] = $this->uri;
        $this->data['request'] = $this->request;
        $this->data['cuID'] = $this->cuID;

        $userBudget = $this->getMyMIBudget()->getUserBudget($this->cuID); 
        log_message('info', 'DashboardController L72 - $checkingSummary: ' . $userBudget['checkingSummary']);
        $this->data['checkingSummary'] = $userBudget['checkingSummary'];
        // Other Budget-related data
        $creditAccounts = $this->getAccountService()->getUserCreditAccounts($this->cuID);
        $debtAccounts = $this->getAccountService()->getUserDebtAccounts($this->cuID);
        $repaymentSummary = $this->getBudgetService()->getRepaymentSummary($this->cuID);
        $repaymentSchedules = $this->getBudgetService()->calculateRepaymentSchedules($creditAccounts);
        $currentBalances = $this->getBudgetService()->getCurrentBalances($creditAccounts);
        $availableBalances = $this->getBudgetService()->getAvailableBalances($repaymentSchedules);
        $totalAvailableBalance = $this->getBudgetService()->getTotalAvailableBalance($debtAccounts);
        $this->data['userBudget'] = $this->getBudgetService()->getUserBudget($this->cuID);
        $this->data['userBudgetRecords'] = $this->getBudgetService()->getUserBudgetRecords($this->cuID);
        $this->data['currentBalances'] = $currentBalances;
        $this->data['availableBalances'] = $availableBalances;
        $this->data['totalAvailableBalance'] = $totalAvailableBalance;
        $this->data['repaymentSummary'] = $repaymentSummary;
        $this->data['repaymentSchedules'] = $repaymentSchedules;
        $budgetInfo = $this->getMyMIBudget()->allUserBudgetInfo($this->cuID);

        $dashboardInfo = $this->getMyMIDashboard()->dashboardInfo($this->cuID);
        $this->data['completedGoals'] = $dashboardInfo['progressGoalData']['completions'];
        $this->data['pendingGoals'] = $dashboardInfo['progressGoalData']['goals'];
        $this->data['promotionalBanners'] = $dashboardInfo['promotionalBanners'];

        $userInfo = $this->getMyMIUser()->getUserInformation($this->cuID);
        $this->data['cuWalletID'] = $userInfo['cuWalletID'];
        $this->data['cuRole'] = $userInfo['cuRole'] ?? 4;
        $this->data['cuUserType'] = $userInfo['cuUserType'] ?? '';
        $this->data['cuEmail'] = $userInfo['cuEmail'] ?? '';
        $this->data['cuDisplayName'] = $userInfo['cuDisplayName'] ?? '';
        $this->data['cuUsername'] = $userInfo['cuUsername'] ?? '';
        $this->data['cuNameInitials'] = $userInfo['cuNameInitials'] ?? '';
        $this->data['cuKYC'] = $userInfo['cuKYC'] ?? '';
        $this->data['cuWalletCount'] = $userInfo['cuWalletCount'];
        $this->data['MyMIGCoinSum'] = $userInfo['MyMIGCoinSum'];
        $this->data['walletID'] = $userInfo['walletID'];

        $userSolanaData = $this->getSolanaService()->getSolanaData($this->cuID);
        $this->data['cuSolanaDW'] = $userSolanaData['userSolanaWallets']['cuSolanaDW'] ?? null;
        // Ensure Solana network status exists to avoid "Undefined array key"
try {
    if (!isset($this->solanaService)) {
        $this->solanaService = service('solanaService'); // or however you DI it
    }
    $data['solanaNetworkStatus'] = $this->solanaService->getNetworkStatus();
} catch (\Throwable $e) {
    log_message('error', 'WalletsController getNetworkStatus failed: {msg}', ['msg' => $e->getMessage()]);
    $data['solanaNetworkStatus'] = [
        'healthy' => false,
        'slot'    => null,
        'version' => null,
        'error'   => $e->getMessage(),
    ];
}
        $this->data['cuSolanaTotal'] = $userSolanaData['userSolanaWallets']['cuSolanaTotal'] ?? 0;
        $this->data['cuSolanaValue'] = $userSolanaData['userSolanaWallets']['cuSolanaValue'] ?? 0;

        // Segment-based Dynamic Logic for Investments
        if ($this->uri->getTotalSegments() >= 3) {
            $pageURIC = $this->uri->getSegment(3);
            if ($pageURIC === 'Alerts') {
                $pageURID = $this->uri->getSegment(4); 
                if ($pageURID === 'addChart') {
                    log_message('debug', 'DashboardController L159 - $this->uri->getSegment(6): ' . $this->uri->getSegment(6)); 
                    $tradeAlertID = $this->uri->getSegment(6); 
                    $this->data['tradeAlertID'] = $tradeAlertID;
                    $this->data['getAlertInfo'] = $this->alertsModel->getAlertById($tradeAlertID); 
                }

                if ($pageURID === 'createTradeAlert') {
                    $tradeAlertID = $this->uri->getSegment(5);
                    
                    if (!isset($this->alertsModel)) {
                        $this->alertsModel = new AlertsModel(); // ✅ Ensure it is initialized
                    }
            
                    if (!empty($tradeAlertID)) {
                        $alertData = $this->alertsModel->getAlertById($tradeAlertID);
            
                        if ($alertData) {
                            $this->data['alert'] = $alertData;
                            $this->data['tradeAlertID'] = $tradeAlertID;
                        } else {
                            log_message('error', "Trade Alert ID $tradeAlertID not found.");
                            return redirect()->to('/dashboard')->with('error', 'Trade alert not found.');
                        }
                    } else {
                        log_message('error', "Trade Alert ID is missing in the URL.");
                        return redirect()->to('/dashboard')->with('error', 'Invalid Trade Alert Request.');
                    }
                }

                if ($pageURID === 'manageTradeAlert') {
                    $tradeAlertID = $this->uri->getSegment(5); 
                    
                    if (!isset($this->alertsModel)) {
                        $this->alertsModel = new AlertsModel(); 
                    }

                    if (!empty($tradeAlertID)) {
                        $alertData = $this->alertsModel->getAlertById($tradeAlertID); 
            
                        if ($alertData) {
                            if ($alertData['ticker']) {
                                $this->data['alertHistory'] = $this->alertsModel->fetchAlertHistory($alertData['ticker']) ?? []; 
                            } 
                            $this->data['alert'] = $alertData;
                            $this->data['tradeAlertID'] = $tradeAlertID;
                        } else {
                            log_message('error', "Trade Alert ID $tradeAlertID not found.");
                            return redirect()->to('/dashboard')->with('error', 'Trade alert not found.');
                        }
                    }
                }
            
                if ($pageURID === 'View') {
                    $pageURIE = $this->uri->getSegment(4); 
                    if ($pageURIE === 'alertDetails') {
                        $tradeAlertID = $this->uri->getSegment(5); 
                        $this->data['tradeAlertID'] = $tradeAlertID;
                        $this->data['getAlertInfo'] = $MyMIAlerts->getTradeAlertInfo($tradeAlertID); 
                    }
                    if ($pageURIE === 'viewChart') {
                        $tradeAlertID = $this->uri->getSegment(6); 
                        $this->data['tradeAlertID'] = $tradeAlertID;
                        $this->data['getAlertInfo'] = $MyMIAlerts->getTradeAlertInfo($tradeAlertID);
                    }
                }
            } elseif ($pageURIC === 'Budget') {
                $this->accountsModel                                = new AccountsModel();
                $this->budgetService                                = new BudgetService();
                $pageURID = $this->uri->getSegment(4);
                if ($pageURID === 'View') {
                    $pageURIF = $this->uri->getSegment(6); 
                    if ($pageURIF === 'History') {                        
                        $this->data['userBudget']                   = $this->getBudgetService()->getUserBudget($this->cuID);
                        $this->data['getUserBankAccounts']          = $this->accountsModel->getUserBankAccounts($this->cuID);
                        $this->data['getUserCreditAccounts']        = $this->accountsModel->getUserCreditAccounts($this->cuID);
                    }
                }
            } elseif ($pageURIC === 'Email') {
                if ($endpoint === 'createList') {
                    // No extra data needed for Create List
                } elseif ($endpoint === 'addMember') {
                    $this->data['lists']                            = $this->emailService->getActiveLists();
                } elseif ($endpoint === 'sendCampaign') {
                    $this->data['lists']                            = $this->emailService->getActiveLists();
                    $this->data['campaigns']                        = $this->emailService->getAvailableCampaigns(); // We'll add getAvailableCampaigns() next
                }
            } elseif ($pageURIC === 'Investments') {
                $this->MyMIInvestments                              = new MyMIInvestments();
                $this->accountsModel                                = new AccountsModel();
                $this->data['investDashboard']                      = $this->MyMIInvestments->getInvestmentDashboard($this->cuID);
                $this->data['userInvestmentWallets']                = $this->accountsModel->getUserInvestAccounts($this->cuID);

                $investmentType                                     = $this->uri->getSegment(4);
                $subViewFile                                        = '';
                $subViewDirectory                                   = 'UserModule\Views\\';
                switch ($investmentType) {
                    case 'addBondTrade':
                        $subViewTitle                               = 'Add Bond Investment';
                        $subViewFile                                = 'Investments\Add\stock_fields';
                        $tradeType                                  = 'Bond';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'addCryptoTrade':
                        $subViewTitle                               = 'Add Crypto Investment';
                        $subViewFile                                = 'Investments\Add\crypto_fields';
                        $tradeType                                  = 'Crypto';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'ETF':
                        $subViewTitle                               = 'Add ETF Investment';
                        $subViewFile                                = 'Investments\Add\ETF_fields';
                        $tradeType                                  = 'ETF';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'Forex':
                        $subViewTitle                               = 'Add Forex Investment';
                        $subViewFile                                = 'Investments\Add\forex_fields';
                        $tradeType                                  = 'Forex';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'Real-Estate':
                        $subViewTitle                               = 'Add Real Estate Investment';
                        $subViewFile                                = 'Investments\Add\stock_fields';
                        $tradeType                                  = 'Real Estate';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'addStockTrade':
                        $subViewTitle                               = 'Add Stock Investment';
                        $subViewFile                                = 'Investments\Add\stock_fields';
                        $tradeType                                  = 'Stock';
                        $includeDateTime                            = 1;
                        $includeWallets                             = 1;
                        break;
                    case 'addWatchlist':
                        $subViewTitle                               = 'Add Asset To Watchlist';
                        $subViewFile                                = 'Investments\Add\watchlist_fields';
                        $tradeType                                  = 'Watchlist';
                        $includeDateTime                            = 0;
                        $includeWallets                             = 0;
                        break;
                    // Add more investment cases as needed
                }
                $this->data['includeDateTime']                      = $includeDateTime; 
                $this->data['includeWallets']                       = $includeWallets; 
                $this->data['tradeType']                            = $tradeType;
                $this->data['subViewTitle']                         = $subViewTitle;
                $this->data['subViewFile']                          = $subViewDirectory . $subViewFile;
            } elseif ($pageURIC === 'Marketing') { // Segment-based Dynamic Logic for Marketing
                // $this->MyMIMarketing                        = new MyMIMarketing();
                $this->data['recentMarketingPosts']         = $this->getMyMIMarketing()->getRecentPosts(10);

                $this->data['managementTeam']               = $this->getMyMIMarketing()->getManagementTeam(); 
                if (!empty($this->uri->getSegment(4))) {
                    $pageURID                               = $this->uri->getSegment(4);
                    if ($pageURID === 'addCampaign') {
                    } elseif($pageURID === 'viewCampaign') {
                        if (!empty($this->uri->getSegment(5))) {
                            $campaignID                     = $this->uri->getSegment(5);
                            $this->data['campaignInfo']     = $this->getMyMIMarketing()->getCampaignByID($campaignID);
                            if (!$this->data['campaignInfo']) {
                                log_message('error', 'No campaign info found for ID: ' . $campaignID);
                            }                            
                        }
                    } elseif ($pageURID === 'addIdea') {
                    } elseif ($pageURID === 'addSchedule') {
                        $viewPath                           = 'ManagementModule\Views\Marketing\Schedule\Add';
                        return $this->renderTheme($viewPath, $this->data);
                    } elseif ($pageURID === 'generateContent') {
                        $category                           = $this->uri->getSegment(6) ?? 'default';
                        if ($category === 'Solana') {
                            $this->solanaModel              = new SolanaModel();
                            $tokenInfo                      = $this->solanaModel->getTokenInfoByID($this->uri->getSegment(5));
                        } else {
                            $tokenInfo                      = [];
                        }
                        if (!empty($tokenInfo)) {
                            $scrapedData                    = $this->getMyMIMarketing()->scrapeTokenContent($tokenInfo);
                            $generatedData                  = $this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData, $this->uri->getSegment(7) ?? 'default');
                            $this->data['generatedData']    = $generatedData;
                            $viewPath                       = 'ManagementModule\Views\Marketing\Promote\\' . $category . '\Generate_Content';
                            return $this->renderTheme($viewPath, $this->data);
                        } else {
                            return "Token information is not available.";
                        }
                    } elseif ($pageURID === 'previewGeneratedPost') {
                        $postID                             = $this->uri->getSegment(5); 
                        $post                               = $this->marketingModel->findFinalizedById($postId);
                        $post['title']                      = $this->getMyMIMarketing()->cleanTitle($post['title'] ?? 'Untitled');
                        $post['cta']                        = $this->getMyMIMarketing()->generateCTA($post['summary'] ?? '');
                        $post['voiceover']                  = $post['voice_script'] ?? null;

                        // ✨ NEW: Extract Top 5 Keywords from Summary
                        $topKeywords                        = $this->getMyMIMarketing()->extractKeywords($post['summary'] ?? '');
                        $topKeywords                        = array_slice($topKeywords, 0, 5); // Limit to top 5

                        $this->data['post']                 = $post;
                        $this->data['cleaned_summary']      = $this->getMyMIMarketing()->cleanHtmlSummaryPreview($post['summary'] ?? '');
                        $this->data['voiceover_url']        = $post['voiceover_url'] ?? null;
                        if (!empty($post)) {
                            $viewPath                       = 'ManagementModule\Views\Marketing\modals\previewGeneratedPost';
                            return $this->renderTheme($viewPath, $this->data);
                        } else {
                            return "Generated Post could not be previewed.";
                        }
                    }
                }
            } elseif ($pageURIC === 'Projects') {
                if(!empty($this->uri->getSegment(4))) {
                    $pageURID = $this->uri->getSegment(4); 
                    if ($pageURID === 'Admin') {
                        if (!empty($this->uri->getSegment(6))) {
                            $pageURIE = $this->uri->getSegment(5); 
                            $pageURIF = $this->uri->getSegment(6); 
                            if ($pageURIF === 'viewProject') { 
                                $getProjectInfo = $this->getMyMIProjects()->getProjectFullDetails($pageURIE); 
                                $projectOwnerID = $getProjectInfo['created_by']; 
                                $getOwnerInfo = $this->getMyMIUser()->getUserInformation($projectOwnerID);
                                log_message('debug', 'DashboardController L250 - $getOwnerInfo Array: ' . (print_r($getOwnerInfo, true)));
                                $this->data['project'] = $getProjectInfo; 
                                $this->data['owner'] = $getOwnerInfo; 
                            }
                        }   
                    }
                }
            } elseif ($pageURIC === 'Solana') {
                log_message('debug', 'DashboardController L285: We are here now!');
            } elseif ($pageURIC === 'Wallets') {
                $pageURID = $this->uri->getSegment(4);
            }
        }

        // Set User Goals
        $completedGoals = array_column($this->data['completedGoals'], 'goal_id');
        $nextGoal = null;
        foreach ($completedGoals as $goal) {
            if (!in_array($goal, $completedGoals)) {
                $nextGoal = $goal;
                break;
            }
        }
        $this->data['userNextGoal'] = $nextGoal ?? ['gold_reward' => 0];
    }

    // Views
    public function index()
    {
        $this->data['pageTitle'] = 'MyMI Dashboard | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\index', $this->data);
    }

    public function account()
    {
        $this->data['pageTitle'] = 'My Account | MyMI Wallet | The Future of Finance';
        $this->userAccountData();
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account', $this->data);
    }

    public function activity()
    {
        $this->data['pageTitle'] = 'My Activity | MyMI Wallet | The Future of Finance';

        // $this->userModel = new UserModel(); 
        $loginActivity = $this->userModel->getUserLoginActivity($this->cuID);
        $this->data['loginActivity'] = $loginActivity; 
        $this->userAccountData(); 
        $this->commonData(); 
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\Activity', $this->data);
    }

    public function billing()
    {
        $this->data['pageTitle'] = 'Billing & Subscriptions | MyMI Wallet | The Future of Finance';
        $this->userAccountData(); 
        $this->commonData(); 
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\Billing', $this->data);
    }

    /**
     * 📌 AJAX: Check Onboarding Status for Pop-up Prompt
     */
    public function checkOnboardingStatus()
    {
        $incompleteSteps = $this->MyMIOnboarding->checkOnboardingStatus($this->cuID);
        return $this->response->setJSON(['incomplete' => $incompleteSteps]);
    }

    /**
     * 📌 Mark Onboarding Step as Completed
     * - Updates onboarding step and refreshes view
     */
    public function completeOnboardingStep($step)
    {
        if (!$this->cuID) {
            return redirect()->to('/login');
        }

        $this->MyMIOnboarding->completeStep($this->cuID, $step);
        return redirect()->to('/dashboard/onboarding')->with('success', ucfirst(str_replace('_', ' ', $step)) . ' completed.');
    }

    public function connectedAccounts()
    {
        $this->data['pageTitle'] = 'My Connected Accounts | MyMI Wallet | The Future of Finance';
        $this->userAccountData(); 
        $this->commonData(); 
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\ConnectedAccounts', $this->data);
    }

    private function generatePromotionalMessage($formtype, $category, $platform, $tokenInfo)
    {
        $baseMessage = "Check out {$tokenInfo['symbol']} on the MyMI {$tokenInfo['blockchain']} Blockchain!";
        $messages = [];
        switch ($platform) {
            case 'Discord':
                $messages['Discord'] = $baseMessage . " Swap tokens on MyMI Exchange now!";
                break;
            case 'Twitter':
                $message = $baseMessage . " Follow us for updates!";
                $messages['Twitter'] = (strlen($message) > 280) ? substr($message, 0, 277) . '...' : $message;
                break;
            default:
                $messages['default'] = $baseMessage;
                break;
        }

        return $messages;
    }

    public function goals($category = null)
    {
        $this->data['pageTitle'] = 'My Goals | MyMI Wallet | The Future of Finance';
        // $this->data['taskCategory'] = $category ?? 'All'; 
        $this->userAccountData(); 
        $this->commonData(); 
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Goals', $this->data);
    }

    public function loadingScreen()
    {
        return $this->renderTheme('UserModule\Views\Dashboard\index\modal-loading-page');
    }

    public function loadModalContent($formtype, $endpoint, $accountid = null, $category = null, $platform = null)
    {
        if ($this->debug == 1) {
            log_message('debug', "DashboardController L516 - loadModalContent called with formtype: $formtype, endpoint: $endpoint, accountid: $accountid, category: $category, platform: $platform");
        }

        // Define a mapping array for all possible endpoints to their corresponding view paths
        $mapping = [

            // Alert Management 
            'addChart' => 'ManagementModule\Views\Alerts\modals\addChart',
            'createTradeAlert' => 'ManagementModule\Views\Alerts\modals\createTradeAlert',
            'manageTradeAlert' => 'ManagementModule\Views\Alerts\modals\manageTradeAlert',
            'sendDiscordAlert' => 'ManagementModule\Views\Alerts\sendDiscordAlert',
            'tradeDetails' => 'ManagementModule\Views\Alerts\tradeDetails',
            'updateExchange' => 'ManagementModule\Views\Alerts\modals\updateExchange',
            'viewTradeChart' => 'ManagementModule\Views\Alerts\modals\viewTradeChart',

            // Budget Models
            'addBudgetIncome' => 'UserModule\Views\Budget\Add',
            'addBudgetExpense' => 'UserModule\Views\Budget\Add',
            'viewHistory' => 'UserModule\Views\Budget\History',
            
            // Email Management 
            'addMember'     => 'ManagementModule\Views\Email\modals\addMember',
            'campaignStats' => 'ManagementModule\Views\Email\modals\campaignStats',
            'cloneCampaign'     => 'ManagementModule\Views\Email\modals\cloneCampaign',
            'createDraftCampaign' => 'ManagementModule\Views\Email\modals\createDraftCampaign',
            'createList'    => 'ManagementModule\Views\Email\modals\createQuickList',
            'editCampaign' => 'ManagementModule\Views\Email\modals\editCampaign',
            'scheduleCampaign' => 'ManagementModule\Views\Email\modals\scheduleCampaign',
            'sendCampaign'  => 'ManagementModule\Views\Email\modals\sendCampaign',

            // Marketing Management
            'addCampaign' => 'ManagementModule\Views\Marketing\Add',
            'viewCampaign' => 'ManagementModule\Views\Marketing\Campaigns\View',
            'activeCampaigns' => 'ManagementModule\Views\Marketing\Campaigns\Overview',
            'addIdea' => 'ManagementModule\Views\Marketing\AddIdea',
            'addSchedule' => 'ManagementModule\Views\Marketing\Schedule\Add',
            'generateContent' => 'ManagementModule\Views\Marketing\Promote\Generate_Content',
            'generateScheduleContent' => 'ManagementModule\Views\Marketing\Promote\Default\Generate_Content',
            'generateVideo' => 'ManagementModule\Views\Marketing\Promote\Generate_Video',
            'shareTo' => 'ManagementModule\Views\Marketing\Promote\Share_To',

            // Investment Models
            'addBondTrade' => 'UserModule\Views\Investments\Add',
            'addCryptoTrade' => 'UserModule\Views\Investments\Add',
            'addOptionsTrade' => 'UserModule\Views\Investments\Add',
            'addStockTrade' => 'UserModule\Views\Investments\Add',
            'editBondTrade' => 'UserModule\Views\Investments\Edit',
            'editCryptoTrade' => 'UserModule\Views\Investments\Edit',
            'editOptionsTrade' => 'UserModule\Views\Investments\Edit',
            'editStockTrade' => 'UserModule\Views\Investments\Edit',
            'addWatchlist' => 'UserModule\Views\Investments\Add', 

            // Projects Models 
            'newProject' => 'UserModule\Views\Projects\Add',
            'commitProject' => 'UserModule\Views\Projects\forms\project_commit',
            'discussProject' => 'UserModule\Views\Projects\forms\project_discuss',
            'investProject' => 'UserModule\Views\Projects\forms\project_invest',
            'sellProject' => 'UserModule\Views\Projects\forms\project_sell',
            'viewProject' => 'UserModule\Views\Projects\index\project_overview',
            'adminViewProject' => 'ManagementModule\Views\Projects\management\project_overview',

            // Wallet Models
            'addBankAccount' => 'UserModule\Views\Wallets\Add',
            'addCreditAccount' => 'UserModule\Views\Wallets\Add',
            'addDebtAccount' => 'UserModule\Views\Wallets\Add',
            'addInvestAccount' => 'UserModule\Views\Wallets\Add',
            'addCryptoAccount' => 'UserModule\Views\Wallets\Add',
            'deleteWallet' => 'UserModule\Views\Wallets\Delete',
            'editBankAccount' => 'UserModule\Views\Wallets\Edit',
            'editCreditAccount' => 'UserModule\Views\Wallets\Edit',
            'editDebtAccount' => 'UserModule\Views\Wallets\Edit',
            'editCryptoAccount' => 'UserModule\Views\Wallets\Edit',
            'editInvestAccount' => 'UserModule\Views\Wallets\Edit',
            'purchasePaypal' => 'UserModule\Views\Wallets\Purchase',
            'walletSelection' => 'UserModule\Views\Dashboard\walletSelection',

            // Referral Models
            'createReferral' => 'UserModule\Views\Referral_Program\Create',

            // !! Old
            // 'Wallets/Add/Credit' => 'UserModule\Views\Dashboard\addCreditAccount',
            // 'Add-Wallet/Digital' => 'UserModule\Views\Dashboard\addDigitalWallet',
            // 'Add-Wallet/Fiat' => 'UserModule\Views\Dashboard\addFiatWallet',
            // 'Admin/Add-External-Site' => 'UserModule\Views\Dashboard\addExternalSite',
            // 'Wallets/Investment/Add/Account/Modal' => 'UserModule\Views\Dashboard\addInvestmentAccount',
            // 'Exchange/Coin-Listing/Request' => 'UserModule\Views\Dashboard\createAssetRequest',
            // 'Exchange/Coin-Listing/Asset-Information-Modal/Existing' => 'UserModule\Views\Dashboard\completeAssetRequest',
            // 'Wallets/Delete' => 'UserModule\Views\Dashboard\deleteWallet',
            // 'Wallets/Address-Generator' => 'UserModule\Views\Dashboard\generateWalletAddress',
            // 'Announcements/Post' => 'UserModule\Views\Dashboard\postAnnouncement',
            // 'Purchase-Wallet/Digital' => 'UserModule\Views\Dashboard\purchaseDigitalWallet',
            // 'Purchase-Wallet/Fiat' => 'UserModule\Views\Dashboard\purchaseFiatWallet',
            // 'MyMI-Gold/Purchase' => 'UserModule\Views\Dashboard\purchaseMyMIGold',
            // 'Add-Wallet-Deposit-Fetch' => 'UserModule\Views\Dashboard\trackDeposit',
            // 'Add-Wallet-Withdraw-Fetch' => 'UserModule\Views\Dashboard\trackWithdraw',
            // 'Wallet-Selection/Digital' => 'UserModule\Views\Dashboard\walletSelectionDigital',
            // 'Wallet-Selection/Fiat' => 'UserModule\Views\Dashboard\walletSelectionFiat',
            // 'Withdraw-Funds' => 'UserModule\Views\Dashboard\withdrawFunds',
        ];

        if ($formtype === 'Alerts') {
            if ($endpoint === 'createTradeAlert') {
                $viewPath = $mapping['createTradeAlert'];
            }
            if ($endpoint === 'manageTradeAlert') {
                $viewPath = $mapping['manageTradeAlert'];
            }
            if ($endpoint === 'updateExchange') {
                $viewPath = $mapping['updateExchange'];
                // Fetch trade alert details
                $tradeAlert = $this->alertsModel->getAlertById($accountid);
                if (!$tradeAlert) {
                    return "Error: Trade alert not found.";
                }
        
                // Send ticker data
                $this->data['ticker'] = $tradeAlert['ticker'];
            }
            if ($endpoint === 'viewTradeChart') {
                $viewPath = $mapping['viewTradeChart'];
    
                // Fetch trade alert details
                $tradeAlert = $this->alertsModel->getAlertById($accountid);
                if (!$tradeAlert) {
                    return "Error: Trade alert not found.";
                }
    
                // Fetch ticker details (including exchange)
                $tickerInfo = $this->alertsModel->getTickerInfo($tradeAlert['ticker']);
                if (!$tickerInfo || empty($tickerInfo->exchange)) {
                    $this->data['exchange_missing'] = true;
                    $this->data['ticker'] = $tradeAlert['ticker'];
                } else {
                    $this->data['exchange_missing'] = false;
                    $this->data['exchange'] = $tickerInfo->exchange;
                    $this->data['ticker'] = $tradeAlert['ticker'];
                }
    
                return $this->renderTheme($viewPath, $this->data);
            }
        }
        if ($formtype === 'Budget') {
            log_message('debug', 'DashboardController L427 - $formtype: ' . $formtype);
            if ($endpoint === 'Add') {
                log_message('debug', 'DashboardController L429 - $endpoint: ' . $endpoint);
                if ($category === 'Income') {
                    log_message('debug', 'DashboardController L431 - $category: ' . $category);
                    $viewPath = $mapping['addBudgetIncome'];
                    log_message('debug', 'DashboardController L433 - $viewPath: ' . $viewPath);
                } elseif ($category === 'Expense') {
                    log_message('debug', 'DashboardController L435 - $category: ' . $category);
                    $viewPath = $mapping['addBudgetExpense'];
                    log_message('debug', 'DashboardController L437 - $viewPath: ' . $viewPath);
                } else {                    
                    log_message('debug', "DashboardController L439 - No mapping found for formtype: $formtype, endpoint: $endpoint");
                }
            } elseif ($endpoint === 'View') {
                if ($category === 'History') {
                    $viewPath = $mapping['viewHistory']; 
                }
            }
        }

        // Handle Marketing-specific mappings
        elseif ($formtype === 'Marketing') {
            if ($endpoint === 'activeCampaigns' && $category === 'View') {
                log_message('debug', 'DashboardController L431 - $activeCampaigns reached! Category: ' . $category);
                $viewPath = $mapping['viewCampaign'];
            } elseif (isset($mapping[$endpoint])) {
                $viewPath = $mapping[$endpoint];
            } else {
                log_message('error', "DashboardController - No mapping found for formtype: $formtype, endpoint: $endpoint");
            }
        }

        elseif ($formtype === 'Projects') {
            if ($endpoint === 'Add' && $category === 'newProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            } elseif ($endpoint === 'Add' && $category === 'commitProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            } elseif ($endpoint === 'Add' && $category === 'discussProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            } elseif ($endpoint === 'Add' && $category === 'investProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            } elseif ($endpoint === 'Add' && $category === 'sellProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            } elseif ($endpoint === 'Admin' && $category === 'adminViewProject') {
                log_message('debug', 'DashboardController L529 - Add New Project reached.'); 
                $viewPath = $mapping[$category];
            }
        }

        // Handle Solana-specific mappings
        elseif ($formtype === 'Solana') {
            $solanaMapping = [
                'addSolanaWallet' => 'ExchangeModule\Views\Solana\walletSelect',
                'coinSwap' => 'ExchangeModule\Views\Solana\swap',
                'connectWalletModal' => 'ExchangeModule\Views\Solana\connectWallet',
                'createSolanaToken' => 'ExchangeModule\Views\Solana\createToken',
                'disconnectSolanaWallet' => 'ExchangeModule\Views\Solana\Disconnect\wallet',
                'tradeSolana' => 'ExchangeModule\Views\Solana\trade',
                'viewSolanaOrders' => 'ExchangeModule\Views\Solana\orders',
                'viewSolanaToken' => 'ExchangeModule\Views\Solana\token',
                'viewSolanaWallet' => 'ExchangeModule\Views\Solana\viewWallet',
            ];
            $viewPath = $solanaMapping[$endpoint] ?? null;
        }

        // Handle ProductDetails-specific mappings
        elseif ($formtype === 'ProductDetails') {
            $getFeatures = $this->getMyMIDashboard()->getFeatures();
            if (!empty($getFeatures)) {
                if ($this->debug == 1) {
                    log_message('debug', 'DashboardController L180 - $this->getFeatures(): ' . print_r($getFeatures, true));
                }
                foreach ($getFeatures as $feature) {
                    $mapping[$feature['identifier']] = 'UserModule\Views\Wallets\Purchase\Memberships\Features';
                }
            }
        } else {            
            $viewPath = $mapping[$endpoint] ?? null;
        }

        // Log and render the view
        if ($this->debug == 1) {
            log_message('debug', 'DashboardController L489 - $viewPath: ' . $viewPath);
        }
        if ($viewPath === 'UserModule\Views\Errors\CannotLoadPage') {
            $this->sendErrorNotification($endpoint);
        }
        if ($viewPath && $this->request->isAJAX()) {
            if ($this->debug == 1) {
                log_message('debug', '$viewPath: ' . $viewPath . ' | $this->data: ' . print_r($this->data, true));
            }
            if ($formtype === 'Solana') {
                $this->MyMISolana = new MyMISolana();
                $userSolana = $this->MyMISolana->getUserDefaultSolana($this->cuID);
                $this->data['userSolana'] = $userSolana;

                //log_message('debug', 'DashboardController L654 - $userSolana: ' . print_r($this->data['userSolana'], true));
                // Fetch and verify the Solana price and transactions
                $this->data['solanaPrice'] = $this->getSolanaService()->getSolanaPrice();
                $this->data['cryptoTransactions'] = $this->getSolanaService()->getTransactions($this->cuID, $userSolana['cuSolanaDW']);

                if (!isset($this->data['cryptoAccount']['coin_address']) || empty($this->data['cryptoAccount']['coin_address'])) {
                    $this->data['cryptoAccount']['coin_address'] = 'N/A';
                }

                //log_message('debug', 'DashboardController L199 - $cryptoAccount: ' . print_r($this->data['cryptoAccount'], true));

                if ($endpoint === 'coinSwap') {
                    $exchange = $formtype;
                    $cryptoTokens = $this->getMyMIDashboard()->getAllTokensByBlock($exchange);
                    log_message('error', 'DashboardController L485 - $cryptoTokens: ' . print_r($cryptoTokens, true));

                    $this->data['cryptoTokens'] = $cryptoTokens ?? [];
                    $this->data['cryptoPT'] = $userSolana['cuSolanaDW']['public_token'];
                }

                if ($endpoint === 'viewSwap') {
                    $this->data['cuSolanaDW'] = $userSolana['cuSolanaDW']; 
                }
            }

            $this->data['pageTitle'] = 'MyMI Transaction Model | MyMI Wallet | The Future of Finance';
            $this->commonData();
            echo view($viewPath, $this->data);
        } else {
            log_message('error', 'Failed to load content. $viewPath: ' . $viewPath . ' | Data: ' . print_r($this->data, true));
            echo "Content could not be loaded.";
        }
    }

    // Added method to process notifications if needed
    public function notifications()
    {
        $this->data['pageTitle'] = 'My Notifications | MyMI Wallet | The Future of Finance';
        $this->userAccountData();
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\Notifications', $this->data);
    }

    /**
     * 📌 Onboarding Page
     * - Displays incomplete onboarding steps
     */
    public function onboarding()
    {
        $this->commonData();
        $this->data['pageTitle'] = 'Complete Your Setup | MyMI Wallet';

        $this->data['incompleteSteps'] = $this->MyMIOnboarding->checkOnboardingStatus($this->cuID);
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Onboarding', $this->data);
    }

    public function performance()
    {
        $this->data['pageTitle'] = 'My Performance | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Performance', $this->data);
    }    
    
    // public function profile($username = null)
    // {
    //     $this->data['pageTitle'] = 'My Performance | MyMI Wallet | The Future of Finance';
    //     $this->commonData();
    //     return $this->renderTheme('App\Modules\User\Views\Dashboard\Performance', $this->data);
    // }

    public function profile($cuUsername = null)
    {
        if ($cuUsername === null) {
            return redirect()->to('/Profile')->with('error', 'No username provided.');
        }
    
        // Fetch user data based on the username
        $userInfo = $this->getMyMIUser()->getUserByUsername($cuUsername);
        $userID = $userInfo['id'];
        $userProjects = $this->getMyMIProjects()->getUserProjects($userID); 
        $totalActiveUsers = $this->getMyMIAnalytics()->reporting()['totalActiveUsers']; 

        log_message('debug', 'DashboardController L344 - $totalActiveUsers: ' . (print_r($totalActiveUsers, true)));
    
        if (!$userInfo) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException("Profile for user '{$cuUsername}' not found.");
        } else {
            log_message('debug', 'DashboardController L331 - Profile Method: Username = ' . $cuUsername);
        }
    
        $this->data['pageTitle'] = "{$cuUsername} | Profile at MyMI Wallet | The Future of Finance";
        $this->commonData();
        $this->data['cuUsername'] = $cuUsername;
        $this->data['userProjects'] = $userProjects;
        $this->data['totalActiveUsers'] = $totalActiveUsers; 
        $this->data['userInfo'] = $userInfo; // Add user data for the view
        
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Profile', $this->data);
        // return $this->renderTheme('App\Modules\User\Views\Dashboard\Performance', $this->data);
    }
    
    public function schedule()
    {
        $this->data['pageTitle'] = 'My Schedule | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Schedule', $this->data);
    }
    
    private function scrapeAndGenerateContent($accountid, $category, $platform)
    {
        // Function to scrape and generate content
        $generatedData = [];
        if ($category === 'Solana') {
            $this->solanaModel = new SolanaModel();
            $tokenInfo = $this->solanaModel->getTokenInfoByID($accountid);
        } else {
            $tokenInfo = [];
        }

        if (!empty($tokenInfo)) {
            $this->MyMIMarketing = new MyMIMarketing();
            try {
                $scrapedData = $this->getMyMIMarketing()->scrapeTokenContent($tokenInfo);
            } catch (\Exception $e) {
                log_message('critical', 'Error scraping token content: ' . $e->getMessage());
            }

            try {
                if (!empty($scrapedData)) {
                    $generatedData = $this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData, $platform);
                }
            } catch (\Exception $e) {
                log_message('critical', 'Error generating content: ' . $e->getMessage());
            }
        }

        return $generatedData;
    }

    public function search()
    {
        $keyword = $this->request->getVar('q');
        $this->data['pageTitle'] = 'Search Results';
        $this->data['searchResults'] = $this->dashboardModel->searchLinks($keyword);
        return $this->renderTheme('App\Modules\User\Views\Dashboard\SearchResults', $this->data);
    }

    public function security()
    {
        $this->data['pageTitle'] = 'My Security | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\Security', $this->data);
    }

    public function socialMedia()
    {
        $this->data['pageTitle'] = 'My Social Media | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Account\Social', $this->data);
    }

    public function support()
    {
        $this->data['pageTitle'] = 'My Support | MyMI Wallet | The Future of Finance';
        $this->commonData();
        return $this->renderTheme('App\Modules\User\Views\Dashboard\Support', $this->data);
    }

    // Refactored userAccountData to ensure all account-related data is captured
    private function userAccountData() {
        $userInfo = $this->getMyMIUser()->getUserInformation($this->cuID);
        $this->data['cuFirstName'] = $userInfo['cuFirstName'] ?? '';
        $this->data['cuMiddleName'] = $userInfo['cuMiddleName'] ?? '';
        $this->data['cuLastName'] = $userInfo['cuLastName'] ?? '';
        $this->data['cuNameSuffix'] = $userInfo['cuNameSuffix'] ?? '';
        $this->data['cuPhone'] = $userInfo['cuPhone'] ?? '';
        $this->data['cuDOB'] = $userInfo['cuDOB'] ?? '';
        $this->data['cuMailingAddress'] = $userInfo['cuMailingAddress'] ?? '';

        if ($this->siteSettings->solanaExchange === 1) {
            $exchange = 'Solana';
            $this->data['cuSolanaDW'] = $this->getMyMIDashboard()->getCryptoAccount($this->cuID, $exchange)['accountInfo'] ?? [];
        }
    }
}
?>
<?php

namespace App\Modules\APIs\Controllers;

use CodeIgniter\API\ResponseTrait;
use CodeIgniter\Controller;
use App\Libraries\{BaseLoader, MyMIMarketing};
use App\Services\MarketingService;
use App\Models\MarketingModel;

class MarketingController extends Controller
{
    use ResponseTrait;


    protected $MyMIMarketing;
    protected $marketingService;
    protected $marketingModel;

    public function __construct()
    {
        $this->MyMIMarketing        = new MyMIMarketing();
        // $this->marketingService      = new MarketingService();
        $this->marketingModel       = new MarketingModel();
        $this->response             = service('response'); // ✅ Fixes setContentType() on null

    }

    public function approveBufferItem($id)
    {
        $record = $this->marketingModel->findBufferItem($id);
        if (!$record) return $this->failNotFound("Record not found.");
    
        $this->marketingModel->updateBufferItem($id, ['status' => 'approved']);
    
        $posts = $this->MyMIMarketing->generateSocialPost($record);
        $this->MyMIMarketing->distributeContent('discord', $posts['discord']);
        $this->MyMIMarketing->distributeContent('linkedin', $posts['linkedin']);
    
        return ['status' => 'success', 'message' => 'Content approved & promoted!'];
    }   
    
    public function cronAnalyzeContent()
    {
        log_message('debug', '🧠 Starting content digest analysis...');
        $this->getMyMIMarketing()->generateFromTempScraper(5);
        return ['status' => 'success', 'message' => 'Content analysis completed.'];
    }

    public function cronAutoPublishGroupedDigest()
    {
        try {
            log_message('info', '🕗 CRON: Starting daily grouped digest auto-publisher...');
    
            $grouped = $this->getMyMIMarketing()->groupSimilarSummariesByCosine();
            $labeled = $this->getMyMIMarketing()->generateGroupLabelsFromTFIDF($grouped['grouped'] ?? []);
            $drafts = $this->getMyMIMarketing()->generateGroupedBlogAndEmailDrafts($labeled);
    
            $campaignId = $this->getMyMIMarketing()->storeGroupedContentDrafts($labeled, $drafts);
    
            // Auto distribute
            $this->getMyMIMarketing()->distributeGroupedContent($campaignId);

            // ✅ Notify Moderators
            $labels = implode(', ', array_keys($labeled));
            $summary = strip_tags(substr($drafts['email'], 0, 300));
            $this->getMyMIMarketing()->notifyModerators([
                'id' => $campaignId,
                'keyword' => 'GroupedDigest',
                'summary' => $summary,
                'platforms' => json_encode([
                    'discord' => true,
                    'linkedin' => true,
                    'email' => true
                ])
            ]);

    
            return $this->respond([
                'status' => 'success',
                'message' => "✅ Daily digest campaign #{$campaignId} published.",
                'labels' => $labels
            ]);
        } catch (\Throwable $e) {
            log_message('error', '[CRON] ❌ cronAutoPublishGroupedDigest failed: ' . $e->getMessage());
            return $this->failServerError("CRON failure: ".$e->getMessage());
        }
    }
    
    public function cronFetchAndGenerateNews()
    {
        try {
            $this->MyMIMarketing->cronFetchAndGenerateNews();
            return ['status' => 'success', 'message' => 'News fetched and generated.'];
        } catch (\Throwable $e) {
            return $this->failServerError($e->getMessage());
        }
    }

    public function cronFetchInbox()
    {
        log_message('debug', '📨 Starting inbox scrape...');
    
        try {
            $this->getMyMIMarketing()->fetchAndStoreEmails('news');
            log_message('info', '✅ Inbox scrape completed.');
        } catch (\Throwable $e) {
            log_message('error', '❌ cronFetchInbox() failed: ' . $e->getMessage());
        }
    }    
    
    public function cronFetchMarketingEmails()
    {
        log_message('info', '📬 CRON: Fetching marketing emails via inbox scrape');
        try {
            $result = $this->getMyMIMarketing()->fetchAndStoreEmails('marketing'); // or 'alerts' depending on CRON purpose
            return [
                'status' => 'success',
                'message' => 'Marketing inbox scrape completed.',
                'result' => $result
            ];
        } catch (\Throwable $e) {
            log_message('error', '❌ cronFetchMarketingEmails() failed: ' . $e->getMessage());
            return $this->failServerError('Inbox fetch failed: ' . $e->getMessage());
        }
    }   

    public function distributeHighScoreContent()
    {
        try {
            $this->getMyMIMarketing()->autoSendToZapier(80);
            return ['status' => 'success', 'message' => 'Top scoring posts sent to Zapier'];
        } catch (\Throwable $e) {
            return $this->failServerError($e->getMessage());
        }
    }
    
    // In app/Modules/APIs/Controllers/ManagementController.php
    public function exportBufferPosts()
    {
        helper('text');
        $model = new \App\Models\MarketingModel();
        $bufferPosts = $model->fetchBufferPostsForScoring(); // Can include all or filter 'Pending'

        $filename = 'buffer-posts-' . date('Ymd_His') . '.csv';
        $csvHeader = ['ID', 'Keyword', 'Summary', 'Score', 'Tag Score', 'Category', 'Status', 'Created At'];

        $csvData = [$csvHeader];
        foreach ($bufferPosts as $post) {
            $csvData[] = [
                $post['id'],
                $post['keyword'],
                word_limiter(strip_tags($post['summary']), 10),
                $post['score'],
                $post['tag_score'],
                $post['category'],
                $post['status'],
                $post['created_at'] ?? '',
            ];
        }

        header('Content-Type: text/csv');
        header("Content-Disposition: attachment; filename=\"$filename\"");

        $f = fopen('php://output', 'w');
        foreach ($csvData as $row) {
            fputcsv($f, $row);
        }
        fclose($f);
        exit;
    }

    public function exportGroupedSummariesCSV()
    {
        $groupedData = $this->groupSimilarSummariesByCosine();
    
        if (!is_array($groupedData) || empty($groupedData['grouped'])) {
            return $this->fail('No grouped summaries available for export.');
        }
    
        helper('text');
        $filename = 'grouped_summaries_' . date('Ymd_His') . '.csv';
    
        header('Content-Type: text/csv');
        header("Content-Disposition: attachment; filename=\"$filename\"");
    
        $output = fopen('php://output', 'w');
        fputcsv($output, ['Group #', 'Title', 'Summary', 'Keywords']);
    
        foreach ($groupedData['grouped'] as $groupIndex => $group) {
            foreach ($group as $summary) {
                fputcsv($output, [
                    $groupIndex + 1,
                    word_limiter(strip_tags($summary['title'] ?? ''), 8),
                    word_limiter(strip_tags($summary['summary'] ?? ''), 20),
                    implode(', ', json_decode($summary['keywords'] ?? '[]', true))
                ]);
            }
        }
    
        fclose($output);
        exit;
    }
    
    public function fetchBufferPaginated()
    {
        $request = service('request');
        $page = (int) $request->getGet('page') ?? 1;
        $limit = (int) $request->getGet('limit') ?? 20;
        $keyword = $request->getGet('keyword');
        $category = $request->getGet('category');
        $minTagScore = $request->getGet('min_tag_score') ?? 0;
        $onlySuggested = (bool) $request->getGet('only_suggested');
    
        $result = $this->marketingModel->fetchBufferPaginatedWithFilters([
            'page'           => $page,
            'limit'          => $limit,
            'keyword'        => $keyword,
            'category'       => $category,
            'min_tag_score'  => $minTagScore,
            'only_suggested' => $onlySuggested
        ]);
    
        return [
            'status'     => 'success',
            'data'       => $result['data'],
            'pagination' => $result['pagination']
        ];
    }    
    
    public function fetchFinalizedContent()
    {
        $content = $this->getMyMIMarketing()->getFinalizedContent(10);
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\finalizedSummaries', ['finalizedContent' => $content]);
    }
    
    // public function fetchGeneratedSummaries()
    // {
    //     try {
    //         $summaries = $this->marketingModel->getRecentPosts(5); // You can change 5 to a config or param
    //         return $this->renderTheme('App\Modules\Management\Views\Marketing\partials\generatedSummaries', [
    //             'summaries' => $summaries,
    //         ]);
    //     } catch (\Throwable $e) {
    //         log_message('error', '❌ fetchGeneratedSummaries Error: ' . $e->getMessage());
    //         return $this->failServerError($e->getMessage());
    //     }
    // }    
    
    public function fetchGeneratedSummaries()
    {
        try {
            $summaries = $this->marketingModel->getRecentPosts(5);
            return [
                'status' => 'success',
                'summaries' => $summaries,
            ];
        } catch (\Throwable $e) {
            log_message('error', '❌ fetchGeneratedSummaries Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function fetchGeneratedSummariesBlock()
    {
        try {
            helper('text');

            // Try to fetch today's summaries
            $todaysStory = $this->marketingModel->getTodaysStory();

            // If none found, fallback to yesterday
            if (empty($todaysStory)) {
                $yesterday = $this->marketingModel->getYesterdaysStory();
            }

            return $this->renderTheme('App\Modules\Management\Views\Marketing\resources\generatedSummariesBlock', [
                'todaysStory' => $todaysStory,
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ Failed to fetch summaries block: ' . $e->getMessage());
            return $this->failServerError('Unable to refresh summaries.');
        }
    }

    public function fetchGeneratedSummariesJson()
    {
        try {
            $todaysStory = $this->marketingModel->getLatestGeneratedSummaries(20);
    
            if (empty($todaysStory)) {
                return $this->respond([
                    'status' => 'error',
                    'message' => 'No summaries available.',
                ], 404);
            }
    
            $summaries = array_map(function($summary) {
                return [
                    'id' => $summary->id,
                    'title' => $summary->title,
                    'summary' => $summary->summary,
                    'keywords' => $summary->keywords,
                    'cta' => $summary->cta ?? null,
                    'created_at' => $summary->created_on,
                ];
            }, $todaysStory);
    
            return $this->respond([
                'status' => 'success',
                'summaries' => $summaries,
            ]);
        } catch (\Throwable $e) {
            log_message('error', 'fetchGeneratedSummariesJson() failed: '.$e->getMessage());
            return $this->respond([
                'status' => 'error',
                'message' => 'Server Error: Unable to fetch summaries.',
            ], 500);
        }
    }    
    
    public function generateContentFromScraper()
    {
        try {
            $this->getMyMIMarketing()->generateFromTempScraper(25);
            return $this->respond(['status' => 'success', 'message' => 'Content generated from scraper.']);
        } catch (\Throwable $e) {
            log_message('error', '❌ generateContentFromScraper Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function generateContentDigestFromStored()
    {
        $records = $this->marketingModel->getRecentUnprocessedTempEmails(5);
        $processedTitles = [];
    
        foreach ($records as $record) {
            $recordId = $record['id'] ?? 0;
            try {
                if (empty($record['title'])) {
                    $record['title'] = 'Fallback Title - ID ' . $recordId;
                }
    
                $insertResult = $this->getMyMIMarketing()->generateContentAndInsert($record);
                if ($insertResult) {
                    $this->marketingModel->markTempScraperProcessed($recordId);
                    $processedTitles[] = $insertResult['title'];
                    log_message('info', "✅ Inserted content for ID {$recordId}");
                } else {
                    log_message('warning', "⚠️ Skipped record ID {$recordId} — summary not stored");
                }
            } catch (\Throwable $e) {
                log_message('error', "❌ Exception on record ID {$recordId}: {$e->getMessage()}");
            }
        }
    
        return $this->respond(['status' => 'complete', 'processed_titles' => $processedTitles]);
    }
    
    public function generateDailyContentDigest()
    {
        @ini_set('memory_limit', '768M');
    
        $records = $this->marketingModel->getValidUnprocessedEmails(10); // Slightly larger pool for filtering
        $processed = [];
    
        foreach ($records as $record) {
            $recordId = $record['id'] ?? null;
            if (!$recordId || !is_array($record)) {
                log_message('error', '❌ Skipped invalid record: ' . print_r($record, true));
                continue;
            }
    
            try {
                log_message('debug', '🔍 [Digest] Processing record ID: ' . $recordId);
    
                $result = $this->getMyMIMarketing()->generateContentFromRaw($record);
                if (!$result) {
                    log_message('warning', "⚠️ [Digest] No summary generated for ID {$recordId}");
                    continue;
                }
    
                $inserted = $this->marketingModel->insertFinalScraper($record, [
                    'summary' => $result['summary'],
                    'keywords' => $result['keywords'] ?? [],
                    'posts' => $result['posts'] ?? [],
                    'category' => $result['category'] ?? 'News',
                ]);
    
                if ($inserted) {
                    $this->marketingModel->markTempScraperProcessed($recordId);
                    $processed[] = $result['headline'] ?? '(untitled)';
                    log_message('info', "✅ [Digest] Inserted final summary for ID {$recordId}");
                } else {
                    log_message('warning', "⚠️ [Digest] Duplicate or failed insert for ID {$recordId}");
                }
            } catch (\Throwable $e) {
                log_message('error', "❌ [Digest Exception] ID {$recordId}: " . $e->getMessage());
            }
        }
    
        if (empty($processed)) {
            return $this->respond(['status' => 'warning', 'message' => 'No summaries were inserted.'], 200);
        }
    
        return $this->respond(['status' => 'success', 'inserted' => $processed], 200);
    }    
    
    public function generateLivePreview()
    {
        $data = $this->request->getJSON(true);
        $summary = $data['summary'] ?? '';
        $keywords = array_map('trim', explode(',', $data['keywords'] ?? ''));
    
        if (strlen($summary) < 50) {
            return $this->fail('Summary too short to generate previews.');
        }
    
        try {
            $posts = $this->getMyMIMarketing()->generatePlatformContent($summary, $keywords);
            return $this->respond(['status' => 'success', 'posts' => $posts]);
        } catch (\Throwable $e) {
            log_message('error', 'generateLivePreview() error: '.$e->getMessage());
            return $this->failServerError('Failed to generate preview.');
        }
    }
    
    public function generatePostsFromSummary($summaryId = null)
    {
        try {
            $summary = $this->marketingModel->find($summaryId);
            if (empty($summary['summary']) || strlen(strip_tags($summary['summary'])) < 50) {
                return $this->fail('Summary is invalid or too short for post generation.');
            }
            
            if (!$summary) {
                return $this->failNotFound('Summary not found.');
            }
    
            // ✅ Decode raw content
            $decodedTitleRaw    = $summary['title'] ?? '';
            $decodedSummaryRaw  = $summary['summary'] ?? '';
    
            // ✅ Apply decoding and cleaning
            $decodedTitle       = $this->getMyMIMarketing()->decodeMimeHeaderSafe($decodedTitleRaw);           
            $cleanTitle         = preg_replace('/[^\p{L}\p{N}\s:;\-]/u', '', $decodedTitle);
            $decodedSummary     = quoted_printable_decode($summary['summary'] ?? '');
            $decodedSummary     = preg_replace('/=\r?\n/', '', $decodedSummary);
            $decodedSummary     = html_entity_decode($decodedSummary, ENT_QUOTES | ENT_HTML5, 'UTF-8');
            $cleanedSummary     = strip_tags($decodedSummary);
            
            if (empty($cleanedSummary) || strlen($cleanedSummary) < 100) {
                log_message('error', "🛑 Summary content too short or malformed for summary ID {$summaryId}");
                return $this->failServerError('Malformed summary data.');
            }
            // ✅ Extract keywords & posts
            $keywords           = $this->MyMIMarketing->extractKeywords($cleanedSummary);
            $posts              = $this->MyMIMarketing->generateSocialPosts($cleanedSummary, $keywords);
    
            // ✅ Save posts back to DB
            $this->marketingModel->update($summaryId, [
                'keywords'      => json_encode($keywords),
                'posts'         => json_encode($posts),
            ]);
    
            // ✅ Return both raw and cleaned for comparison/debugging
            return $this->respond([
                'status'   => 'success',
                'message'  => 'Content generated and stored successfully.',
                'original' => $summary,
                'cleaned'  => [
                    'title'    => $cleanTitle,
                    'summary'  => $cleanedSummary,
                    'keywords' => $keywords,
                    'posts'    => $posts,
                ],
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ generatePostsFromSummary() failed: ' . $e->getMessage());
            return $this->failServerError('Error generating posts.');
        }
    }
    
    public function generateScheduledPosts()
    {
        helper('text');
        $marketingModel = new MarketingModel();
        $marketing = new MyMIMarketing();
    
        // Get 3 highest-scoring posts not promoted yet
        $buffer = $marketingModel->getTopBufferPosts(3, 6.5);
    
        if (empty($buffer)) {
            return $this->respond(['status' => 'empty', 'message' => 'No queued posts available.']);
        }
    
        foreach ($buffer as $post) {
            $marketingModel->updateBufferItem($post['id'], ['status' => 'promoted']);
            $generated = $marketing->generateSocialPost($post);
    
            if (json_decode($post['platforms'])->discord ?? false) {
                $marketing->distributeContent('discord', $generated['discord']);
            }
    
            if (json_decode($post['platforms'])->linkedin ?? false) {
                $marketing->distributeContent('linkedin', $generated['linkedin']);
            }
    
            $marketing->notifyModerators($post); // ✅ Notifications
        }
    
        return $this->respond(['status' => 'success', 'message' => 'Posts published!']);
    }
    
    public function generateThreadFromSummary($id)
    {
        $post = $this->marketingModel->findFinalizedById($id);
    
        if (!$post || empty($post['summary'])) {
            return $this->failNotFound('Post not found or invalid.');
        }
    
        $summary = strip_tags($post['summary']);
        $sentences = $this->getMyMIMarketing()->splitIntoSentences($summary);
        
        $thread = [];
        $chunk = '';
        foreach ($sentences as $sentence) {
            if (strlen($chunk . ' ' . $sentence) < 250) {
                $chunk .= ' ' . $sentence;
            } else {
                $thread[] = trim($chunk);
                $chunk = $sentence;
            }
        }
        if (!empty($chunk)) {
            $thread[] = trim($chunk);
        }
    
        return $this->respond([
            'status' => 'success',
            'thread' => $thread,
            'title' => $post['title'] ?? 'Untitled',
        ]);
    }
    
    public function generateVoiceScriptManually() {
        try {
            log_message('info', '🎤 generateVoiceScriptManually() triggered.');
            $script = $this->getMyMIMarketing()->generateVoiceoverScript();
            return $this->response->setJSON(['status' => 'success', 'script' => $script]);
        } catch (\Throwable $e) {
            log_message('error', '❌ Error in generateVoiceScriptManually: ' . $e->getMessage());
            return $this->response->setJSON(['status' => 'error', 'message' => $e->getMessage()]);
        }
    }
    
    public function getTopKeywordChart($summaryId)
    {
        $summary = $this->marketingModel->find($summaryId);
        if (!$summary || empty($summary['summary'])) {
            return $this->failNotFound("Summary not found or content is missing.");
        }
    
        $keywords = $this->MyMIMarketing->getTopKeywordScores($summary['summary'], 10);
    
        if (empty($keywords)) {
            return $this->fail("No keywords could be extracted.");
        }
    
        return $this->respond([
            'status' => 'success',
            'labels' => array_keys($keywords),
            'scores' => array_values($keywords),
        ]);
    }
    
    public function groupSimilarSummariesByCosine($threshold = 0.75)
    {
        try {
            $records = $this->marketingModel->getFinalizedContent(25);
            if (empty($records)) {
                return $this->respond(['status' => 'empty', 'message' => 'No finalized summaries found.']);
            }
    
            $tokenizer = new \NlpTools\Tokenizers\WhitespaceTokenizer();
            $cosine = new \NlpTools\Similarity\CosineSimilarity();
    
            $textMap = [];
            $vectorMap = [];
            $groups = [];
    
            // Tokenize and store vectors
            foreach ($records as $record) {
                $id = $record['id'];
                $text = strtolower(strip_tags($record['summary']));
                $tokens = $tokenizer->tokenize($text);
                $textMap[$id] = $text;
                $vectorMap[$id] = array_count_values($tokens);
            }
    
            // Grouping logic
            $visited = [];
            foreach ($records as $record) {
                $id = $record['id'];
                if (isset($visited[$id])) continue;
    
                $group = [$record];
                $visited[$id] = true;
    
                foreach ($records as $other) {
                    $otherId = $other['id'];
                    if ($id === $otherId || isset($visited[$otherId])) continue;
    
                    $sim = $cosine->similarity($vectorMap[$id], $vectorMap[$otherId]);
                    if ($sim >= $threshold) {
                        $group[] = $other;
                        $visited[$otherId] = true;
                    }
                }
    
                $groups[] = $group;
            }
    
            return $this->respond(['status' => 'success', 'grouped' => $groups]);
        } catch (\Throwable $e) {
            log_message('error', '❌ groupSimilarSummariesByCosine() failed: ' . $e->getMessage());
            return $this->failServerError("Error grouping summaries: " . $e->getMessage());
        }
    }
    
    public function massResendActivationEmails()
    {
        $userModel = new \App\Models\UserModel();
        $users     = $userModel->getPendingActivationUsers();
        $activator = service('activator');
        $success   = 0;
        $failure   = 0;

        foreach ($users as $user) {
            if ($activator->send($user)) {
                $success++;
            } else {
                $failure++;
            }
        }

        return $this->respond([
            'status'  => 'success',
            'message' => "$success emails sent, $failure failed."
        ]);
    }

    public function monitorKeywordsAndScrape()
    {
        log_message('info', '🧠 Keyword Monitor Started');
    
        // Get top keywords from watchlists, tickers, or predefined list
        $keywords = $this->getMyMIMarketing()->getKeywordCandidates();
    
        if (empty($keywords)) {
            return $this->respond(['status' => 'no_keywords']);
        }
    
        $results = [];
        foreach ($keywords as $keyword) {
            try {
                $scrapedData = $this->getMyMIMarketing()->scrapeGoogleSearch($keyword);
                if (!empty($scrapedData)) {
                    $summary = $this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData, 'generic');
                    if ($summary) {
                        $score = $this->getMyMIMarketing()->scoreKeywordRelevance($keyword, $summary);
                    
                        $results[] = [
                            'keyword' => $keyword,
                            'summary' => $summary,
                            'score'   => $score
                        ];
                    
                        // Save with score to the database (optional)
                        $this->marketingModel->storeFinalMarketingContent([
                            'source_id' => null,
                            'title'     => "Keyword: $keyword",
                            'summary'   => $summary,
                            'keywords'  => $keyword,
                            'score'     => $score,
                            'created_at'=> date('Y-m-d H:i:s')
                        ]);
                    }
                    
                }
            } catch (\Throwable $e) {
                log_message('error', "❌ Failed keyword scrape for {$keyword}: " . $e->getMessage());
            }
        }
    
        return $this->respond(['status' => 'complete', 'processed' => $results]);
    }

    public function processMarketingTempEmails($limit = 5, $mode = 'daily', $id = null)
    {
        try {
            log_message('debug', "🧠 Running unified email processor with mode={$mode}, limit={$limit}, id={$id}");
    
            if ($id) {
                // Single record (like testGenerateFromTempEmail)
                $record = $this->marketingModel->getEmailRecordById($id);
                if (!$record || empty($record['content'])) {
                    return $this->failNotFound("No valid temp email record found for ID {$id}");
                }
    
                $cleanText = strip_tags($record['content']);
                $summary = $this->getMyMIMarketing()->summarizeText($cleanText);
                $keywords = $this->getMyMIMarketing()->extractKeywords($cleanText);
    
                if (empty($summary) || empty($keywords)) {
                    return $this->fail("Failed to generate summary or keywords for record ID {$id}");
                }
    
                $testPosts = [
                    'discord'  => "💬 *{$record['title']}*: {$summary} #".implode(' #', $keywords),
                    'linkedin' => "📢 {$record['title']} — {$summary}",
                    'email'    => "Subject: {$record['title']}\n\n{$summary}",
                    'x'        => substr($summary, 0, 250).'...'
                ];
    
                $generated = [
                    'summary'  => $summary,
                    'keywords' => $keywords,
                    'posts'    => $testPosts
                ];
    
                $this->marketingModel->insertFinalScraper($record, $generated);
                $this->marketingModel->markTempScraperProcessed($id);
    
                return $this->respond([
                    'status'   => 'success',
                    'message'  => "✅ Test record stored for ID {$id}",
                    'summary'  => $summary,
                    'keywords' => $keywords,
                    'posts'    => $testPosts
                ]);
            }
    
            // Batch mode (like daily or backfill)
            $records = ($mode === 'backfill')
                ? $this->marketingModel->getOlderUnprocessedEmails($limit)
                : $this->marketingModel->getValidUnprocessedEmails($limit);
    
            $results = [];
            foreach ($records as $record) {
                $recordId = $record['id'] ?? 0;
                if (empty($record['title'])) {
                    $record['title'] = "Fallback Title - ID {$recordId}";
                }
    
                try {
                    $insert = $this->getMyMIMarketing()->generateContentAndInsert($record);
                    if ($insert) {
                        $this->marketingModel->markTempScraperProcessed($recordId);
                        log_message('info', "✅ Inserted record ID {$recordId}");
                        $results[] = $insert['title'];
                    } else {
                        log_message('warning', "⚠️ Skipped ID {$recordId} — No summary generated.");
                    }
                } catch (\Throwable $e) {
                    log_message('error', "❌ Exception on ID {$recordId}: ".$e->getMessage());
                }
            }
    
            return $this->respond([
                'status'   => 'success',
                'mode'     => $mode,
                'inserted' => $results
            ]);
        } catch (\Throwable $e) {
            return $this->failServerError("🔥 Unified content processor failed: " . $e->getMessage());
        }
    }

    public function publishGroupedContentDraft()
    {
        try {
            $grouped = $this->getMyMIMarketing()->groupSimilarSummariesByCosine();
            $labeled = $this->getMyMIMarketing()->generateGroupLabelsFromTFIDF($grouped['grouped'] ?? []);
            $drafts = $this->getMyMIMarketing()->generateGroupedBlogAndEmailDrafts($labeled);
    
            $campaignId = $this->getMyMIMarketing()->storeGroupedContentDrafts($labeled, $drafts);
    
            // Trigger social media and Zapier publishing
            $this->getMyMIMarketing()->distributeGroupedContent($campaignId);
    
            return $this->respond([
                'status' => 'success',
                'message' => "Content campaign #{$campaignId} published and distributed."
            ]);
    
        } catch (\Throwable $e) {
            log_message('error', '❌ publishGroupedContentDraft() failed: ' . $e->getMessage());
            return $this->failServerError("Error publishing grouped content: " . $e->getMessage());
        }
    }

    public function rankBufferPostsDaily()
    {
        $marketingModel = new MarketingModel();
        $marketing = new MyMIMarketing();
        $threshold = getenv('MARKETING_TFIDF_THRESHOLD') ?: 7.5;
    
        $pendingPosts = $marketingModel->getPendingBufferItems();
    
        foreach ($pendingPosts as $post) {
            $scoreData = $marketing->getTopKeywordScores([
                'summary' => $post['summary'],
            ]);
    
            $update = [
                'score'        => $scoreData['score'] ?? 0,
                'tag_score'    => $scoreData['tag_score'] ?? 0,
                'tfidf_score'  => $scoreData['tfidf_score'] ?? 0,
                'auto_suggest' => ($scoreData['tfidf_score'] ?? 0) >= $threshold ? 1 : 0,
            ];
    
            $marketingModel->updateBufferItem($post['id'], $update);
        }
    
        return $this->respond(['status' => 'success', 'message' => 'Buffer ranks updated.']);
    }
    
    public function rejectBufferItem($id)
    {
        $record = $this->marketingModel->findBufferItem($id);
        if (!$record) return $this->failNotFound("Record not found.");
        
        $this->marketingModel->updateBufferItem($id, ['status' => 'rejected']);
        return $this->respond(['status' => 'success', 'message' => 'Content rejected.']);
    } 

    public function reprocessIncompleteEmails()
    {
        try {
            log_message('info', '[🔄 Backfill] Starting backfill for unprocessed temp emails...');
            $records = $this->marketingModel->getIncompleteSummaries(50);
            $processed = 0;
    
            foreach ($records as $record) {
                $summary = $this->MyMIMarketing->generateContentFromRaw((array) $record);
                if ($summary && strlen(trim($summary['summary'] ?? '')) > 20) {
                    $this->marketingModel->insertFinalScraper($record, $summary);
                    $processed++;
                }
            }
    
            return $this->respond([
                'status' => 'success',
                'processed' => $processed,
                'message' => "✅ Reprocessed {$processed} incomplete summaries."
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ reprocessIncompleteEmails() failed: ' . $e->getMessage());
            return $this->failServerError('Reprocessing failed: ' . $e->getMessage());
        }
    }
    
    public function runBackfillForTempEmails()
    {
        try {
            log_message('info', '[🔄 Backfill] Starting backfill for unprocessed temp emails...');
            $unprocessedRecords = $this->marketingModel
                ->where('status', null)
                ->orWhere('status', '')
                ->findAll(25); // Limit for safety; increase for batch
    
            if (empty($unprocessedRecords)) {
                return $this->respond(['status' => 'complete', 'message' => 'No unprocessed records found.']);
            }
    
            $processedTitles = [];
            foreach ($unprocessedRecords as $record) {
                try {
                    $result = $this->MyMIMarketing->generateContentAndInsert($record);
                    if ($result) {
                        $this->marketingModel->markTempScraperProcessed($record['id']);
                        $processedTitles[] = $result['title'];
                    }
                } catch (\Throwable $e) {
                    log_message('error', '[❌ Backfill Error] ID '.$record['id'].' — '.$e->getMessage());
                }
            }
    
            return $this->respond(['status' => 'success', 'processed' => $processedTitles]);
        } catch (\Throwable $e) {
            return $this->failServerError('[🔥 Backfill Failure] '.$e->getMessage());
        }
    }
    
    public function schedulePost($id, $platform, $datetime)
    {
        $this->marketingModel->updateBufferPostStatus($id, 'scheduled', [
            'platform' => $platform,
            'scheduled_date' => $datetime
        ]);
        return $this->respond(['status' => 'success', 'message' => "Scheduled for {$platform} at {$datetime}"]);
    }
    
    public function shareGroupedSummaries($platform)
    {
        try {
            $grouped = $this->groupSimilarSummariesByCosine();
            if (empty($grouped['grouped'])) {
                return $this->fail('No grouped summaries found for sharing.');
            }
    
            $count = 0;
            foreach ($grouped['grouped'] as $group) {
                if (isset($group[0]['summary'])) {
                    $headline = $group[0]['title'] ?? 'Grouped Summary';
                    $summaryBlock = implode("\n\n", array_map(fn($s) => '• ' . word_limiter(strip_tags($s['summary']), 30), $group));
                    $postText = "**{$headline}**\n\n" . $summaryBlock;
    
                    $this->MyMIMarketing->distributeContent($platform, $postText);
                    $count++;
                }
            }
    
            return $this->respond([
                'status' => 'success',
                'message' => "Shared {$count} grouped summaries to {$platform}."
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ shareGroupedSummaries failed: ' . $e->getMessage());
            return $this->failServerError("Failed to share summaries.");
        }
    }
    
    public function testGenerateDailyDigest()
    {
        return $this->generateDailyContentDigest(); // simple proxy
    }
    
    public function testGenerateFromTempEmail($id)
    {
        try {
            helper('text');
    
            $record = $this->marketingModel->getEmailRecordById($id);
    
            if (!$record || empty($record['content'])) {
                return $this->failNotFound("No valid temp email record found for ID {$id}");
            }
    
            log_message('info', "🧪 Starting test content generation for temp record ID: {$id}");
    
            // STEP 1: Clean & summarize
            $cleanText = strip_tags($record['content']);
            $summary  = $this->getMyMIMarketing()->summarizeText($cleanText);
            $summary  = quoted_printable_decode($summary);
            $summary  = mb_convert_encoding($summary, 'UTF-8', 'UTF-8');
            $keywords  = $this->getMyMIMarketing()->extractKeywords($cleanText);
    
            if (empty($summary) || empty($keywords)) {
                return $this->fail("Failed to generate summary or keywords for record ID {$id}");
            }
    
            // STEP 2: Generate test content for each platform
            // Decode and sanitize title
            $decodedTitleRaw = $record['title'] ?? '';
            $decodedTitle = $this->getMyMIMarketing()->decodeMimeHeaderSafe($decodedTitleRaw);
            $cleanTitle = preg_replace('/[^\p{L}\p{N}\s:;\-]/u', '', $decodedTitle);

            // Build sanitized post formats
            $testPosts = [
                'discord' => "💬 *{$cleanTitle}*: {$summary} #" . implode(' #', $keywords),
                'linkedin' => "📢 {$cleanTitle} — {$summary}",
                'email' => "Subject: {$cleanTitle}\n\n{$summary}",
                'x' => substr($summary, 0, 250) . '...',
            ];
    
            // STEP 3: Package results
            $generated = [
                'summary'  => $summary,
                'keywords' => $keywords,
                'posts'    => $testPosts
            ];
    
            // STEP 4: Save test result to bf_marketing_scraper
            $this->marketingModel->insertFinalScraper($record, $generated);
            $this->marketingModel->markTempScraperProcessed($id);
    
            log_message('info', "✅ Test record stored in bf_marketing_scraper for temp ID {$id}");
    
            return $this->respond([
                'status'   => 'success',
                'message'  => "Content generated and stored successfully.",
                'summary'  => $summary,
                'keywords' => $keywords,
                'posts'    => $testPosts
            ]);
    
        } catch (\Throwable $e) {
            log_message('critical', "❌ testGenerateFromTempEmail({$id}) failed: " . $e->getMessage());
            return $this->failServerError("An error occurred: " . $e->getMessage());
        }
    }
    
    public function testGenerateSummarizerHarness()
    {
        $this->MyMIMarketing->testMarketingSummarizer(10);
        return $this->respond(['status' => 'success', 'message' => 'Ran testMarketingSummarizer()']);
    }
    
    public function testTfIdfEdgeCases()
    {
        $cases = [
            'Empty String'     => '',
            'Whitespace Only'  => '     ',
            'Single Word'      => 'Bitcoin',
            'HTML Only'        => '<div><p></p></div>',
            'Malformed UTF-8'  => "\xB1\x31",
            'Link-Only Spam'   => 'http://marketwatch.com https://example.com',
            'Token Noise'      => str_repeat('$$$!!!@@@###', 10),
        ];
    
        $results = [];
    
        foreach ($cases as $label => $input) {
            try {
                log_message('info', "🧪 Running TF-IDF Test Case: $label");
    
                $cleanInput = is_string($input) ? strip_tags(trim($input)) : '';
    
                if (strlen($cleanInput) < 10 || substr_count($cleanInput, ' ') < 2) {
                    log_message('debug', "⚠️ Skipping test: $label — input too short or lacks structure.");
                    $results[$label] = '[Skipped — Too short or unstructured]';
                    continue;
                }
    
                $summary = $this->MyMIMarketing->summarizeText($cleanInput);
                log_message('debug', "Result - Summary: $summary");
                $results[$label] = $summary;
    
            } catch (\Throwable $e) {
                log_message('error', "❌ $label threw error: " . $e->getMessage());
                $results[$label] = '[Error: ' . $e->getMessage() . ']';
            }
        }
    
        return $this->renderTheme('App\Modules\Management\Views\Marketing\debugTfIdfResults', [
            'results' => $results,
        ]);
    }
    
    public function timeline($topic = 'General')
    {
        $timelineView = $this->getMyMIMarketing()->createTimelineView($topic);
        return $this->response->setBody($timelineView);
    }
    
    public function triggerPostAutogenOnEmpty()
    {
        try {
            $existingPosts = $this->marketingModel
                ->where('DATE(scraped_at)', date('Y-m-d'))
                ->countAllResults();
    
            if ($existingPosts === 0) {
                log_message('debug', '[🪄 AutoGen Trigger] No posts found for today. Running fallback generator…');
                $this->marketingService->generatePostsFromTodaysSummaries();
                return $this->respond(['status' => 'success', 'message' => 'No posts found. Generated fresh content.']);
            } else {
                return $this->respond(['status' => 'success', 'message' => 'Posts already exist for today. No action taken.']);
            }
        } catch (\Throwable $e) {
            log_message('error', '[❌ AutoGen Trigger Error] ' . $e->getMessage());
            return $this->respond(['status' => 'error', 'message' => 'Failed to trigger autogen.', 'error' => $e->getMessage()]);
        }
    }    
    
    public function updateBufferScheduleInterval($id)
    {
        $data = $this->request->getJSON(true);
        $interval = (int) ($data['interval'] ?? 0);
    
        $updated = $this->marketingModel->updateBufferItem($id, [
            'schedule_interval' => $interval,
            'scheduled_at' => null // Reset current time
        ]);
    
        if ($updated) {
            return $this->respond(['status' => 'success']);
        } else {
            return $this->fail('Failed to update interval.');
        }
    }
    
    public function updateInsight()
    {
        $id = $this->request->getPost('id');
        $title = $this->request->getPost('title');
        $summary = $this->request->getPost('summary');
        $cta = $this->request->getPost('cta');
        $keywords = $this->request->getPost('keywords');
    
        if (!$id || !$summary || !$title) {
            return $this->failValidationErrors('Missing required fields.');
        }
    
        try {
            $this->marketingModel->update($id, [
                'title' => strip_tags($title),
                'summary' => strip_tags($summary),
                'cta' => strip_tags($cta),
                'keywords' => $keywords,
                'modified_on' => date('Y-m-d H:i:s'),
            ]);
            return $this->respond(['status' => 'success']);
        } catch (\Throwable $e) {
            log_message('error', 'updateInsight() failed: '.$e->getMessage());
            return $this->failServerError('Failed to save.');
        }
    }
    
    public function updatePlatformToggle($id)
    {
        $data = $this->request->getJSON(true);
        $platform = $data['platform'];
        $enabled  = $data['enabled'];
    
        $record = $this->marketingModel->find($id);
        if (!$record) {
            return $this->failNotFound("Record not found.");
        }
    
        $platforms = json_decode($record['platforms'] ?? '{}', true);
        $platforms[$platform] = $enabled;
    
        $this->marketingModel->update($id, ['platforms' => json_encode($platforms)]);
    
        return $this->respond(['status' => 'success']);
    }
    
    public function viewTimelineGrouped()
    {
        $records = $this->getMyMIMarketing()->getTimelineGroupedByTopic();
        $this->data['timeline'] = $records;
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\timelineGroupedView', $this->data);
    }
    
}
?>
<?php

namespace App\Modules\Management\Controllers;

use CodeIgniter\Controller;
use Config\Services;
use App\Config\{APIs, Auth, SiteSettings, SocialMedia};
use App\Controllers\UserController;
use App\Libraries\{BaseLoader, HtmlFormatter, MyMIAnalytics, MyMIAlerts, MyMIBudget, MyMIDashboard, MyMIExchange, MyMIMarketing, MyMIUser};
use App\Models\{AlertsModel, AnnouncementModel, InvestmentModel, ManagementModel, MarketingModel, MyMIGoldModel, SolanaModel, UserModel};
use App\Services\{DashboardService, GoalTrackingService, MarketingService, SolanaService, UserService};
use CodeIgniter\API\ResponseTrait;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use voku\helper\HtmlDomParser;

class MarketingController extends UserController
{
    use ResponseTrait;

    protected $API;
    protected $auth;
    protected $cuID;
    protected $data;
    protected $debug;
    protected $helpers = ['auth', 'form', 'url'];
    protected $logger;
    protected $request;
    protected $session;
    protected $uri;
    protected $siteSettings;
    protected $NewsEmail; 
    protected $HtmlFormatter;
    protected $MyMIAnalytics;
    protected $MyMIAlerts;
    protected $MyMIBudget;
    protected $MyMIDashboard;
    protected $MyMIExchange;
    protected $MyMIMarketing;
    protected $MyMIUser;
    protected $dashboardService; 
    protected $goalTrackingService; 
    protected $marketingService; 
    protected $solanaService; 
    protected $userService; 
    protected $alertsModel;
    protected $investmentModel;
    protected $marketingModel;
    protected $userModel;
    protected $userAccount;
    protected $userDashboard;
    protected $getBlogPosts;
    protected $departmentTasks;
    protected $marketing;
    protected $reporting;

    public function __construct()
    {
        $this->API = config('APIs');
        $this->auth = service('authentication');        
        // Get the logger instance from CodeIgniter's Services
        $this->logger = service('logger');
        $this->NewsEmail = config('NewsEmailServer');
        $this->request                              = service('request'); 
        $this->session = Services::session();
        $this->siteSettings = config('SiteSettings');
        $this->debug = $this->siteSettings->debug; 
        $this->uri                                  = $this->request->getUri(); 
        

        // Initialize UserService and pass required dependencies
        // $this->dashboardService = new DashboardService();  // This should be SolanaService, not SolonaService
        // $this->marketingService = new MarketingService();  // This should be SolanaService, not SolonaService
        // $this->goalTrackingService = new GoalTrackingService();  // This should be SolanaService, not SolonaService
        // $this->solanaService = new SolanaService();  // This should be SolanaService, not SolonaService
      
        // Load models
        $this->alertsModel = new AlertsModel();
        $this->investmentModel = new InvestmentModel();
        $this->marketingModel = new MarketingModel();
        // $this->userModel = new UserModel();

        // Load libraries
        // $this->MyMIAnalytics = new MyMIAnalytics();
        // $this->MyMIAlerts = new MyMIAlerts();
        // $this->MyMIBudget = new MyMIBudget();
        // $this->MyMIDashboard = new MyMIDashboard();
        // $this->MyMIUser = service('MyMIUser');
        // $this->HtmlFormatter = new HtmlFormatter();
        // $this->MyMIMarketing = new MyMIMarketing(); // Ensure this is correctly initialized
        // $this->marketing = $this->getMyMIMarketing()->marketing(); 

        // Load Services 
        // $this->userAccount = $this->getMyMIUser()->getUserInformation($this->cuID);
        $this->userDashboard = $this->getMyMIDashboard()->dashboardInfo($this->cuID);
        $this->departmentTasks = $this->getMyMIAnalytics()->get_department_tasks($this->uri->getSegment(2), ['Page SEO Edit']);
        $this->getBlogPosts = $this->getMyMIMarketing()->getBlogPosts();

        // Initialize UserService and pass required dependencies
        $this->cuID = $this->session->get('user_id') ?? $this->auth->id();
        if (!$this->cuID) {
            log_message('error', 'Investments ControllerFailed to retrieve valid User ID in MyMIInvestments');
            throw new \RuntimeException('User ID could not be retrieved.');
        }
        log_message('debug', "InvestmentsController: cuID initialized as {$this->cuID}");
        $this->userAccount = $this->getMyMIUser()->getUserInformation($this->cuID);
        $userBudget = $this->getMyMIBudget()->getUserBudget($this->cuID); 
        log_message('info', 'DashboardController L72 - $checkingSummary: ' . $userBudget['checkingSummary']);
        $this->data['checkingSummary'] = $userBudget['checkingSummary'];


    }

    public function commonData(): array {
        // Fetch user data via a UserService
        // if (!empty($this->getuserService()->commonData())) { 
        //     $userData = $this->getuserService()->commonData();  // Assume this service optimally fetches all user-related data
        // } else {
        //     log_message('error', 'Failed to retrieve user ID.');
        //     return redirect()->to('/login')->with('redirect_url', current_url())->send();
        // }
        $this->data = $this->data ?? [];
        // Fetch data from UserService
        $userData = $this->getuserService()->commonData(); 
        // Merge the user data with BudgetController data
        $this->data = array_merge($this->data, $userData);  
    
        // Fetch general site settings
        $this->data['siteSettings'] = $this->siteSettings;
        $this->data['beta'] = (string)$this->siteSettings->beta;
        $this->data['uri'] = $this->request->getUri();
        $this->data['date'] = $this->siteSettings->date;
        $this->data['time'] = $this->siteSettings->time;
        $this->data['hostTime'] = $this->siteSettings->hostTime;
    
        // Optimize dashboard data retrieval (use caching if necessary)
        $dashboardInfo = $this->getDashboardService()->getDashboardInfo($this->cuID);  // Batch fetch data
        $this->data['completedGoals'] = $this->getGoalTrackingService()->getCompletedGoals($this->cuID);
        $this->data['pendingGoals'] = $this->getGoalTrackingService()->getPendingGoals($this->cuID);
        $this->data['promotionalBanners'] = $dashboardInfo['promotionalBanners'];
    
        // Fetch total account balance and cache it (to avoid repeated calls)
        $userBudget = $this->getBudgetService()->getUserBudget($this->cuID);
        $this->data['totalAccountBalance'] = $userBudget['totalAccountBalance'] ?? 0;
        $this->data['totalAccountBalanceFMT'] = $userBudget['totalAccountBalanceFMT'] ?? '0.00';
        
        // Fetch Solana data (consider using a caching strategy)
        $userSolanaData = $this->getSolanaService()->getSolanaData($this->cuID);
        $this->data['cuSolanaDW'] = $userSolanaData['userSolanaWallets']['cuSolanaDW'] ?? null;
        // Ensure Solana network status exists to avoid "Undefined array key"
try {
    if (!isset($this->solanaService)) {
        $this->solanaService = service('solanaService'); // or however you DI it
    }
    $data['solanaNetworkStatus'] = $this->solanaService->getNetworkStatus();
} catch (\Throwable $e) {
    log_message('error', 'WalletsController getNetworkStatus failed: {msg}', ['msg' => $e->getMessage()]);
    $data['solanaNetworkStatus'] = [
        'healthy' => false,
        'slot'    => null,
        'version' => null,
        'error'   => $e->getMessage(),
    ];
}
        $this->data['cuSolanaTotal'] = $userSolanaData['userSolanaWallets']['cuSolanaTotal'] ?? 0;
        $this->data['cuSolanaValue'] = $userSolanaData['userSolanaWallets']['cuSolanaValue'] ?? 0;
    
        // Merge user data into the $this->data array (if not already handled by a service)
        $this->data = array_merge($this->data, $userData);
    
        // Conditionally run debug-specific logic
        if ($this->debug === 1) {
            // Add your debug logic here
        }
    }
      
    // ***STANDARD PAGES***

    public function index()
    {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
    
        // General analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
    
        // 🔁 Auto-generate if no recent posts
        $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts(5);
        if (empty($this->data['recentMarketingPosts'])) {
            log_message('info', '📭 No recent posts found. Running fallback generation...');
            $this->getMyMIMarketing()->generateFromTempScraper(5);
            $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts(25);
        }
    
        // 📅 Today's summaries (created_at = today)
        $todaysSummaries = $this->marketingModel->getTodaysGeneratedSummaries();
        log_message('debug', 'Management/MarketingController::index L182 - $todaysSummaries Array: ' . (print_r($todaysSummaries, true))); 
        $this->data['todaysStory'] = array_filter($todaysSummaries, function ($summary) {
            return isset($summary['summary']) && strlen(trim($summary['summary'])) > 10;
        });
        
        // 📦 All recent summaries (used for buffer/preview blocks)
        $this->data['generatedSummaries'] = $this->marketingModel->getLatestGeneratedSummaries(25);
        $this->data['finalizedContent'] = $this->getMyMIMarketing()->finalizedContent();
        $this->data['marketingBuffer'] = $this->marketingModel->getMarketingBuffer();
    
        // 👇 Optional: baseline post creation from today’s story (if you want to enforce it)
        if (empty($this->data['todaysStory'])) {
            log_message('info', '📅 No content generated today. Triggering summary fallback...');
            $this->getMyMIMarketing()->generateFromTempScraper(5);
            $this->data['todaysStory'] = $this->marketingModel
                ->where('DATE(created_at)', date('Y-m-d'))
                ->orderBy('created_at', 'DESC')
                ->findAll();
        }
    
        // 🔗 Inject buttons that use `posts` field to generate platform messages
        // (Handled in the view using `dynamicModalLoader()`)
    
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
    }
    
    // public function index()
    // {
    //     $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
    //     $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
    
    //     // Auto-generate fallback content if no posts exist
    //     $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts();
    //     if (empty($this->data['recentMarketingPosts'])) {
    //         log_message('info', 'No recentMarketingPosts found. Running auto-generation...');
    //         $this->getMyMIMarketing()->generateFromTempScraper(5);
    //         $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts(); // reload
    //     }
    
    //     $this->data['todaysStory'] = $this->marketingModel->getValidUnprocessedEmailsFromToday();
    //     $this->data['generatedSummaries'] = $this->marketingModel->getLatestGeneratedSummaries(25);
    //     $this->data['marketingBuffer'] = $this->marketingModel->getMarketingBuffer();
    //     $this->commonData();
    //     return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
    // }
    
    // public function index() {
    //     $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
    //     // Fetch analytics data
    //     $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
    //     $todaysStory = $this->marketingModel->getValidUnprocessedEmailsFromToday();
    //     log_message('info', 'Management/MarketingController L170 - $todaysStory: ' . (print_r($todaysStory, true))); 
    //     $this->data['todaysStory'] = $todaysStory; 
    //     $this->data['recentMarketingPosts'] = $this->getMyMIMarketing()->getRecentPosts(); // Adjust this line to match your model method
    //     $this->data['generatedSummaries'] = $this->marketingModel->getLatestGeneratedSummaries(25);
    //     $this->commonData();
    //     return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
    // }      

    public function add($type = null) {
        log_message('debug', 'MarketingController L183 - add() method called with type: ' . (is_null($type) ? 'null' : $type));
    
        if (!empty($type)) {
    
            // Handle POST request (form submission)
            if ($this->request->getMethod() === 'POST') {
                log_message('debug', 'Handling POST request for type: ' . $type);
    
                if ($type === 'Schedule') {
                    log_message('info', 'Processing Schedule submission');
                    try {
                        $this->marketingModel->addMarketingSchedule($this->request->getPost()); // Save the schedule data
                        log_message('info', 'Schedule data saved successfully');
    
                        // Check if the request is AJAX
                        if ($this->request->isAJAX()) {
                            return $this->response->setJSON(['success' => true, 'message' => 'Schedule added successfully']);
                        } else {
                            // Redirect to a success page for non-AJAX requests
                            return redirect()->to('/Management/Marketing/Schedule')->with('success', 'Schedule added successfully');
                        }
                    } catch (\Exception $e) {
                        log_message('error', 'Error saving schedule: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to save schedule.']);
                    }
                } elseif ($type === 'Campaign') {
                    log_message('info', 'Processing Campaign submission');
                    try {
                        $campaignData = [
                            'beta' => $this->request->getPost('beta'),
                            'config_mode' => $this->request->getPost('config_mode'),
                            'form_mode' => $this->request->getPost('form_mode'),
                            'escalated' => $this->request->getPost('escalated'),
                            'user_id' => $this->request->getPost('user_id'),
                            'user_email' => $this->request->getPost('user_email'),
                            'username' => $this->request->getPost('username'),
                            'assigned_to' => $this->request->getPost('assigned_to'),
                            'date' => $this->siteSettings->date,
                            'time' => $this->siteSettings->time,
                            'campaign_name' => $this->request->getPost('campaign_name'),
                            'promotionalLinks' => json_encode($this->request->getPost('promotionalLinks')),
                            'overall_campaign_description' => $this->request->getPost('overall_campaign_description'),
                            'voice_script' => $this->request->getPost('voice_script'),
                            'facebookMessage' => $this->request->getPost('facebookMessage'),
                            'linkedinMessage' => $this->request->getPost('linkedinMessage'),
                            'discordMessage' => $this->request->getPost('discordMessage'),
                            'stocktwitsMessage' => $this->request->getPost('stocktwitsMessage'),
                            'tiktokMessage' => $this->request->getPost('tiktokMessage'),
                            'youtubeMessage' => $this->request->getPost('youtubeMessage'),
                            'emailMessage' => $this->request->getPost('emailMessage'),
                            'additionalInfo' => $this->request->getPost('additionalInfo'),
                            'hashtags' => $this->request->getPost('hashtags'),
                        ];
    
                        $this->marketingModel->addMarketingCampaign($campaignData); // Save the campaign data
                        log_message('info', 'Campaign data saved successfully');
    
                        // Check if the request is AJAX
                        if ($this->request->isAJAX()) {
                            log_message('info', 'MarketingController L251 - This is using the $this->request->isAJAX() Form Submission');
                            return $this->response->setJSON(['success' => true, 'message' => 'Campaign added successfully']);
                        } else {
                            // Redirect to a success page for non-AJAX requests
                            log_message('info', 'MarketingController L251 - This is NOT using the $this->request->isAJAX() Form Submission');
                            return redirect()->to('/Management/Marketing/Campaigns')->with('success', 'Campaign added successfully');
                        }
                    } catch (\Exception $e) {
                        log_message('error', 'Error saving campaign: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to save campaign.']);
                    }
                } else {
                    log_message('error', 'Unrecognized type in POST request: ' . $type);
                    return $this->response->setJSON(['error' => 'Unrecognized type in POST request']);
                }
            }
    
            // Handle GET request (form display)
            if ($this->request->getMethod() === 'get') {
                log_message('debug', 'Handling GET request for type: ' . $type);
    
                if ($type === 'Schedule') {
                    log_message('debug', 'Loading view for Schedule');
                    try {
                        $response = $this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add', $this->data);
                        log_message('debug', 'View for Schedule loaded successfully');
                        return $response;
                    } catch (\Exception $e) {
                        log_message('error', 'Failed to load view for Schedule: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to load view for Schedule']);
                    }
                } elseif ($type === 'Campaign') {
                    log_message('debug', 'Loading view for Campaign');
                    try {
                        $response = $this->renderTheme('ManagementModule\Views\Marketing\Campaign\Add', $this->data);
                        log_message('debug', 'View for Campaign loaded successfully');
                        return $response;
                    } catch (\Exception $e) {
                        log_message('error', 'Failed to load view for Campaign: ' . $e->getMessage());
                        return $this->response->setJSON(['error' => 'Failed to load view for Campaign']);
                    }
                } else {
                    log_message('error', 'Unrecognized type in GET request: ' . $type);
                    return $this->response->setJSON(['error' => 'Unrecognized type in GET request']);
                }
            }
        } else {
            log_message('warning', 'No type provided; redirecting to /Management/Marketing');
            return redirect()->to('/Management/Marketing')->with('error', 'No type provided');
        }
    }  

    public function addSchedule() {
        if ($this->request->getMethod() === 'post') {
            $additionalInfo = $this->request->getPost('additional_info');
    
            // Validate and parse the JSON input
            $jsonData = null;
            if (!empty($additionalInfo)) {
                $jsonData = json_decode($additionalInfo, true);
                if (json_last_error() !== JSON_ERROR_NONE) {
                    return redirect()->back()->withInput()->with('error', 'Invalid JSON format in Additional Information.');
                }
            }
    
            $scheduleData = [
                'day' => $this->request->getPost('day'),
                'time' => $this->request->getPost('time'),
                'activity' => $this->request->getPost('activity'),
                'link' => $this->request->getPost('link'),
                'additional_info' => json_encode($jsonData)  // Store as JSON in the database
            ];
    
            // Insert the new schedule
            $this->marketingModel->addMarketingSchedule($scheduleData);
    
            return redirect()->to(base_url('Management/Marketing/Schedule'))->with('success', 'New schedule added successfully.');
        }
    
        // Load the form view
        $this->commonData(); 
        return $this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add');
    }   

    public function addSubscriber()
    {
        helper('email');
    
        try {
            $rawRequestBody = $this->request->getBody();
            $jsonData = json_decode($rawRequestBody, true);
    
            if (empty($jsonData['email'])) {
                log_message('warning', 'addSubscriber: Missing email in request body.');
                return $this->response->setJSON(['success' => false, 'message' => 'Email is required.']);
            }
    
            $marketingModel = new MarketingModel();
            
            $subscriberData = [
                'email'      => filter_var($jsonData['email'], FILTER_SANITIZE_EMAIL),
                'category'   => $jsonData['category'] ?? 'General',
                'referral'   => $jsonData['referral'] ?? 'Organic',
                'beta'       => $this->siteSettings->beta,
                'date'       => date('Y-m-d H:i:s'),
                'hostTime'   => date('Y-m-d H:i:s'),
                'time'       => date('H:i:s'),
                'user_id'    => session('user_id') ?? null,
                'user_ip'    => $this->request->getIPAddress()
            ];
    
            if ($marketingModel->addSubscriber($subscriberData)) {
                $emailService = \Config\Services::email();
    
                $emailService->setTo($subscriberData['email']);
                $emailService->setSubject('🎉 Welcome to Investor’s Talk | MyMI Wallet');
                $emailService->setMessage(view('emails/welcomeInvestor', [
                    'siteSettings' => $this->siteSettings,
                    'socialMedia'  => config('SocialMedia'),
                    'subscriber'   => $subscriberData, // You might want to personalize email with name later
                ]));
                $emailService->setMailType('html');
    
                if ($emailService->send()) {
                    log_message('info', '✅ addSubscriber: Welcome email sent successfully to ' . $subscriberData['email']);
                    return $this->response->setJSON(['success' => true, 'message' => 'Subscriber added and welcome email sent.']);
                } else {
                    $error = $emailService->printDebugger(['headers']);
                    log_message('error', '❌ addSubscriber: Email sending failed: ' . $error);
                    return $this->response->setJSON(['success' => false, 'message' => 'Subscriber added, but email failed to send.']);
                }
            } else {
                log_message('error', '❌ addSubscriber: Failed to add subscriber to database.');
                return $this->response->setJSON(['success' => false, 'message' => 'Failed to add subscriber.']);
            }
        } catch (\Throwable $e) {
            log_message('critical', '❌ addSubscriber exception: ' . $e->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'An unexpected error occurred.']);
        }
    }
    
    // public function addSubscriber() {
    //     helper('email');
    //     $rawRequestBody = $this->request->getBody();
    //     $jsonData = json_decode($rawRequestBody, true);

    //     $marketingModel = new MarketingModel();

    //     $subscriberData = [
    //         'email' => $jsonData['email'],
    //         'category' => $jsonData['category'],
    //         'referral' => $jsonData['referral'],
    //         'beta' => $this->siteSettings->beta,
    //         'date' => date('Y-m-d H:i:s'),
    //         'hostTime' => date('Y-m-d H:i:s'),
    //         'time' => date('H:i:s'),
    //         'user_id' => session('user_id'), // Assuming the user is logged in
    //         'user_ip' => $this->request->getIPAddress()
    //     ];

    //     if ($marketingModel->addSubscriber($subscriberData)) {
    //         $emailService = \Config\Services::email();
    //         $emailService->setTo($subscriberData['email']);
    //         $emailService->setSubject('🎉 Welcome to Investor’s Talk | MyMI Wallet');
    //         $emailService->setMessage(view('emails/welcomeInvestor', [
    //             'siteSettings' => $this->siteSettings,
    //             'socialMedia'  => config('SocialMedia'),
    //         ]));
    //         if ($emailService->send()) {
    //             log_message('info', 'Management/MarketingController L346 - $emailService: ' . print_r($emailService, true)); 
    //             return $this->response->setJSON(['success' => true, 'message' => 'Subscriber email sent successfully']);
    //         } else {
    //             log_message('error', 'Management/MarketingController L346 - Error Submitting: $emailService: ' . print_r($emailService, true)); 
    //             return $this->response->setJSON(['success' => false, 'message' => 'Failed to send Welcome Email']);
    //         }
    //     } else {
    //         return $this->response->setJSON(['success' => false, 'message' => 'Failed to add subscriber']);
    //     }
    // }

    public function approveBufferItem($id)
    {
        $this->marketingModel->updateBufferStatus($id, 'approved');
        return $this->respond(['status' => 'success', 'message' => 'Approved']);
    }
    
    public function approveLogo()
    {
        $symbol = $this->request->getPost('symbol');
        $imageUrl = $this->request->getPost('imageUrl');

        try {
            // Save or update the approved logo in the database
            $this->marketingModel->saveApprovedLogo($symbol, $imageUrl);

            return $this->response->setJSON([
                'success' => true,
                'message' => 'Logo approved successfully.',
            ]);
        } catch (\Exception $e) {
            log_message('error', 'Failed to approve logo: ' . $e->getMessage());
            return $this->response->setJSON([
                'success' => false,
                'message' => 'Failed to approve logo.',
            ]);
        }
    }
    
    public function approveAndDownloadLogo()
    {
        $imageUrl = $this->request->getPost('selectedImage');
        $symbol = $this->request->getPost('symbol');

        try {
            // Download the selected image
            $imageContent = file_get_contents($imageUrl);
            $imagePath = WRITEPATH . 'uploads/Company-Logos/' . $symbol . '.png';

            file_put_contents($imagePath, $imageContent);

            // Move to public directory
            $publicPath = FCPATH . 'assets/images/Company-Logos/' . $symbol . '.png';
            rename($imagePath, $publicPath);

            return redirect()->to('/Management/Marketing/upcomingEarnings')->with('success', 'Logo approved and saved successfully.');
        } catch (\Exception $e) {
            log_message('error', 'Failed to download or save logo: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to save the logo.');
        }
    }

    public function approveContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, ['status' => 'approved']);
        return redirect()->back()->with('success', 'Content approved successfully.');
    }
    
    public function blogs() {
        $this->data['pageTitle'] = 'MyMI Blogs | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        $this->data['blogs'] = $this->marketingModel->getBlogs();
        $this->data['totalBlogs'] = $this->marketingModel->countBlogs(); 

        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\Blogs', $this->data);
    }      

    public function campaigns() {
        $this->data['pageTitle'] = 'Marketing Campaigns | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        // log_message('debug', 'MarketingController L160 - $this->marketing: ' . (print_r($this->marketing, true))); 
        $this->data['getActiveCampaigns'] = $this->marketing['department']['getActiveCampaigns'];  
        $this->data['getActivePriorityCampaigns'] = $this->marketing['department']['getActivePriorityCampaigns'];  
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\campaigns', $this->data);
    }  

    public function contentGenerator()
    {
        try {
            $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
            $this->commonData();
            return $this->renderTheme('ManagementModule\Views\Marketing\contentGenerator', $this->data);
        } catch (\Throwable $th) {
            log_message('error', 'MarketingController contentGenerator error: ' . $th->getMessage());
        }
    }

    public function contentReview() {
        // Retrieve the generated content from the session
        $generatedContent = $this->session->get('generatedContent');

        // Ensure content exists; otherwise, redirect back with an error message
        if (empty($generatedContent)) {
            return redirect()->to('/Management/Marketing')->with('error', 'No generated content available for review.');
        }

        // Load the content review view and pass the generated content    
        $this->data['generatedContent'] = $generatedContent;
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\Content_Review', $this->data);
    }

    public function cronAnalyzeContent()
    {
        log_message('debug', '🧠 Starting content digest analysis...');
        $this->getMyMIMarketing()->generateFromTempScraper(5); // e.g., latest 5
        log_message('debug', '✅ Content digest completed.');
    }
    
    public function cronFetchAndStoreEmails()
    {
        try {
            log_message('debug', 'Starting cronFetchAndStoreEmails');
    
            $this->marketingService->scrapeAndStoreEmailsToTemp();
            log_message('debug', 'Finished cronFetchAndStoreEmails');
            return $this->respond(['status' => 'success']);
        } catch (\Throwable $e) {
            log_message('error', 'cronFetchAndStoreEmails Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }
    
    public function cronFetchInbox()
    {
        log_message('debug', '📨 Starting inbox scrape...');
        $this->getMyMIMarketing()->fetchAndStoreEmails();
        log_message('debug', '✅ Inbox scrape completed.');
    }

    public function cronFetchMarketingEmails()
    {
        log_message('info', 'CRON: Starting Marketing Email Fetch');
    
        $service = new MarketingService();
        $emailsFetched = $this->getMyMIMarketing()->fetchAndStoreEmails('newsletters');
    
        log_message('info', 'CRON: Fetched ' . $emailsFetched . ' marketing emails');
        return $this->respond(['status' => 'success', 'fetched' => $emailsFetched]);
    }    

    public function cronGenerateContentFromTemp()
    {
        try {
            log_message('debug', 'Starting cronGenerateContentFromTemp');
    
            $this->marketingService->generateFinalContentFromTemp();
            log_message('debug', 'Finished cronGenerateContentFromTemp');
            return $this->respond(['status' => 'success']);
        } catch (\Throwable $e) {
            log_message('error', 'cronGenerateContentFromTemp Error: ' . $e->getMessage());
            return $this->failServerError($e->getMessage());
        }
    }    
    
    public function cronSendDailyLog()
    {
        // Set timezone to CST
        date_default_timezone_set('America/Chicago');
    
        // Fetch today's logs or fallback
        $contentData = $this->getLogsOrFallback();
    
        // Generate email content
        $emailView = view('emails/daily_log_summary', [
            'contentData' => $contentData['data'],
            'contentType' => $contentData['type'],
        ]);
    
        // Determine the email type (tracked or fallback)
        $subject = ($contentData['type'] === 'logs') ?
            'Daily Log Summary for ' . date('F j, Y') :
            'Fallback Content - Daily Summary ' . date('F j, Y');
    
        // Send the summary email
        $this->email->setTo('community@mymiwallet.com')
            ->setSubject($subject)
            ->setMessage($emailView)
            ->send();
    
        // Send a reminder email to the team
        $this->email->setTo('team@mymiwallet.com')
            ->setSubject('Reminder: Daily Log Email Pending Confirmation')
            ->setMessage('The daily log email is scheduled to be sent at 3 PM CST. Please review the content to ensure everything is accurate.')
            ->send();
    }
    
    public function edit($id = null) {
        if ($id === null) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Exchange ID not provided');
        }
    
        // Fetch the token data for the given ID
        $tokenData = $this->marketingModel->getExchangeTokenById($id);
        if (!$tokenData) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Token not found');
        }
    
        // Handle form submission
        if ($this->request->getMethod() === 'post') {
            $validation = \Config\Services::validation();
            $validation->setRules([
                'coin_name'  => 'required',
                'market_cap' => 'required|numeric',
                'website'    => 'required|valid_url',
                'discord'    => 'permit_empty|valid_url',
                'facebook'   => 'permit_empty|valid_url',
                'telegram'   => 'permit_empty|valid_url',
                'twitter'    => 'permit_empty|valid_url',
            ]);
    
            if ($validation->withRequest($this->request)->run()) {
                $updatedData = [
                    'coin_name'  => $this->request->getPost('coin_name'),
                    'market_cap' => $this->request->getPost('market_cap'),
                    'website'    => $this->request->getPost('website'),
                    'discord'    => $this->request->getPost('discord'),
                    'facebook'   => $this->request->getPost('facebook'),
                    'telegram'   => $this->request->getPost('telegram'),
                    'twitter'    => $this->request->getPost('twitter'),
                ];
    
                if ($this->marketingModel->updateExchangeToken($id, $updatedData)) {
                    $this->session->setFlashdata('success', 'Exchange token updated successfully');
                } else {
                    $this->session->setFlashdata('error', 'Failed to update the exchange token');
                }
    
                return redirect()->to(site_url('Management/Marketing/Exchanges/Edit/' . $id));
            } else {
                $this->session->setFlashdata('validation_errors', $validation->getErrors());
            }
        }
    
        // Render the view with the token data
        return $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\edit', [
            'token'       => $tokenData,
            'validation'  => $this->session->getFlashdata('validation_errors'),
            'redirectURL' => site_url('Management/Marketing/Exchanges'),
        ]);
    }

    public function editContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        return $this->renderTheme('ManagementModule\Views\Marketing\Content_Edit', ['content' => $content]);
    }

    public function fetchBufferPaginated()
    {
        $page = (int) $this->request->getGet('page') ?: 1;
        $limit = (int) $this->request->getGet('limit') ?: 20;
    
        $data = $this->marketingModel->fetchBufferPaginated($page, $limit);
        return $this->respond($data);
    }

    public function fetchLatestSummaries()
    {
        $generatedSummaries = $this->marketingModel->getLatestGeneratedSummaries(25);
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\generatedSummaries', ['generatedSummaries' => $generatedSummaries]);
    }
    
    public function fetchMissingLogos()
    {
        $postData = $this->request->getJSON(true);
    
        // Validate CSRF token
        $csrfName = csrf_token();
        $csrfHash = csrf_hash();
        if (!isset($postData[$csrfName]) || $postData[$csrfName] !== $csrfHash) {
            log_message('error', 'fetchMissingLogos: CSRF validation failed');
            return $this->response
                ->setHeader('X-CSRF-Token-Name', $csrfName)
                ->setHeader('X-CSRF-Token-Hash', $csrfHash)
                ->setJSON(['error' => 'Invalid CSRF token.']);
        }
    
        $symbols = $postData['symbols'] ?? null;
    
        // Validate symbols
        if (empty($symbols) || !is_array($symbols)) {
            log_message('error', 'fetchMissingLogos: Invalid symbols input');
            return $this->response
                ->setHeader('X-CSRF-Token-Name', $csrfName)
                ->setHeader('X-CSRF-Token-Hash', $csrfHash)
                ->setJSON(['error' => 'Invalid symbols input.']);
        }
    
        $results = [];
        foreach ($symbols as $symbol) {
            // Example: Fetch logo or simulate fetching process
            $results[] = [
                'symbol' => $symbol,
                'status' => 'not_found', // Simulated response
            ];
        }
    
        return $this->response
            ->setHeader('X-CSRF-Token-Name', $csrfName)
            ->setHeader('X-CSRF-Token-Hash', $csrfHash)
            ->setJSON(['results' => $results]);
    }

    public function financialNews()
    {
        $symbols = $this->investmentModel->getAllSymbolsByEarnings();
        $approvedLogos = $this->marketingModel->getApprovedLogos();
    
        // Ensure these variables are defined and passed
        $existingSymbols = array_column($approvedLogos, 'symbol');
        $missingSymbols = array_filter($symbols, function ($symbol) use ($existingSymbols) {
            return !in_array($symbol['symbol'], $existingSymbols);
        });
    
        // log_message('debug', 'financialNews: $approvedLogos = ' . print_r($approvedLogos, true));
        // log_message('debug', 'financialNews: $missingSymbols = ' . print_r($missingSymbols, true));
    
        $this->data['approvedLogos'] = $approvedLogos ?? [];
        $this->data['missingSymbols'] = $missingSymbols ?? [];
        $this->commonData();
    
        return $this->renderTheme('ManagementModule\Views\Marketing\financialNews', $this->data);
    }   
    
    // ***CONTENT GENERATOR***
    public function generateAudio() {
        // Collect input data from the frontend
        $text = $this->request->getPost('text');
        $fileName = $this->request->getPost('fileName') ?: uniqid('tts_', true); // Default to a unique name
        $directory = WRITEPATH . 'uploads/'; // Default directory for uploads
        $outputFile = $directory . $fileName . '.mp3'; // Full path to the output file

        // Validate input
        if (empty($text)) {
            return $this->response->setJSON([
                'status' => 'error',
                'message' => 'Text cannot be empty.',
            ]);
        }

        // Ensure the directory exists
        if (!is_dir($directory)) {
            mkdir($directory, 0777, true); // Create directory if it doesn't exist
        }

        // Use Python to call gTTS and generate audio
        // Pass additional parameters like filename and directory
        $command = sprintf(
            'python3 gtts_script.py %s %s',
            escapeshellarg($text),
            escapeshellarg($outputFile)
        );
        exec($command, $output, $status);

        // Prepare JSON response
        if ($status === 0 && file_exists($outputFile)) {
            // Generate a URL for the file
            $fileUrl = base_url('uploads/' . basename($outputFile));
            return $this->response->setJSON([
                'status' => 'success',
                'message' => 'Audio file generated successfully.',
                'file_url' => $fileUrl, // URL for the user to download the file
            ]);
        } else {
            return $this->response->setJSON([
                'status' => 'error',
                'message' => 'Failed to generate audio.',
            ]);
        }
    }

    private function generateAutomatedContent()
    {
        // Fetch recent data from various sources
        $scraperContent = $this->marketingModel->getRecentScrapes();
        $tempContent = $this->marketingModel->getRecentTempScrapes();
        $campaigns = $this->marketingModel->getActiveCampaignsLimited(50);

        // Combine all sources
        $allContent = array_merge($scraperContent, $tempContent, $campaigns);

        // Generate content via MarketingService
        $generatedContent = [];
        foreach ($allContent as $content) {
            $generatedContent[] = $this->getMarketingService()->generateContentFromPost(
                $content->title ?? 'Untitled',
                $content->content ?? '',
                $content->tags ? explode(',', $content->tags) : []
            );
        }

        // Store generated content in `bf_marketing_scraper` as automated logs
        foreach ($generatedContent as $content) {
            $slug = $this->marketingModel->createSlug($content['title']);
        
            $this->db->table('bf_marketing_blog_posts')->insert([
                'title'       => $content['title'] ?? 'Generated Content',
                'content'     => $content['summary'] ?? '',
                'slug'        => $slug,
                'tags'        => implode(',', $content['keywords'] ?? []),
                'created_on'  => date('Y-m-d H:i:s'),
            ]);
        
            // Ensure this is stored in bf_marketing_scraper
            $this->marketingModel->saveDailyLog([
                'title'              => $content['title'],
                'content'            => $content['summary'],
                'type'               => 'Automated',
                'tags'               => implode(',', $content['keywords']),
                'date_time'          => date('Y-m-d H:i:s'),
                'author_information' => 'MyMI Automated System',
                'created_on'         => date('Y-m-d H:i:s'),
            ]);
        }        

        return $generatedContent;
    }

    public function generateContent($platform, $postId) {
        // Fetch the post data
        $post = $this->marketingModel->getSchedulePostById($postId);

        if (!$post) {
            return redirect()->back()->with('error', 'Post not found.');
        }

        // Generate content using the API
        $content = $this->getMyMIMarketing()->generateContentFromGPT($post['subjects'], $post['descriptions'], $platform);

        // Store the generated content
        $contentData = [
            'post_id' => $postId,
            'platform' => $platform,
            'generated_content' => $content,
        ];
        $this->marketingModel->storeGeneratedContent($contentData);

        return redirect()->to("\Management\Marketing\Schedule")->with('success', 'Content generated successfully.');
    }

    public function generateContentDigestFromStored()
    {
        log_message('info', 'Marketing: Starting summary generation from stored marketing emails.');
    
        $model = new MarketingModel();
        $records = $model->getRecentUnprocessedTempEmails(5);
    
        $results = [];
        foreach ($records as $record) {
            if (empty($record['content']) || strlen($record['content']) < 1000) {
                log_message('debug', "⚠️ Skipping record ID {$record['id']} due to insufficient content length.");
                continue;
            }
            
            if (empty($record['title']) || empty($record['content']) || strlen($record['content']) < 100) {
                log_message('warning', "⚠️ Skipping malformed or empty record ID {$record['id']} (title/content missing).");
                continue;
            }
            
            try {
                $summary = $this->getMarketingService()->generateContentFromRaw($record['title'], $record['content']);
    
                $model->storeFinalMarketingContent([
                    'source_id' => $record['id'],
                    'title' => $record['title'],
                    'summary' => $summary,
                    'created_at' => date('Y-m-d H:i:s')
                ]);
    
                $model->markTempRecordAsProcessed($record['id']);
                $results[] = $record['title'];
    
            } catch (\Throwable $e) {
                log_message('error', 'Failed to process record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    
        return $this->respond(['status' => 'complete', 'processed_titles' => $results]);
    }
    
    public function generateContentFromTweet($tweetId) {
        $tweet = $this->marketingModel->getTweetById($tweetId);

        if (!$tweet) {
            return $this->failNotFound('Tweet not found');
        }

        $generatedContent = $this->getMyMIMarketing()->generateContentFromTweets([$tweet]);

        $this->marketingModel->storeGeneratedContent([
            'tweet_id' => $tweetId,
            'content' => json_encode($generatedContent),
            'created_at' => date('Y-m-d H:i:s')
        ]);

        $this->getMyMIMarketing()->postToTwitter($generatedContent['platform_content']['Twitter']);

        return $this->respond(['message' => 'Content generated and posted successfully']);
    }

    public function generateDailyContentDigest()
    {
        log_message('debug', '🧠 Start Memory Usage: ' . memory_get_usage(true));
    
        @ini_set('memory_limit', '768M');
        $limit = 5;    
        $summary = [];
        $rawRecords = $this->marketingModel->getLatestUnprocessedEmails($limit);
        foreach ($rawRecords as $record) {
            $content = $record['content'] ?? '';
            if (empty($content) || strlen($content) < 500) {
                log_message('debug', "⏭️ Skipped record ID {$record['id']} - insufficient content.");
                continue;
            }
            $contentSize = strlen($content);
    
            log_message('debug', '📌 Processing record ID ' . $record['id'] . ' with content size: ' . $contentSize);
            log_message('debug', 'Management/MarketingController L770 - $record Array: ' . print_r($record, true));
    
            if ($contentSize === 0) {
                log_message('debug', "⏭️ Skipped record ID {$record['id']} - empty content.");
                continue;
            }
    
            try {
                gc_collect_cycles(); // clean memory before heavy ops
    
                $processed = $this->getMarketingService()->generateContentFromRaw($record);
    
                if ($processed === null) {
                    log_message('debug', "⚠️ Skipped record ID {$record['id']} - generateContentFromRaw() returned null.");
                    continue;
                }
    
                $this->marketingModel->saveFinalizedMarketingContent($processed);
    
                $summary[] = [
                    'title'          => $processed['headline'],
                    'summary'        => $processed['summary'],
                    'subtopics'      => $processed['subtopics'],
                    'platform_posts' => $processed['posts'],
                ];
    
            } catch (\Throwable $e) {
                log_message('error', "❌ generateDailyContentDigest failed on record ID {$record['id']}: {$e->getMessage()}");
            }
        }
    
        // ✅ Mark processed
        $this->marketingModel->markEmailsAsProcessed(array_column($rawRecords, 'id'));
    
        log_message('debug', '🏁 Peak Memory Usage: ' . memory_get_peak_usage(true));
        return $this->response->setJSON(['digest' => $summary]);
    }
    
    public function generateGroupedContentDrafts()
    {
        $grouped = $this->getMyMIMarketing()->groupSimilarSummariesByCosine();
        $labeled = $this->getMyMIMarketing()->generateGroupLabelsFromTFIDF($grouped['grouped'] ?? []);
        $drafts = $this->getMyMIMarketing()->generateGroupedBlogAndEmailDrafts($labeled);
        $this->data['blogContent'] = $drafts['blog'];
        $this->data['emailContent'] = $drafts['email'];
        $this->data['groupedLabels'] = $labeled;
        return $this->renderTheme('App\Modules\Management\Views\Marketing\resources\groupedContentPreview', $this->data);
    }
    
    public function generateNewsletterContent() {
        $emailContents = $this->marketingModel->getEmailContentsForNewsletter();

        // Generate content
        $content = $this->getMyMIMarketing()->generateNewsletterContent($emailContents);

        // Save the generated content as a draft
        $newsletterData = [
            'title' => 'Monthly Financial Newsletter - ' . date('F Y'),
            'content' => $content,
            'status' => 'draft',
            'created_at' => date('Y-m-d H:i:s'),
        ];

        $this->marketingModel->storeNewsletterDraft($newsletterData);
    
        // Redirect after fetching emails
        return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                         ->with('success', 'Newsletter content generated successfully');
    }

    private function generateSummarizedFallbackContent($contentArray)
    {
        $summarizedContent = [];
        $summarizer = new \App\Libraries\ContentSummarizer();

        foreach ($contentArray as $content) {
            $summarizedContent[] = [
                'title' => $content->title ?? 'Untitled',
                'summary' => $summarizer->summarize($content->content ?? '', 200),
                'url' => $content->url ?? null,
            ];
        }

        return $summarizer->combineSummaries($summarizedContent);
    }
    
    private function getLogsOrFallback()
    {
        // Fetch today's logs
        $logs = $this->marketingModel->getDailyLogsByDate(date('Y-m-d'));
    
        if (!empty($logs)) {
            return ['type' => 'logs', 'data' => $logs];
        }
    
        // Fallback to generic content
        $scrapedContent = $this->marketingModel->getRecentScrapes();
        $campaigns = $this->marketingModel->getActiveCampaignsLimited(50);
    
        // Merge content from multiple sources
        $combinedContent = array_merge($scrapedContent, $campaigns['result']);
    
        // Summarize and generate fallback content
        $fallbackContent = $this->generateSummarizedFallbackContent($combinedContent);
    
        // Store generated fallback content in `bf_marketing_scraper` for future reference
        foreach ($fallbackContent as $content) {
            $this->marketingModel->saveDailyLog([
                'title' => $content['title'] ?? 'Automated Content',
                'content' => $content['summary'] ?? '',
                'type' => 'Automated',
                'tags' => implode(',', $content['keywords'] ?? []),
                'date_time' => date('Y-m-d H:i:s'),
                'author_information' => 'MyMI Automated System',
                'created_on' => date('Y-m-d H:i:s'),
            ]);
        }
    
        return ['type' => 'fallback', 'data' => $fallbackContent];
    }    

    public function getRecentScrapes() {
        try {
            $scrapes = $this->marketingModel->getRecentScrapes();
            return $this->response->setJSON(['success' => true, 'scrapes' => $scrapes]);
        } catch (\Throwable $th) {
            log_message('error', 'getRecentScrapes: Exception - ' . $th->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to fetch recent scrapes.']);
        }
    }

    private function handleMediaUpload($mediaFiles) {
        $uploadedMedia = [];
        
        foreach ($mediaFiles as $file) {
            if ($file->isValid() && !$file->hasMoved()) {
                // Move file to a designated folder, e.g., 'uploads/media/'
                $newFileName = $file->getRandomName();
                $file->move(WRITEPATH . 'uploads/media/', $newFileName);
                
                // Save the file info in an array (or a database)
                $uploadedMedia[] = [
                    'file_name' => $file->getClientName(),
                    'file_path' => WRITEPATH . 'uploads/media/' . $newFileName,
                    'file_size' => $file->getSize(),
                    'file_type' => $file->getMimeType(),
                ];
            }
        }
        
        return $uploadedMedia;
    }

    public function ideas() {
        $this->data['pageTitle'] = 'Marketing Campaigns | Management | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        // log_message('debug', 'MarketingController L160 - $this->marketing: ' . (print_r($this->marketing, true))); 
        // Add $getActiveIdeas to the main $this->data array
        $this->data['getActiveIdeas'] = $this->marketingModel->getActiveIdeas(); // Method to retrieve active ideas

        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\ideas', $this->data);
    }  

    public function importScheduleCSV() {
        if ($this->request->getMethod() === 'post') {
            $file = $this->request->getFile('csv_file');
            
            if ($file->isValid() && !$file->hasMoved()) {
                $filePath = WRITEPATH . 'uploads/' . $file->store();
                $csvData = array_map('str_getcsv', file($filePath));

                // Assume the CSV structure is: ['date', 'time', 'activity', 'campaign_title', 'platform', ...]
                foreach ($csvData as $row) {
                    $scheduleData = [
                        'day' => $row[0],
                        'time' => $row[1],
                        'activity' => $row[2],
                    ];

                    $scheduleId = $this->marketingModel->addMarketingSchedule($scheduleData);

                    // Add related marketing campaigns
                    $campaignData = [
                        'sched_id' => $scheduleId,
                        'title' => $row[3],
                        'platform' => $row[4],
                        'content' => $row[5],
                    ];
                    $this->marketingModel->addMarketingCampaign($campaignData);
                }

                return redirect()->back()->with('success', 'Schedule and campaigns imported successfully.');
            }

            return redirect()->back()->with('error', 'Invalid CSV file.');
        }

        return $this->renderTheme('ManagementModule\Views\Marketing\importCSV');
    }

    public function previewBufferItem($id)
    {
        $record = $this->marketingModel->findBufferItem($id);
        if (!$record) return $this->failNotFound("Item not found.");
        return $this->renderTheme('ManagementModule\Views\Marketing\modals\bufferPreview', ['item' => $record]);
    }

    public function previewGeneratedPost($postId)
    {
        $post = $this->marketingModel->findFinalizedById($postId);
    
        if (!$post) {
            return $this->renderTheme('ManagementModule\Views\Errors\CannotLoadPage', [
                'message' => 'Generated Post not found.',
            ]);
        }
    
        // Preserve original logic
        $post['title'] = $this->getMyMIMarketing()->cleanTitle($post['title'] ?? 'Untitled');
        $post['cta'] = $this->getMyMIMarketing()->generateCTA($post['summary'] ?? '');
        $post['voiceover'] = $post['voice_script'] ?? null;
    
        // Merge patched additions
        $cleanedSummary = $this->getMyMIMarketing()->cleanHtmlSummaryPreview($post['summary'] ?? '');
        $keywords = $this->getMyMIMarketing()->extractKeywords($cleanedSummary);
        $posts = json_decode($post['platforms'] ?? '{}', true);
    
        $this->data = [
            'post' => $post, // ← include original $post object
            'summary' => $post,
            'cleaned_summary' => $cleanedSummary,
            'keywords' => $keywords,
            'posts' => $posts,
            'voiceover_url' => $post['voiceover_url'] ?? null,
        ];
    
        $mode = $this->request->getGet('mode');
        if ($mode === 'insight') {
            return $this->renderTheme('ManagementModule\Views\Marketing\resources\modals\insightPreview', $this->data);
        }
    
        return $this->renderTheme('ManagementModule\Views\Marketing\modals\previewGeneratedPost', $this->data);
    }
    
    public function previewPendingSummaries()
    {
        try {
            $pendingSummaries = $this->marketingModel->getPendingScraperSummaries(10);
            return $this->renderTheme('App\Modules\Management\Views\Marketing\partials\previewPendingSummaries', [
                'pendingSummaries' => $pendingSummaries
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ previewPendingSummaries failed: ' . $e->getMessage());
            return $this->failServerError('Could not load summaries.');
        }
    }
    
    public function previewVideoScript($id)
    {
        $post = $this->marketingModel->getGeneratedPostById($id);
        if (!$post) return $this->failNotFound('Post not found.');
    
        $posts = json_decode($post['posts'], true);
        $videoScript = $posts['video'] ?? 'No video script generated yet.';
    
        return $this->renderTheme('MarketingModule\Views\Marketing\modals\video_preview_modal', [
            'title' => $post['title'],
            'videoScript' => $videoScript,
        ]);
    }
    
    public function processScheduledPosts()
    {
        $currentTimestamp = date('Y-m-d H:i:s');
        $scheduledPosts = $this->marketingModel->getPendingScheduledPosts($currentTimestamp);

        foreach ($scheduledPosts as $post) {
            $payload = [
                'platform' => $post->platform,
                'content' => $post->content,
                'media_url' => $post->media_url,
            ];

            try {
                $response = $this->sendToZapier($post->zapier_webhook_url, $payload);

                if ($response->getStatusCode() === 200) {
                    $this->marketingModel->updatePostStatus($post->id, 'posted');
                } else {
                    throw new Exception("Zapier response error: {$response->getBody()}");
                }
            } catch (Exception $e) {
                $this->handlePostFailure($post, $e->getMessage());
            }
        }
    }

    private function sendToZapier($webhookUrl, $payload)
    {
        $client = new \GuzzleHttp\Client();
        return $client->post($webhookUrl, [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => $payload,
        ]);
    }

    private function handlePostFailure($post, $error)
    {
        $this->marketingModel->incrementRetryCount($post->id);
        log_message('error', "Failed to post to Zapier for Post ID {$post->id}: {$error}");

        if ($post->retry_count >= 3) {
            $this->marketingModel->updatePostStatus($post->id, 'failed');
        }
    }

    public function postCreator()
    {
        try {
            $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
            $this->commonData();
            return $this->renderTheme('ManagementModule\Views\Marketing\index', $this->data);
        } catch (\Throwable $th) {
            log_message('error', 'MarketingController postCreator error: ' . $th->getMessage());
        }
    }

    public function promote() {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->data['exchangeAssets'] = []; 
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\Promote', $this->data);
    }  
    
    public function publishBlog($blogId) {
        $blog = $this->marketingModel->getBlogPostDetails($blogId);
        if (!$blog) {
            return redirect()->back()->with('error', 'Blog post not found.');
        }

        // Update status to published
        $this->marketingModel->update($blogId, ['status' => 'published']);
        return redirect()->to('/Management/Marketing/Blogs')->with('success', 'Blog published successfully.');
    }
    
    public function rejectBufferItem($id)
    {
        $this->marketingModel->updateBufferStatus($id, 'rejected');
        return $this->respond(['status' => 'success', 'message' => 'Rejected']);
    }

    public function rejectContent($id) {
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, ['status' => 'rejected']);
        return redirect()->back()->with('success', 'Content rejected successfully.');
    }
    
    public function reviewBuffer()
    {
        $buffer = $this->marketingModel->getBufferItems(); // You'll implement this method next
        $this->data['pageTitle'] = 'Marketing Buffer Dashboard';
        $this->data['buffer'] = $buffer;
        return $this->renderTheme('ManagementModule\Views\Marketing\BufferDashboard', $this->data);
    }
    
    public function runContentGeneration()
    {
        // Generate the content
        $generatedContent = $this->generateAutomatedContent();
    
        // Store the generated content temporarily in the session or database for review
        $this->session->set('generatedContent', $generatedContent);
    
        // Redirect to the content review page
        return redirect()->to('/Management/Marketing/ContentReview')->with('success', count($generatedContent) . ' content items generated successfully. Please review and approve.');
    }    
    
    private function sanitizeContent($content) {
        $content = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $content);
        $content = preg_replace('#<style(.*?)>(.*?)</style>#is', '', $content);
        $content = strip_tags($content);
        $content = preg_replace('/\s+/', ' ', $content);
        return trim($content);
    }
    
    private function saveCampaign($formData) {
        
        // Prepare the data
        $data = [
            'title' => $formData['title'],
            'description' => $formData['description'],
            // Add other fields
        ];
        
        // Save the campaign
        $this->marketingModel->addMarketingCampaign($data);
    }
    
    public function saveContentEdit($id) {
        $postData = $this->request->getPost();
    
        $content = $this->marketingModel->find($id);
    
        if (!$content) {
            return redirect()->back()->with('error', 'Content not found.');
        }
    
        $this->marketingModel->update($id, [
            'content' => $postData['content'],
            'status' => 'pending',
        ]);
    
        return redirect()->to('/Management/Marketing/ContentReview')->with('success', 'Content updated successfully.');
    }

    private function saveSchedule($formData) {
        // Create a model for saving the schedule to the database
        $scheduleModel = new \App\Models\ScheduleModel();
        
        // Prepare the data
        $data = [
            'title' => $formData['title'],
            'description' => $formData['description'],
            // Add other fields
        ];
        
        // Save the schedule
        $scheduleModel->insert($data);
    }

    public function schedule($day = null) {
        if (!empty($day)) {
            $this->data['marketingSchedule'] = $this->marketingModel->getScheduleByDay($day);
            foreach ($this->data['marketingSchedule'] as &$schedule) {
                $schedule['campaigns'] = $this->marketingModel->getCampaignsBySchedId($schedule['id']);
            }
            $this->data['scheduleByDay'] = 'Yes';
        } else {
            $this->data['marketingSchedule'] = $this->marketingModel->getUpcomingSchedule();
            foreach ($this->data['marketingSchedule'] as &$schedule) {
                $schedule['campaigns'] = $this->marketingModel->getCampaignsBySchedId($schedule['id']);
            }
            $this->data['scheduleByDay'] = 'No';
        }
    
        $this->commonData();
        $this->data['pageTitle'] = 'Daily Schedule | Management | MyMI Wallet';    
        return $this->renderTheme('ManagementModule\Views\Marketing\Schedule', $this->data);
    }

    public function scheduleNewsletterCampaign() {
        $newsletterDraft = $this->marketingModel->getLatestNewsletterDraft();

        if (!$newsletterDraft) {
            return $this->response->setJSON(['success' => false, 'message' => 'No newsletter draft found']);
        }

        $campaignData = [
            'title' => $newsletterDraft['title'],
            'content' => $newsletterDraft['content'],
            'status' => 'scheduled',
            'send_date' => $this->request->getPost('send_date'),
            'target_audience' => 'all_users',
            'created_at' => date('Y-m-d H:i:s'),
        ];

        if ($this->marketingModel->scheduleNewsletterCampaign($campaignData)) {
            // Redirect after successfully scheduling the newsletter
            return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                             ->with('success', 'Newsletter campaign scheduled successfully');
        } else {
            // Redirect back to the previous page with an error message
            return redirect()->back()->with('error', 'Failed to schedule newsletter campaign');
        }
    }

    private function scrapeGoogleSearch($query) {
        $searchUrl = 'https://www.google.com/search?q=' . urlencode($query);
        $client = new Client();
        try {
            $response = $client->get($searchUrl);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $dom = new \DOMDocument();
                libxml_use_internal_errors(true);
                $dom->loadHTML($html);
                libxml_clear_errors();
                $xpath = new \DOMXPath($dom);
                $results = [];
                foreach ($xpath->query('//a[@href]') as $link) {
                    $href = $link->getAttribute('href');
                    if (strpos($href, '/url?q=') === 0) {
                        $href = substr($href, 7, strpos($href, '&') - 7);
                        $text = $link->nodeValue;
                        $results[] = ['href' => $href, 'text' => $text];
                    }
                }
                return $results;
            } else {
                log_message('error', 'scrapeGoogleSearch: Could not retrieve content, HTTP status code - ' . $response->getStatusCode());
                return ['error' => 'Could not retrieve content, HTTP status code - ' . $response->getStatusCode()];
            }
        } catch (RequestException $e) {
            log_message('error', 'scrapeGoogleSearch: RequestException - ' . $e->getMessage());
            return ['error' => 'RequestException error: ' . $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeGoogleSearch: General error - ' . $e->getMessage());
            return ['error' => 'General error: ' . $e->getMessage()];
        }
        return [];
    }

    public function scrapeLink() {
        $rawRequestBody = $this->request->getBody();
        $jsonData = json_decode($rawRequestBody, true);
        $url = $jsonData['url'] ?? null;

        if (!$url) {
            log_message('error', 'scrapeLink: URL is missing');
            return $this->response->setJSON(['success' => false, 'message' => 'URL is required.']);
        }

        try {
            log_message('debug', 'scrapeLink: Scraping URL - ' . $url);
            $scrapedData = $this->scrapeWebsiteWithFallback($url);

            if (isset($scrapedData['error'])) {
                log_message('error', 'scrapeLink: ' . $scrapedData['error']);
                return $this->response->setJSON(['success' => true, 'message' => 'Partially scraped data, proceeding with available data.']);
            }

            if (!empty($scrapedData['content'])) {
                $this->marketingModel->storeTempScrapedData([
                    'title' => $scrapedData['title'],
                    'content' => $scrapedData['content'],
                    'links' => json_encode($scrapedData['links']),
                    'url' => $scrapedData['url'],
                    'scraped_at' => date('Y-m-d H:i:s'),
                    'modified_on' => date('Y-m-d H:i:s'),
                ]);

                return $this->response->setJSON(['success' => true, 'message' => 'Scraped data stored successfully.', 'data' => $scrapedData]);
            } else {
                log_message('error', 'scrapeLink: Scraped data is empty');
                return $this->response->setJSON(['success' => false, 'message' => 'Scraping failed. Please check the URL and try again.']);
            }
        } catch (\Throwable $th) {
            log_message('error', 'scrapeLink: Exception - ' . $th->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'An error occurred during scraping.']);
        }
    }

    private function scrapeLinks($links) {
        $scrapedLinksData = [];
        foreach ($links as $link) {
            $url = filter_var($link['href'], FILTER_SANITIZE_URL);
            if (filter_var($url, FILTER_VALIDATE_URL)) {
                $scrapedData = $this->scrapeWebsite($url);
                if (!empty($scrapedData['content'])) {
                    $scrapedLinksData[] = $scrapedData;
                }
            }
        }
        return $scrapedLinksData;
    }

    private function scrapeWebsite($url) {
        $client = new Client();
        try {
            $response = $client->get($url, [
                'stream' => true,
                'headers' => [
                    'User-Agent' => 'MyMI Wallet Bot'
                ],
                'timeout' => 10, // optional: protect against hanging requests
                'http_errors' => false // prevents throwing exceptions on non-2xx responses
            ]);
            
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $dom = HtmlDomParser::str_get_html($html);
                if ($dom instanceof \voku\helper\HtmlDomParser) {
                    $title = $dom->find('title', 0)->text ?? 'No title found';
                    $bodyNode = $dom->find('body', 0);
                    $bodyContent = $bodyNode ? $this->sanitizeContent($bodyNode->innerHtml()) : 'No body content found';
                    $links = [];
                    foreach ($dom->find('a') as $link) {
                        $href = $link->getAttribute('href');
                        $text = $link->text;
                        $links[] = ['href' => $href, 'text' => $text];
                    }
                    log_message('debug', 'scrapeWebsite: Scraping successful for URL - ' . $url);
                    return [
                        'title' => $title,
                        'content' => $bodyContent,
                        'links' => $links,
                        'url' => $url
                    ];
                } else {
                    log_message('error', 'scrapeWebsite: DOM parsing failed for URL - ' . $url);
                    return ['error' => 'DOM parsing failed.'];
                }
            } else {
                log_message('error', 'scrapeWebsite: Could not retrieve content, HTTP status code - ' . $response->getStatusCode());
                return ['error' => 'Could not retrieve content, HTTP status code - ' . $response->getStatusCode()];
            }
        } catch (RequestException $e) {
            if ($e->hasResponse() && $e->getResponse()->getStatusCode() == 401) {
                log_message('error', 'scrapeWebsite: Unauthorized access for URL - ' . $url);
                return ['error' => 'Unauthorized access. Skipping URL.'];
            }
            log_message('error', 'scrapeWebsite: RequestException - ' . $e->getMessage());
            return ['error' => 'RequestException error: ' . $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeWebsite: General error - ' . $e->getMessage());
            return ['error' => 'General error: ' . $e->getMessage()];
        }
    }

    private function scrapeWebsiteWithFallback($url) {
        try {
            log_message('debug', 'scrapeWebsiteWithFallback: Scraping URL - ' . $url);
            $scrapedData = $this->scrapeWebsite($url);

            if (empty($scrapedData['content'])) {
                log_message('debug', 'scrapeWebsiteWithFallback: Scraped data is empty, performing Google search fallback');
                $googleSearchResults = $this->scrapeGoogleSearch($url);
                $scrapedLinksData = $this->scrapeLinks($googleSearchResults);
                $scrapedData['google_search_results'] = $scrapedLinksData;
            }

            return $scrapedData;
        } catch (RequestException $e) {
            log_message('error', 'scrapeWebsiteWithFallback: RequestException - ' . $e->getMessage());
            return ['error' => $e->getMessage()];
        } catch (\Exception $e) {
            log_message('error', 'scrapeWebsiteWithFallback: General error - ' . $e->getMessage());
            return ['error' => $e->getMessage()];
        }
    }

    public function searchAndApproveLogo($symbol)
    {
        $query = $symbol . ' logo png transparent';
        $searchUrl = 'https://www.google.com/search?q=' . urlencode($query) . '&tbm=isch';

        try {
            $response = $this->client->request('GET', $searchUrl);
            $htmlContent = $response->getBody()->getContents();

            // Use DOMDocument or other parsing methods to extract image URLs
            $dom = new \DOMDocument();
            @$dom->loadHTML($htmlContent);

            $xpath = new \DOMXPath($dom);
            $imageNodes = $xpath->query('//img');

            $imageUrls = [];
            foreach ($imageNodes as $imageNode) {
                $src = $imageNode->getAttribute('src');
                if ($src) {
                    $imageUrls[] = $src;
                }
            }

            // Pass image URLs to the view for approval
            return $this->renderTheme('ManagementModule\Views\Marketing\approve_logo', [
                'symbol' => $symbol,
                'imageUrls' => $imageUrls,
            ]);
        } catch (RequestException $e) {
            log_message('error', 'Google Search Request Failed: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to fetch logo suggestions.');
        }
    }

    public function sendScheduledNewsletter() {
        $campaigns = $this->marketingModel->getScheduledCampaigns();

        foreach ($campaigns as $campaign) {
            // Send the newsletter
            $this->getMyMIMarketing()->sendNewsletter($campaign['content'], $campaign['target_audience']);

            // Update the campaign status to 'sent'
            $this->marketingModel->updateCampaignStatus($campaign['id'], 'sent');
        }
        // Redirect after fetching emails
        return redirect()->to(site_url('Management/Marketing/Content/Listing'))
                         ->with('success', 'Scheduled newsletters sent successfully');
    }

    public function standaloneAddSubscriber() {
        $this->data['pageTitle'] = 'Add Subscriber | Management | MyMI Wallet';
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneAddSubscriber', $this->data);
    }

    public function standaloneScrape() {
        $this->data['pageTitle'] = 'Quick Scraper | Management | MyMI Wallet';
        $this->commonData();
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneScraper', $this->data);
    }

    private function storeScrapedData($scrapedData) {
        $db = \Config\Database::connect();
        $builder = $db->table('bf_marketing_temp_scraper');
        $data = [
            'title' => $scrapedData['title'],
            'content' => $scrapedData['content'],
            'links' => json_encode($scrapedData['links']),
            'url' => $scrapedData['url'],
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ];
        $builder->insert($data);
    }

    public function submitContent() {
        $request = service('request');

        // Validate the form input
        $validationRules = [
            'campaignName' => 'required|min_length[3]',
            'promotionalLinks' => 'required',
            'facebookMessage' => 'required',
            'linkedinMessage' => 'required',
            'discordMessage' => 'required',
            'stockTwitsMessage' => 'required',
            'tiktokMessage' => 'required',
            'youtubeMessage' => 'required',
            'emailMessage' => 'required',
        ];

        if (!$this->validate($validationRules)) {
            return redirect()->back()->with('errors', $this->validator->getErrors())->withInput();
        }

        // Retrieve input data
        $campaignData = [
            'name' => $request->getPost('campaignName'),
            'promotional_links' => json_encode($request->getPost('promotionalLinks')),  // Storing as JSON
            'facebook_message' => $request->getPost('facebookMessage'),
            'linkedin_message' => $request->getPost('linkedinMessage'),
            'discord_message' => $request->getPost('discordMessage'),
            'stocktwits_message' => $request->getPost('stockTwitsMessage'),
            'tiktok_message' => $request->getPost('tiktokMessage'),
            'youtube_message' => $request->getPost('youtubeMessage'),
            'email_message' => $request->getPost('emailMessage'),
            'additional_info' => $request->getPost('additionalInfo'),
            'created_on' => date('Y-m-d H:i:s'),
            'status' => 1,  // Default active status
            'stage' => 'draft',  // Default stage
        ];

        // Save data to the database
        $marketingModel = new MarketingModel();
        if ($marketingModel->insert($campaignData)) {
            return redirect()->to('/Marketing/Success')->with('success', 'Marketing content submitted successfully.');
        } else {
            return redirect()->back()->with('error', 'Failed to submit marketing content.')->withInput();
        }
    } 

    public function submitDailyLog()
    {
        $data = [
            'title' => $this->request->getPost('subject'),
            'content' => $this->request->getPost('log_content'),
            'subcontent' => json_encode($this->request->getPost('subcontent')),
            'tags' => $this->request->getPost('tags'),
            'type' => $this->request->getPost('content_type'),
            'url' => $this->request->getPost('url'),
            'author_information' => $this->request->getPost('author_information'),
            'date_time' => $this->request->getPost('date_time'),
            'trade_alert_subcategory' => $this->request->getPost('trade_alert_subcategory'), // New Field
            'created_on' => date('Y-m-d H:i:s'),
        ];
    
        if ($this->marketingModel->saveDailyLog($data)) {
            return $this->response->setJSON(['success' => true, 'message' => 'Daily log submitted successfully!']);
        } else {
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to submit daily log.']);
        }
    }    

    public function submitLargeContent() {
        log_message('debug', 'submitLargeContent method called');
        try {
            $subject = $this->request->getPost('subject');
            $url = $this->request->getPost('url');
            $content = $this->request->getPost('large_content');
            $tags = $this->request->getPost('tags');
            $uploadedFiles = $this->request->getFiles();
            $contentType = $this->request->getPost('content_type');
    
            // Handle media upload
            $mediaAssets = $this->handleMediaUpload($uploadedFiles['media_assets']);
    
            // Check if content is non-empty and properly formatted
            if (empty($content) || strlen($content) < 50) {
                throw new \Exception('Content too short or empty');
            }
    
            // Generate content from large text
            $generatedContent = $this->getMyMIMarketing()->generateContentFromLargeText($content, $tags);
    
            // Ensure 'keywords' is always an array// Ensure 'keywords' is always an array
            $keywords = is_array($generatedContent['keywords']) ? $generatedContent['keywords'] : [];
            
            // Store scraped content in the database
            $this->marketingModel->storeScrapedContent([
                'status' => 'pending',
                'type' => $contentType,
                'url' => $url,
                'title' => $subject,
                'summary' => $generatedContent['summary'],
                'content' => $content,
                'keywords' => implode(', ', $keywords), // Always pass an array to implode
                'created_on' => date('Y-m-d H:i:s'),
            ]);
    
            return $this->response->setJSON(['success' => true]);
        } catch (\Exception $e) {
            log_message('error', 'submitLargeContent error: ' . $e->getMessage());
            return $this->response->setJSON(['success' => false, 'message' => 'Failed to submit content.']);
        }
    } 

    public function submitLargeContentForm() {
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->commonData();
        $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneLargeContentForm', $this->data);
    }
    
    public function submitMarketingCampaign() {
        helper(['form', 'url']);
        
        // Capture and sanitize input
        $data = [
            'name' => $this->request->getPost('campaignName'),
            'assigned_to' => $this->request->getPost('assigned_to'),
            'promotional_links' => json_encode($this->request->getPost('promotionalLinks')),
            'facebook_message' => htmlentities($this->request->getPost('facebookMessage'), ENT_QUOTES, 'UTF-8'),
            'linkedin_message' => htmlentities($this->request->getPost('linkedinMessage'), ENT_QUOTES, 'UTF-8'),
            'discord_message' => htmlentities($this->request->getPost('discordMessage'), ENT_QUOTES, 'UTF-8'),
            'stocktwits_message' => htmlentities($this->request->getPost('stocktwitsMessage'), ENT_QUOTES, 'UTF-8'),
            'tiktok_message' => htmlentities($this->request->getPost('tiktokMessage'), ENT_QUOTES, 'UTF-8'),
            'youtube_message' => htmlentities($this->request->getPost('youtubeMessage'), ENT_QUOTES, 'UTF-8'),
            'email_message' => htmlentities($this->request->getPost('emailMessage'), ENT_QUOTES, 'UTF-8'),
            'additional_info' => htmlentities($this->request->getPost('additionalInfo'), ENT_QUOTES, 'UTF-8'),
            'overall_campaign_description' => htmlentities($this->request->getPost('overall_campaign_description'), ENT_QUOTES, 'UTF-8'),
            'voice_script' => htmlentities($this->request->getPost('voice_script'), ENT_QUOTES, 'UTF-8')
        ];

        // Validate the data
        if ($this->validate([
            'name' => 'required',
            'facebook_message' => 'required',
            // Add other validation rules as needed
        ])) {
            // Save data to the database using the model's method
            $this->marketingModel->submitCampaignContent($data);
            return redirect()->to('/dashboard')->with('success', 'Campaign submitted successfully.');
        } else {
            // Redirect back with input and errors if validation fails
            return redirect()->back()->withInput()->with('errors', $this->validator->getErrors());
        }
    }

    public function submitMarketIdeas() {
        if ($this->request->getMethod() === 'post') {
            $data = [
                'title' => $this->request->getPost('title'),
                'description' => htmlentities($this->request->getPost('description'), ENT_QUOTES, 'UTF-8'),
                'created_by' => session()->get('user_id'), // Assuming the user ID is stored in the session
                'assigned_to' => $this->request->getPost('assigned_to'),
                'priority' => $this->request->getPost('priority'),
                'status' => 'draft', // Initial status
                'platforms' => json_encode($this->request->getPost('platforms')),
                'additional_info' => htmlentities($this->request->getPost('additional_info'), ENT_QUOTES, 'UTF-8'),
            ];
    
            // Handle image uploads
            $uploadedFiles = $this->request->getFiles();
            $filePaths = [];
    
            if ($uploadedFiles && isset($uploadedFiles['imageFiles'])) {
                foreach ($uploadedFiles['imageFiles'] as $file) {
                    if ($file->isValid() && !$file->hasMoved()) {
                        $newName = $file->getRandomName();
                        $file->move(FCPATH . 'public/assets/images/Marketing/Ideas', $newName);
                        $filePaths[] = base_url('assets/images/Marketing/Ideas/' . $newName);
                    }
                }
            }
    
            // Store file paths as a JSON array in the database
            if (!empty($filePaths)) {
                $data['image_paths'] = json_encode($filePaths);
            }
    
            // Validate and submit data
            if ($this->validate([
                'title' => 'required',
                'description' => 'required'
            ])) {
                $this->marketingModel->submitIdea($data);
                return redirect()->back()->with('success', 'Idea submitted successfully.');
            } else {
                return redirect()->back()->withInput()->with('errors', $this->validator->getErrors());
            }
        }
    }

    public function topCommunities($channel = null) {
        $this->commonData(); // Call this to populate $this->data
    
        $MyMIExchange = new MyMIExchange(); 
        $exchangeTokens = $MyMIExchange->getSolanaTokens();
        
        if (!empty($channel)) {
            if ($channel === 'Discord') {
                $this->data['tokens'] = $exchangeTokens['discord'];
                $this->data['pageTitle'] = 'Discord Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\discord', $this->data);
            } elseif ($channel === 'Facebook') {
                $this->data['tokens'] = $exchangeTokens['facebook'];
                $this->data['pageTitle'] = 'Facebook Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\facebook', $this->data);
            } elseif ($channel === 'Twitter') {
                $this->data['tokens'] = $exchangeTokens['x_twitter'];
                $this->data['pageTitle'] = 'Twitter Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\twitter', $this->data);
            } elseif ($channel === 'Website') {
                $this->data['tokens'] = $exchangeTokens['website'];
                $this->data['pageTitle'] = 'Website Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\website', $this->data);
            } else {
                // Default to 'all' if the channel is not recognized
                $this->data['tokens'] = $exchangeTokens['all'];
                $this->data['pageTitle'] = 'All Communities';
                $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens', $this->data);
            }
        } else {
            // If no channel is specified, show all tokens
            $this->data['tokens'] = $exchangeTokens['all'];
            $this->data['pageTitle'] = 'All Communities';
            $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens', $this->data);
        }
    }

    public function triggerPostAutogenOnEmpty()
    {
        $today = date('Y-m-d');
        $existing = $this->marketingModel->getLatestGeneratedSummaries(5, $today);
    
        if (!empty($existing)) {
            return $this->response->setJSON(['status' => 'skipped', 'message' => 'Summaries already exist for today.']);
        }
    
        try {
            $this->getMyMIMarketing()->generateFromTempScraper(5);
            return $this->response->setJSON(['status' => 'generated', 'message' => 'Generated new summaries.']);
        } catch (\Throwable $e) {
            log_message('error', 'triggerPostAutogenOnEmpty error: ' . $e->getMessage());
            return $this->failServerError('Failed to generate summaries.');
        }
    }
    
    public function twitterDashboard() {
        $data = [
            'pageTitle' => 'Twitter Dashboard',
            'hashtags' => $this->request->getPost('hashtags') ?? '',
            'tweets' => []
        ];

        if ($this->request->getMethod() === 'post') {
            $hashtags = $this->request->getPost('hashtags');
            $tweets = $this->getMyMIMarketing()->fetchTweets($hashtags);
            $data['tweets'] = $tweets;
        }

        return $this->renderTheme('Management/Marketing/Twitter', $data);
    }

    public function upcomingEarnings()
    {
        // Fetch upcoming earnings from a model (assuming you have a model for this)
        $model = new \App\Models\EarningsModel();
        $upcomingEarnings = $model->getUpcomingEarnings(); // Fetch upcoming earnings

        // Prepare data for the view
        $this->data['upcomingEarnings'] = $upcomingEarnings;

        return $this->renderTheme('ManagementModule\Views\Marketing\upcoming_earnings', $this->data);
    }

    public function updatePlatformToggle($id)
    {
        $post = $this->request->getJSON(true);
        $platform = $post['platform'];
        $enabled = (bool) $post['enabled'];
    
        $record = $this->marketingModel->getBufferItem($id);
        $platforms = json_decode($record['platforms'] ?? '{}', true);
    
        $platforms[$platform] = $enabled;
    
        $this->marketingModel->updateBufferItem($id, ['platforms' => json_encode($platforms)]);
    
        return $this->respond(['status' => 'success']);
    }
    
    public function viewBlog($slug)
    {
        $blogPost = $this->marketingModel->getBlogPostBySlug($slug);
    
        if (!$blogPost) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException('Blog post not found');
        }
    
        return $this->renderTheme('blog/view', ['blogPost' => $blogPost]);
    }
    
    public function viewCampaign($campaign_id) {
        $campaignModel = new CampaignModel();
        $campaign = $this->marketingModel->getCampaignsById($campaign_id);

        if (!$campaign) {
            throw new \CodeIgniter\Exceptions\PageNotFoundException("Campaign not found");
        }

        return $this->renderTheme('ManagementModule\Views\Marketing\Campaigns\View', ['campaign' => $campaign]);
    }     
    
    public function viewDailyLogs($date = null)
    {
        $date = $this->siteSettings->date ?? date('Y-m-d');

        $this->data['pageTitle'] = 'Marketing Daily Log | ' . $date . ' | MyMI Wallet';
        // Fetch analytics data
        $this->data['reporting'] = $this->getMyMIAnalytics()->reporting();
        $this->data['logs'] = $this->marketingModel->getDailyLogsByDate($date);
        $this->commonData();
        return $this->renderTheme('ManagementModul\Views\Marketing\Daily_Logs', ['logs' => $logs, 'date' => $date]);
    }

    public function viewEmail($titleEncoded = null, $messageId = null)
    {
        log_message('debug', '📧 ManagementController::viewEmail called');
    
        try {
            if (empty($messageId)) {
                return redirect()->back()->with('error', 'Invalid email identifier.');
            }
    
            $emailRecord = $this->marketingModel->getEmailByMessageId($messageId);
    
            if (!$emailRecord) {
                return redirect()->back()->with('error', 'Email not found.');
            }
    
            $socialMediaPosts = $this->getMarketingService()->generateContentFromRaw($emailRecord);
            $emailRecord['social_media'] = $socialMediaPosts['posts'] ?? [];
    
            return $this->renderTheme('Management/Marketing/EmailDetail', [
                'email' => $emailRecord
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ viewEmail() failed: ' . $e->getMessage());
            return $this->failServerError('Unable to load email.');
        }
    }
    
    public function viewGeneratedContent() {
        $contentData = $this->marketingModel->getLastGeneratedContent();  // Get last generated content
        $platformsContent = json_decode($contentData['platforms_content'], true);  // Decode the JSON
    
        $this->data['pageTitle'] = 'MyMI Marketing | Management | MyMI Wallet';
        $this->data['platforms_content'] = $platformsContent;
        $this->commonData();
        $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneGeneratedContent', $this->data);
    }   

    public function viewGeneratedSummaries()
    {
        $this->data['pageTitle'] = 'Generated Summaries';
        $this->data['generatedSummaries'] = $this->marketingModel->getLatestGeneratedSummaries(25);
        $this->renderTheme('ManagementModule\Views\Marketing\resources\generatedSummaries', $this->data);
    }

    public function viewGroupedSummaries()
    {
        try {
            $response = $this->groupSimilarSummariesByCosine(); // reuse Patch 8 method
            if (!is_array($response) && method_exists($response, 'getBody')) {
                $response = json_decode($response->getBody(), true);
            }
    
            $groups = $response['grouped'] ?? [];
            return $this->renderTheme('App\Modules\Management\Views\Marketing\resources\groupedSummariesView', [
                'groupedSummaries' => $groups
            ]);
        } catch (\Throwable $e) {
            log_message('error', '❌ viewGroupedSummaries() failed: ' . $e->getMessage());
            return $this->failServerError("Failed to render grouped summaries UI.");
        }
    }
    
    public function viewTimelineGrouped()
    {
        $rawGroups = $this->getMyMIMarketing()->groupSimilarSummariesByCosine();
        $labeledGroups = $this->getMyMIMarketing()->generateGroupLabelsFromTFIDF($rawGroups['grouped'] ?? []);
    
        $this->data['groupedLabels'] = $labeledGroups;
        return $this->renderTheme('ManagementModule\Views\Marketing\resources\timelineGroupedView', $this->data);
    }
    
    
}
?>
<?php

namespace App\Libraries;

use App\Config\{SiteSettings, SocialMedia};
use App\Libraries\{BaseLoader, MyMIInvestments};
use App\Libraries\Traits\TextProcessor;
use App\Models\{AnalyticalModel, MarketingModel};
use App\Services\{EmailService, MarketingService, SolanaService};
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\Session\Session;
use Myth\Auth\Authorization\GroupModel;
use Exception;
use HTMLPurifier;
use HTMLPurifier_Config;
use Phpml\FeatureExtraction\TokenCountVectorizer as PhpmlTokenCountVectorizer;
use Phpml\Tokenization\WhitespaceTokenizer;
use NlpTools\Tokenizers\WhitespaceTokenizer as NlpWhitespaceTokenizer;
use NlpTools\Similarity\CosineSimilarity;
use Facebook\Facebook;
use Abraham\TwitterOAuth\TwitterOAuth;
use Happyr\LinkedIn\LinkedIn;
use Discord\Discord;
use Discord\Parts\Channel\Message;
use GuzzleHttp\Client;
use Pscrape\Pscrape\Scrape as PscrapeScraper;
use Symfony\Component\DomCrawler\Crawler;
use Google\Cloud\TextToSpeech\V1\TextToSpeechClient;
use Google\Cloud\TextToSpeech\V1\SynthesisInput;
use Google\Cloud\TextToSpeech\V1\VoiceSelectionParams;
use Google\Cloud\TextToSpeech\V1\AudioConfig;
use Google\Cloud\TextToSpeech\V1\AudioEncoding;

class MyMIMarketing
{

    use TextProcessor;
    protected $auth;
    protected $cuID;
    protected $data;
    protected $debug;
    protected $logger;
    protected $request;
    protected $session;
    protected $uri;
    protected $APIs;
    protected $emailService;
    protected $solanaService;
    protected $siteSettings;
    protected $marketingModel;
    protected $analyticalModel;
    protected $socialMedia;
    protected $facebook;
    protected $twitter;
    protected $linkedin;
    protected $discord;
    protected $scrapemax;
    protected $pscrape;
    // protected $initializeServices;

    public function __construct()
    {
        $this->auth = service('authentication');
        $this->logger = service('logger');
        $this->request = service('request');
        $this->session = service('session');
        $this->uri = $this->request->getUri();
        $this->APIs = config('APIs');
        $this->socialMedia = config('SocialMedia');
        $this->siteSettings = config('SiteSettings');
        $this->debug = $this->siteSettings->debug;
        $this->socialMedia = config('SocialMedia');
        $this->marketingModel = new MarketingModel();
        $this->analyticalModel = new AnalyticalModel();
        $this->emailService = service('email');
        $this->solanaService = new SolanaService();
        // $this->twitter = new TwitterOAuth(
        //     API_KEY, 
        //     API_SECRET, 
        //     ACCESS_TOKEN, 
        //     ACCESS_SECRET
        // );
        // $this->initializeServices();
        
        // Initialize Scrapemax and Pscrape clients
        $this->scrapemax = new ScrapemaxClient('https://api.scrapemax.com', $this->APIs->scrapemax_api_key);
        $this->pscrape = new PscrapeScraper();
        
        // Facebook Configuration

        // $fbConfig = config('Facebook');
        // $this->facebook = new Facebook([
        //     'app_id' => $fbConfig->app_id,
        //     'app_secret' => $fbConfig->app_secret,
        //     'default_graph_version' => $fbConfig->default_graph_version,
        // ]);

        // $this->twitter = new TwitterOAuth(
        //     $this->socialMedia->twitter_api_key,
        //     $this->socialMedia->twitter_api_secret_key,
        //     $this->socialMedia->twitter_access_token,
        //     $this->socialMedia->twitter_access_token_secret
        // );

        // $this->linkedin = new LinkedIn(
        //     $this->socialMedia->linkedin_client_id,
        //     $this->socialMedia->linkedin_client_secret
        // );

        // $this->discord = new Discord([
        //     'token' => $twitterConfig->discord_bot_token
        // ]);
    }

    public function marketing()
    {
        $department = $this->department();
        $links = $this->social_media();
        return ['links' => $links, 'department' => $department];
    }

    public function assignMarketingTask($task_info)
    {
        
        $data = [
            'status' => 'Pending',
            'group' => 'Marketing',
            'task' => $task_info['task'],
            'title' => $task_info['title'],
            'description' => 'Complete SEO for ' . $task_info['url'],
            'url' => site_url('/Management/Marketing/Page-SEO/' . $task_info['seo_id']),
        ];

        $this->marketingModel->insertManagementTask($data);
    }

    public function assignTopicsToArticles($articleGroup)
    {
        try {
            $ldaModel = new \App\Libraries\LDA(); // You can later customize this
            return $ldaModel->assignTopics($articleGroup);
        } catch (\Throwable $e) {
            log_message('error', '❌ assignTopicsToArticles() failed: ' . $e->getMessage());
            return [];
        }
    }

    public function autoDistributeHighRelevanceSummaries($minScore = 75)
    {
        $posts = $this->marketingModel->getRecentPosts(10); // Or fetch from buffer
    
        foreach ($posts as $post) {
            $summary = $post['summary'] ?? '';
            $title   = $post['title'] ?? 'Untitled';
        
            if (($post['score'] ?? 0) >= $minScore && !empty($summary)) {
                $message = "**{$title}**\n\n" . word_limiter(strip_tags($summary), 60);
                $this->sendToDiscordNotification($message);
            }
        }
        
    }
    
    public function autoSendToZapier($minScore = 75)
    {
        $posts = $this->marketingModel->getRecentPosts(10);
    
        foreach ($posts as $post) {
            if (($post['score'] ?? 0) >= $minScore) {
                $this->sendToZapier('facebook', $post['summary']); // or 'linkedin', etc.
            }
        }
    }
      
    public function backfillMissingSummaries($limit = 20)
    {
        $missingRecords = $this->marketingModel->getRecordsMissingSummaryOrTitle($limit);
        log_message('debug', '� Found ' . count($missingRecords) . ' records to backfill.');
        
        foreach ($missingRecords as $record) {
            try {
                $cleaned = $this->sanitizeRawEmailContent($record['content'] ?? '');
                $summaryData = $this->summarizeContent($cleaned);
                if (!is_array($summaryData) || empty($summaryData['summary'])) {
                    log_message('warning', "⚠️ No valid summary for ID {$record['id']}");
                    continue;
                }
    
                $title = word_limiter(strip_tags($record['title'] ?? $summaryData['summary']), 12);
                $keywords = implode(',', $summaryData['keywords'] ?? []);
                $summary = $summaryData['summary'];
    
                $this->marketingModel->updateSummaryFallback($record['id'], $title, $summary, $keywords);
                log_message('info', "✅ Updated ID {$record['id']} with summary and title.");
            } catch (\Throwable $e) {
                log_message('error', '❌ Error backfilling record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    }

    public function calculateCosineSimilarity($text1, $text2)
    {
        $tokenizer = new NlpWhitespaceTokenizer();
        $cosine = new CosineSimilarity();
        $set1 = $tokenizer->tokenize($text1);
        $set2 = $tokenizer->tokenize($text2);
        $similarity = $cosine->similarity($set1, $set2);
        $this->logger->debug('Cosine Similarity: ' . $similarity);
        return $similarity;
    }

    private function calculateFeatureScore($sentence, $features)
    {
        $score = 0;
        $words = explode(" ", strtolower($sentence));
        foreach ($words as $word) {
            $score += $features[$word] ?? 0.1; // Default score if feature not found
        }
        return $score;
    }

    private function calculateKeywordScore($sentence, $tokens)
    {
        $score = 0;
        foreach ($tokens as $token) {
            if (strpos(strtolower($sentence), strtolower($token)) !== false) {
                $score++;
            }
        }
        $this->logger->debug('Keyword Score for sentence: ' . $score);
        return $score;
    }

    private function calculateSemanticDiversity($sentence, $summary, $tokens)
    {
        $diversityScore = 0;
        foreach ($summary as $summarizedSentence) {
            if ($this->isSemanticallyDifferent($sentence, $summarizedSentence, $tokens)) {
                $diversityScore++;
            }
        }
        $this->logger->debug('Semantic Diversity Score for sentence: ' . $diversityScore);
        return $diversityScore;
    }
    
    private function compressEmailBody($body)
    {
        // Replace multiple whitespaces (tabs, newlines) with a single space
        $body = preg_replace('/\s+/', ' ', $body);
        return trim($body);
    }

    public function convertToUtf8($content)
    {
        $encoding = mb_detect_encoding($content, "UTF-8, ISO-8859-1, GBK", true);
        return ($encoding == "UTF-8") ? $content : mb_convert_encoding($content, "UTF-8", $encoding);
    }
    
    public function convertUrlsToLinks($text)
    {
        $urlPattern = '/\bhttps?:\/\/\S+/i';
        return preg_replace($urlPattern, '<a href="$0" target="_blank">$0</a>', $text);
    }

    public function debugTopKeywords($id)
    {
        $record = $this->marketingModel->find($id);
        if (!$record) {
            return $this->respond(['status' => 'error', 'message' => 'Record not found'], 404);
        }
    
        $keywords = $this->getTopKeywordScores($record['summary'] ?? $record['content']);
        return $this->respond([
            'status' => 'success',
            'keywords' => $keywords
        ]);
    }
    
    public function department()
    {
        
        $activeCampaigns = $this->marketingModel->getActiveCampaigns();
        $totalActiveCampaigns = $activeCampaigns['num_rows'];
        $activePriorityCampaigns = $this->marketingModel->getActivePriorityCampaigns();
        $totalActivePriorityCampaigns = $activePriorityCampaigns['num_rows'];
        return [
            'getActiveCampaigns' => $activeCampaigns['result'],
            'totalActiveCampaigns' => $totalActiveCampaigns,
            'getActivePriorityCampaigns' => $activePriorityCampaigns['result'],
            'totalActivePriorityCampaigns' => $totalActivePriorityCampaigns,
        ];
    }

    public function distributeGroupedContent(int $campaignId)
    {
        $campaign = $this->marketingModel->getCampaignById($campaignId)[0] ?? null;
        if (!$campaign) {
            log_message('error', "Campaign ID {$campaignId} not found.");
            return;
        }
    
        $message = $campaign['email_message'] ?? $campaign['summary'] ?? 'MyMI Digest';
    
        $platforms = json_decode($campaign['platforms'] ?? '{}', true);
    
        if ($platforms['discord'] ?? false) {
            $this->postToDiscord($message);
        }
    
        if ($platforms['linkedin'] ?? false) {
            $this->postToLinkedIn($message);
        }
    
        if ($platforms['email'] ?? false) {
            $this->emailService->setTo('newsletter@mymiwallet.com');
            $this->emailService->setSubject('📬 MyMI Daily Digest');
            $this->emailService->setMessage(nl2br($message));
            $this->emailService->send();
        }
    
        // ✅ Optional: Send to Zapier
        $payload = [
            'title' => $campaign['name'],
            'message' => $message,
            'platforms' => array_keys(array_filter($platforms)),
            'campaign_id' => $campaignId,
            'link' => site_url('Blog/View/' . url_title($campaign['name'], '-', true)),
        ];
        $this->sendToZapier('grouped_digest', $payload);
    }
    
    public function distributeTradeAlert($alert, $action = 'BUY')
    {
        $message = $this->generateTradeAlertMessage($alert, $action);
    
        // Post to each platform
        $this->postToDiscord($message);
        $this->postToTwitter($message);
        $this->postToFacebook($message);
        $this->postToLinkedIn($message);
    }

    private function extractTopSentences($sentences, $scores, $topN = 5)
    {
        asort($scores, SORT_NUMERIC);
        $topSentenceIndexes = array_keys(array_slice($scores, -$topN, $topN, true));
        $summary = [];
        foreach ($topSentenceIndexes as $index) {
            $summary[] = trim($sentences[$index]);
        }
        return $summary;
    }

    public function enqueueEmailJob($emailData)
    {
        
        $data = ['type' => 'email_processing', 'data' => json_encode($emailData)];
        $this->marketingModel->insertJobQueue($data);
    }

    public function extractFeaturesWithPhpMl($content)
    {
        $vectorizer = new TokenCountVectorizer(new WhitespaceTokenizer());
        $samples = [$content];
        $vectorizer->fit($samples);
        $vectorizer->transform($samples);
    
        $features = $vectorizer->getVocabulary();
        $vectorCounts = $samples[0] ?? [];
        $filteredFeatures = [];
    
        foreach ($features as $feature => $index) {
            $score = $vectorCounts[$index] ?? 0;
            if ($score >= 2) {
                $filteredFeatures[$feature] = $score;
            }
        }
    
        $this->logger->debug('MyMIMarketing L751 - Filtered Feature Vectors (Score ≥ 2): ' . print_r($filteredFeatures, true));
        return $filteredFeatures;
    }    

    /**
     * Dynamically extract top hashtags from content
     */
    protected function extractHashtags(string $text): string
    {
        $words = str_word_count(strtolower(strip_tags($text)), 1);
        $wordFreq = array_count_values($words);

        $filtered = array_filter($wordFreq, fn($freq, $word) => strlen($word) > 3 && $freq > 1, ARRAY_FILTER_USE_BOTH);
        arsort($filtered);

        $topWords = array_slice(array_keys($filtered), 0, 5);

        return implode(' ', array_map(fn($word) => '#' . ucfirst($word), $topWords));
    }

    public function extractKeywords($text, $minScore = 2)
    {
        if (!isset($summary['summary']) || empty($summary['summary'])) {
            log_message('error','MyMIMarketing.php L293: Missing summary key or empty content.');
            return [];
        }
        $text = $summary['summary'];
        
        if (!is_string($text)) {
            log_message('error', 'MyMIMarketing.php L294: Summary content is not a string.');
            return [];
        }

        if (!is_string($text) || empty(trim($text))) {
            log_message('warning', '❌ extractKeywords(): Invalid or empty input string.');
            return [];
        }
        
        $docs = $this->splitIntoSentences($text);
        $docs = array_filter($docs, fn($s) => strlen(trim($s)) > 0);
        $tokenized = array_map(function ($sentence) {
            $tokens = preg_split('/\W+/', strtolower($sentence), -1, PREG_SPLIT_NO_EMPTY);
            return array_filter($tokens, fn($word) => strlen($word) > 2);
        }, $docs);
        
        $tokenized = array_filter($tokenized);
        if (empty($tokenized) || !is_array($tokenized[0])) {
            log_message('error', '❌ extractKeywords(): Tokenized input structure invalid. Using fallback.');
            return $this->generateFallbackKeywords($text);
        }        
        
        $tokenized = array_filter($tokenized);
    
        if (empty($tokenized) || !is_array($tokenized[0])) {
            log_message('error', 'extractKeywords(): Tokenized structure invalid, using fallback.');
            return $this->generateFallbackKeywords($text);
        }
    
        // 🧠 Frequency-based scoring (TextRank-style fallback)
        $scores = [];
        $stopWords = $this->getStopWords();
    
        foreach ($tokenized as $tokens) {
            foreach ($tokens as $word) {
                if (!in_array($word, $stopWords)) {
                    $scores[$word] = ($scores[$word] ?? 0) + 1;
                }
            }
        }
    
        // ⚠️ Filter by minScore
        $scores = array_filter($scores, fn($score) => $score >= $minScore);
    
        if (empty($scores)) {
            log_message('warning', 'extractKeywords(): No keywords met minScore, using fallback.');
            return $this->generateFallbackKeywords($text);
        }
    
        arsort($scores);
        return array_keys(array_slice($scores, 0, 10));
    }
    
    // public function extractKeywords($content, $maxKeywords = 5)
    // {
    //     if (!is_string($content)) {
    //         log_message('error', 'MyMIMarketing::extractKeywords() - Content must be a string.');
    //         return [];
    //     }
    
    //     $content = $this->normalizeUtf8($content);
    //     $sentences = $this->splitIntoSentences($content);
    
    //     if (empty($sentences)) {
    //         log_message('error', 'MyMIMarketing::extractKeywords() - No valid sentences to process.');
    //         return [];
    //     }
    
    //     $tfIdf = new TfIdfTransformer();
    //     $tokenized = [];
    
    //     foreach ($sentences as $i => $sentence) {
    //         $cleaned = strtolower($this->normalizeUtf8(trim($sentence)));
    //         $tokens = array_filter(explode(' ', $cleaned), fn($w) => strlen($w) > 1);
    //         if (!empty($tokens)) {
    //             $tokenized[] = $tokens;
    //         }
    //     }
    
    //     if (empty($tokenized) || !is_array($tokenized[0]) || empty($tokenized[0])) {
    //         log_message('error', '❌ extractKeywords() - Invalid or empty tokenized input: ' . json_encode($tokenized));
    //         return [];
    //     }
    
    //     try {
    //         $tfIdf->fit($tokenized);
    //         $tfIdf->transform($tokenized);
    //     } catch (\Throwable $e) {
    //         log_message('error', '❌ extractKeywords() - TF-IDF error: ' . $e->getMessage());
    //         return [];
    //     }
    
    //     $scores = [];
    //     foreach ($tokenized as $docIndex => $tokens) {
    //         foreach ($tokens as $token) {
    //             if (!is_string($token)) continue;
    //             $scores[$token] = ($scores[$token] ?? 0) + 1.0;
    //         }
    //     }
    
    //     if (empty($scores)) {
    //         log_message('error', '❌ extractKeywords() - No keyword scores generated.');
    //         return [];
    //     }
    
    //     arsort($scores);
    //     return array_slice(array_keys($scores), 0, $maxKeywords);
    // }
    
    public function extractSubtopics(string $text): array
    {
        $sentences = explode('.', $text);
        $chunks = array_chunk($sentences, 2); // Every 2 sentences = 1 subtopic
        $subtopics = [];
    
        foreach ($chunks as $chunk) {
            $summary = implode('. ', $chunk);
            $subtopics[] = trim($summary);
        }
    
        return $subtopics;
    }    

    public function fetchAndStoreEmails($emailType)
    {
        log_message('info', "Starting to fetch and store emails of type: {$emailType}");
    
        
        $emailCredentials = [
            'hostname' => '{smtp.dreamhost.com:993/imap/ssl}INBOX',
            'username' => $emailType . '@mymiwallet.com',
            'password' => $this->APIs->emailPassword,
        ];
    
        $inbox = $this->retry(function () use ($emailCredentials) {
            return imap_open($emailCredentials['hostname'], $emailCredentials['username'], $emailCredentials['password']);
        });
    
        if (!$inbox) {
            $this->logger->error('Cannot connect to email server: ' . imap_last_error());
            return;
        }
    
        try {
            $since = date("d-M-Y", strtotime("-1 days"));
            $emails = imap_search($inbox, 'SINCE "' . $since . '"');
            $this->logger->debug('Emails fetched: ' . print_r($emails, true));
    
            // 🚀 Fast Mode: Preload today's processed email identifiers
            $processedEmailsToday = $this->marketingModel->getProcessedEmails(date('Y-m-d'));
            $processedIdentifiers = array_column($processedEmailsToday, 'email_identifier');
    
            if ($emails) {
                $config = \HTMLPurifier_Config::createDefault();
                $purifier = new \HTMLPurifier($config);
    
                foreach ($emails as $email_number) {
                    $overview = imap_fetch_overview($inbox, $email_number, 0);
                    $subject = $this->convertToUtf8($overview[0]->subject ?? '');
                    $date = date("Y-m-d H:i:s", strtotime($overview[0]->date));
                    $sender = $overview[0]->from ?? '';
                    $emailIdentifier = md5($subject . $date . $sender);
                    if ($this->isEmailAlreadyHandled($emailIdentifier)) {
                        log_message('info', "� Skipping duplicate email: {$emailIdentifier}");
                        continue;
                    }                    
    
                    $emailBody = imap_fetchbody($inbox, $email_number, 1);
                    if (empty(trim($emailBody))) {
                        log_message('error', "Email body is empty for email #{$email_number}");
                        continue;
                    }
    
                    $decodedMessage = $this->decodeSpecialCharacters($emailBody);
                    $sanitizedBody = $purifier->purify($decodedMessage);
                    $compressedBody = $this->compressEmailBody($sanitizedBody);
                    $compressedBody = mb_substr($compressedBody, 0, 60000); // Truncate to 60K chars
    
                    $textOnlyContent = $this->stripHtmlTags($sanitizedBody);
                    $summaryArray = $this->summarizeContent($textOnlyContent);
    
                    if (is_array($summaryArray)) {
                        $summaryString = $summaryArray['summary'] ?? implode('. ', array_map('strval', $summaryArray));
                        $features = $summaryArray['features'] ?? [];
                        $tokens = $summaryArray['tokens'] ?? [];
                        $sentences = $summaryArray['sentences'] ?? [];
                    } else {
                        $summaryString = strval($summaryArray);
                        $features = $tokens = $sentences = [];
                    }
    
                    // ANALYTICS: Calculate and log feature, keyword, and diversity scores
                    $featureScore = $this->calculateFeatureScore($summaryString, $features);
                    $keywordScore = $this->calculateKeywordScore($summaryString, $tokens);
                    $semanticDiversityScore = $this->calculateSemanticDiversity($summaryString, $sentences, $tokens);
                    $this->logger->info("Analytics: FeatureScore={$featureScore}, KeywordScore={$keywordScore}, SemanticDiversity={$semanticDiversityScore}");
    
                    // 🛠️ Add fallback title and URL before insert
                    $fallbackTitle = !empty($subject) ? $subject : 'Untitled Email';
                    $fallbackUrl            = $this->generateEmailFallbackUrl($subject, $emailIdentifier);

                    $email_data             = [
                        'status'            => 'In Review',
                        'type'              => $emailType === 'alerts' ? 'Trade Alerts' : 'Email/Newsletters',
                        'summary'           => $summaryString,
                        'content'           => $textOnlyContent,
                        'email_date'        => $date,
                        'email_subject'     => $subject,
                        'email_body'        => $compressedBody,
                        'email_sender'      => $sender,
                        'created_on'        => date("Y-m-d H:i:s"),
                        'modified_on'       => date("Y-m-d H:i:s"),
                        'email_identifier'  => $emailIdentifier,
                        'scraped_at'        => date("Y-m-d H:i:s"),
                        'title'             => $fallbackTitle,
                        'url'               => $fallbackUrl, // 👈 inject URL here
                    ];

                    $this->marketingModel->storeEmail($email_data);
    
                    // Store analytics for categorization
                    $analyticsData = [
                        'email_identifier' => $emailIdentifier,
                        'feature_score' => $featureScore,
                        'keyword_score' => $keywordScore,
                        'semantic_diversity_score' => $semanticDiversityScore,
                        'created_on' => date("Y-m-d H:i:s")
                    ];
                    $this->marketingModel->storeContentAnalytics([
                        'source_type'               => 'email',
                        'source_identifier'         => $emailIdentifier,
                        'feature_score'             => $featureScore,
                        'keyword_score'             => $keywordScore,
                        'semantic_diversity_score'  => $semanticDiversityScore,
                        'created_on'                => date("Y-m-d H:i:s")
                    ]);                    
    
                    log_message('info', "Stored email and analytics: {$emailIdentifier}");
                }
            } else {
                $this->logger->info('No new emails found.');
            }
        } catch (\Exception $e) {
            $this->logger->error('Exception occurred: ' . $e->getMessage());
            $this->notifyAdminOnError('Email Fetch Exception', $e->getMessage());
        } finally {
            imap_close($inbox);
        }
    }
    
    public function formatBlogPost(string $headline, string $summary): string
    {
        return <<<HTML
    <h2>{$headline}</h2>
    <p>{$summary}</p>
    <p>Get the full breakdown inside your MyMI Wallet dashboard, where investing meets innovation.</p>
    HTML;
    }
    
    public function formatEmailBlast(string $headline, string $summary): string
    {
        return <<<EMAIL
    Subject: {$headline}
    
    {$summary}
    
    Explore more at https://www.mymiwallet.com
    EMAIL;
    }
    
    public function formatSocialPost(string $headline, string $summary, string $platform = 'generic'): string
    {
        $hashtags = '#MyMIWallet #InvestSmarter #FinancialFreedom';
        switch ($platform) {
            case 'facebook':
            case 'linkedin':
                return "{$headline}\n\n{$summary}\n\nStart your journey: https://www.mymiwallet.com\n\n{$hashtags}";
            case 'twitter':
            case 'x':
                $shortSummary = substr($summary, 0, 180);
                return "{$headline} — {$shortSummary}...\nhttps://www.mymiwallet.com\n{$hashtags}";
            default:
                return "{$headline}\n\n{$summary}\nhttps://www.mymiwallet.com";
        }
    }
    
    public function formatDiscordPost(string $headline, string $summary): string
    {
        return "**{$headline}**\n\n{$summary}\n\n👉 <https://www.mymiwallet.com>";
    }
    
    // private function normalizeUtf8($text)
    // {
    //     return is_string($text) ? mb_convert_encoding($text, 'UTF-8', 'UTF-8') : '';
    // }

    private function normalizeUtf8($text)
    {
        return mb_convert_encoding($text, 'UTF-8', mb_detect_encoding($text, 'UTF-8, ISO-8859-1', true));
    }

    private function notifyAdminOnError($subject, $message)
    {
        $this->emailService->setFrom('no-reply@mymiwallet.com', 'MyMI Wallet');
        $this->emailService->setTo('team@mymiwallet.com');
        $this->emailService->setSubject($subject);
        $this->emailService->setMessage($message);

        if (!$this->emailService->send()) {
            $this->logger->error('Failed to send error notification email: ' . print_r($this->emailService->printDebugger(), true));
        }
    }

    public function notifyModerators(array $post)
    {
        $platforms = json_decode($post['platforms'] ?? '{}', true);
        $used = implode(', ', array_keys(array_filter($platforms)));
    
        $subject = "📢 Buffer Post Promoted: {$post['keyword']}";
        $message = "✅ Post ID: {$post['id']}\n\n"
                 . "Summary: " . wordwrap($post['summary'], 80) . "\n\n"
                 . "Promoted Platforms: {$used}\n\n"
                 . site_url('Marketing/PreviewGeneratedPost/' . $post['id']);
    
        $email = \Config\Services::email();
        $email->setTo('moderators@mymiwallet.com');
        $email->setSubject($subject);
        $email->setMessage($message);
        $email->send();
    
        log_message('info', "📬 Sent moderator alert for Buffer ID {$post['id']}");
    }
    
    public function reprocessIncompleteEmails()
    {
        $incompleteRecords = $this->marketingModel->getEmailsMissingTitleOrUrl(20); // Add this method to model
        log_message('debug', '📋 MyMIMarketing L986 - Incomplete records fetched: ' . count($incompleteRecords));
        foreach ($incompleteRecords as $record) {
            try {
                $emailId = $record['message_id'] ?? null;
                $content = $record['content'] ?? '';
                $title = $record['title'] ?? '';
                $url = $record['url'] ?? $this->generateEmailFallbackUrl($subject, $emailIdentifier) ?? '';
    
                if (!$emailId) continue;
    
                $email = $this->fetchEmailByMessageId($emailId); // You can define a helper that uses IMAP
                if ($email) {
                    $content = $email['body'] ?? $content;
                    $title = $email['subject'] ?? $title;
                    $url = $email['link'] ?? $url;
                }
    
                // Use fallback if missing
                $title = $title ?: 'Untitled Email - ' . date('Y-m-d H:i');
                $url = $url ?: 'https://mymiwallet.com/news/fallback';
    
                $this->marketingModel->updateEmailFields($record['id'], $title, $url, $content);
            } catch (\Throwable $e) {
                log_message('error', '❌ Error backfilling email ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    }
    
    private function retry($function, $attempts = 3, $delay = 2000)
    {
        $attempt = 0;
        while ($attempt < $attempts) {
            try {
                return $function();
            } catch (Exception $e) {
                $attempt++;
                if ($attempt >= $attempts) {
                    throw $e;
                }
                sleep($delay / 1000);
            }
        }
    }
    
    protected function safeGetSentence(array $sentences, int $index): string
    {
        if (isset($sentences[$index])) {
            return $sentences[$index];
        } else {
            log_message('error', "safeGetSentence(): Index $index not found in sentence list.");
            return '';
        }
    }
    
    private function sanitizeContent($content)
    {
        // Remove script tags and their content
        $content = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $content);

        // Remove noscript tags and their content
        $content = preg_replace('#<noscript(.*?)>(.*?)</noscript>#is', '', $content);

        // Strip remaining HTML tags
        $content = strip_tags($content) ?? '';

        // Ensure space between sentences
        $content = preg_replace('/\.\s*/', '. ', $content);

        return $content;
    }

    /**
     * Sanitize email content and decode quoted-printable UTF-8 characters, emojis, and artifacts.
     */
    public function sanitizeRawEmailContent($html)
    {
        try {
            if (!is_string($html)) return '';
    
            // Decode quoted-printable encoding artifacts (like =E2=80=99)
            $decoded = quoted_printable_decode($html);
    
            // Remove lingering MIME base64 headers or odd line breaks
            $decoded = preg_replace('/=\r?\n/', '', $decoded); // soft line breaks
            $decoded = str_replace(['=3D', '=20'], ['=', ' '], $decoded); // encoded =, space
    
            // Strip HTML
            $text = strip_tags($decoded);
            $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5);
            $text = preg_replace('/\s+/', ' ', $text);
            $text = trim($text);
    
            // Final sanity check
            if (strlen($text) < 100 || substr_count($text, ' ') < 5) {
                log_message('error', '❌ Sanitized email too short or unreadable. Preview: ' . substr($text, 0, 100));
                return '';
            }
    
            return $text;
        } catch (\Throwable $e) {
            log_message('error', 'sanitizeRawEmailContent() exception: ' . $e->getMessage());
            return '';
        }
    }  

    private function sanitizeText(string $text): string
    {
        return strip_tags(html_entity_decode($text));
    }

    public function saveTradingViewChart($chartUrl, $ticker)
    {
        // Ensure the directory exists
        $saveDir = FCPATH . 'assets/images/Alerts/Charts/';
        if (!is_dir($saveDir)) {
            mkdir($saveDir, 0777, true);
        }
    
        // Define the filename based on the ticker and timestamp
        $timestamp = time();
        $filename = "{$ticker}_chart_{$timestamp}.jpg";
        $savePath = $saveDir . $filename;
    
        // Use cURL to download the image
        $ch = curl_init($chartUrl);
        $fp = fopen($savePath, 'wb');
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_exec($ch);
        curl_close($ch);
        fclose($fp);
    
        // Check if the file was saved successfully
        if (file_exists($savePath)) {
            // Store only the filename in the database
            return $filename;
        } else {
            return null;
        }
    }
    
    public function scoreKeywordRelevance(string $keyword, string $summary): int
    {
        $keyword = strtolower($keyword);
        $summaryText = strtolower(strip_tags($summary));
        
        $totalWords = str_word_count($summaryText);
        if ($totalWords === 0) return 0;
    
        $matches = substr_count($summaryText, $keyword);
        $score = min(100, round(($matches / $totalWords) * 500)); // scale relevance to 100 max
    
        return $score;
    }
    
    public function scrapeTokenContent($tokenInfo)
    {
        $scrapedData = [];
        foreach ($tokenInfo as $token) {
            if (!empty($token['website'])) {
                log_message('debug', 'MyMIMarketing L101 - $token[website]: ' . $token['website']);
                $websiteData = $this->scrapeWebsite($token['website']);
                log_message('debug', 'MyMIMarketing L103 - $websiteData: ' . print_r($websiteData, true));
                $this->storeTemporaryData($websiteData);
                $scrapedData[] = $websiteData;
            }
            if (!empty($token['facebook'])) {
                log_message('debug', 'MyMIMarketing L109 - $token[facebook]: ' . $token['facebook']);
                $facebookData = $this->scrapeFacebook($token['facebook']);
                log_message('debug', 'MyMIMarketing L111 - $facebookData: ' . print_r($facebookData, true));
                $this->storeTemporaryData($facebookData);
                $scrapedData[] = $facebookData;
            }
            if (!empty($token['twitter'])) {
                log_message('debug', 'MyMIMarketing L117 - $token[twitter]: ' . $token['twitter']);
                $twitterData = $this->scrapeTwitter($token['twitter']);
                log_message('debug', 'MyMIMarketing L119 - $twitterData: ' . print_r($twitterData, true));
                $this->storeTemporaryData($twitterData);
                $scrapedData[] = $twitterData;
            }
            log_message('debug', 'MyMIMarketing L117 - $token[symbol] $token[name]: ' . $token['symbol'] . ' ' . $token['coin_name']);
            $googleData = $this->scrapeGoogleSearch($token['symbol'] . ' ' . $token['coin_name']);
            $this->storeTemporaryData($googleData);
            $scrapedData[] = $googleData;
        }
        return $scrapedData;
    }

    public function scrapeAndGenerateContent($accountid, $category, $platform = null)
    {
        $generatedData = [];

        // Fetch token information based on category
        if ($category === 'Solana') {
            $this->solanaModel = new SolanaModel();
            $tokenInfo = $this->solanaModel->getTokenInfoByID($accountid);
        } else {
            $tokenInfo = [];
        }

        // Proceed if token information is available
        if (!empty($tokenInfo)) {
            $scrapedData = [];

            try {
                // Scrape content from token's website and social media
                log_message('debug', 'Attempting to scrape token content.');
                $scrapedData = $this->scrapeTokenContent($tokenInfo);
                log_message('debug', 'Scraped Data: ' . print_r($scrapedData, true));
            } catch (\GuzzleHttp\Exception\ClientException $e) {
                if ($e->getResponse()->getStatusCode() == 403) {
                    log_message('critical', '403 Forbidden encountered while scraping website: ' . $e->getMessage());
                } else {
                    log_message('critical', 'ClientException: ' . $e->getMessage());
                }
            } catch (\Exception $e) {
                log_message('critical', 'An error occurred while scraping token content: ' . $e->getMessage());
            }

            try {
                // Generate content from the scraped data
                if (!empty($scrapedData)) {
                    log_message('debug', 'Attempting to generate content from scraped data.');
                    $generatedData = $this->generateContentFromScrapedData($scrapedData, $platform);
                    log_message('debug', 'Generated Data: ' . print_r($generatedData, true));
                } else {
                    log_message('debug', 'Scraped data is empty.');
                }
            } catch (\Exception $e) {
                log_message('critical', 'An error occurred while generating content: ' . $e->getMessage());
            }
        } else {
            log_message('debug', 'Token information is empty.');
        }

        return $generatedData;
    }
    
    private function scrapeWebsite($url)
    {
        try {
            $client = new Client();
            $response = $client->get($url);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $crawler = new \Symfony\Component\DomCrawler\Crawler($html);
                return [
                    'title' => $crawler->filter('title')->text(),
                    'content' => $this->sanitizeContent($crawler->filter('body')->html()),
                ];
            }
        } catch (RequestException $e) {
            $this->logger->error('Error scraping website: ' . $e->getMessage());
        }
        return [];
    }

    private function scrapeFacebook($url)
    {
        return $this->scrapeWithRetries('facebook', $url, function($content) {
            return [
                'title' => $content['page_title'] ?? 'No title',
                'content' => $this->sanitizeContent($content['posts'] ?? 'No posts'),
            ];
        });
    }

    private function scrapeTwitter($url)
    {
        return $this->scrapeWithRetries('twitter', $url, function($content) {
            return [
                'title' => $content['profile'] ?? 'No title',
                'content' => $this->sanitizeContent($content['tweets'] ?? 'No tweets'),
            ];
        });
    }

    private function scrapeWithRetries($type, $url, $transform, $retries = 3) {
        $backoff = 1;
        for ($i = 0; $i < $retries; $i++) {
            try {
                $response = $this->scrapemax->scrape(['target_url' => $url, 'type' => 'data', 'js_enabled' => 1, 'base64_encoded' => 0]);
                $content = json_decode($response->getBody()->getContents(), true);
                if (empty($content)) {
                    throw new \Exception("No content returned");
                }
                return $transform($content);
            } catch (ServerException $e) {
                if ($i < $retries - 1) {
                    sleep($backoff);
                    $backoff *= 2;
                    continue;
                }
                $this->logger->error("Error scraping $type: " . $e->getMessage());
            } catch (RequestException $e) {
                $this->logger->error("Error scraping $type: " . $e->getMessage());
                break;
            } catch (\Exception $e) {
                $this->logger->error("General error scraping $type: " . $e->getMessage());
                break;
            }
        }
        return ['title' => 'No title', 'content' => 'No content'];
    }    

    private function scrapeGoogleSearch($query)
    {
        try {
            $results = $this->pscrape->rollingCurl('rollingCurl');
            $results->request('https://www.google.com/search?q=' . urlencode($query));
            $content = '';
            $resultsData = $results->execute();
            if (!is_array($resultsData)) {
                throw new \Exception("Google search did not return an array");
            }
            foreach ($resultsData as $result) {
                $content .= $result['title'] . ' ' . $result['link'] . ' ';
            }
            return [
                'title' => 'Google Search Results for ' . $query,
                'content' => $this->sanitizeContent($content),
            ];
        } catch (\Exception $e) {
            $this->logger->error('Error scraping Google Search: ' . $e->getMessage());
        }
        return [];
    }

    public function sendZapierTradeAlert($tradeAlert) {
        $zapierWebhookUrl = "YOUR_ZAPIER_WEBHOOK_URL";
    
        $payload = json_encode([
            'ticker' => $tradeAlert['ticker'],
            'price' => $tradeAlert['price'],
            'sentiment' => $tradeAlert['market_sentiment'],
            'chart_link' => $tradeAlert['link'],
            'created_on' => $tradeAlert['created_on']
        ]);
    
        $ch = curl_init($zapierWebhookUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $response;
    }
    
    public function standaloneScrapeWebsite($url) {
        try {
            $client = new Client();
            $response = $client->get($url);
            if ($response->getStatusCode() == 200) {
                $html = $response->getBody()->getContents();
                $crawler = new Crawler($html);

                $content = $crawler->filter('body')->each(function ($node) {
                    return $node->text();
                });

                $content = array_filter($content, function ($text) {
                    return !str_contains($text, 'footer') && !str_contains($text, 'head');
                });

                $data = [
                    'url' => $url,
                    'content' => implode(' ', $content),
                    'scraped_at' => date('Y-m-d H:i:s')
                ];

                $this->saveTemporaryScrapedData($data);
                return $data;
            } else {
                log_message('error', 'Failed to scrape website. HTTP status code: ' . $response->getStatusCode());
            }
        } catch (RequestException $e) {
            log_message('error', 'RequestException while scraping website: ' . $e->getMessage());
        } catch (\Throwable $th) {
            log_message('error', 'Throwable error while scraping website: ' . $th->getMessage());
        }
        return false;
    }

    public function saveTemporaryScrapedData($data) {
        $marketingModel = new \App\Models\MarketingModel();
        return $this->marketingModel->insertTemporaryData($data);
    }

    public function storeGroupedContentDrafts(array $groupedLabels, array $drafts): int
    {
        $campaign = [
            'name' => 'Auto-Grouped Digest - ' . date('M j, Y'),
            'created_on' => date('Y-m-d H:i:s'),
            'summary' => strip_tags($drafts['email']),
            'blog_content' => $drafts['blog'],
            'email_message' => $drafts['email'],
            'discord_message' => strip_tags($drafts['email']),
            'linkedin_message' => strip_tags($drafts['email']),
            'assigned_on' => date('Y-m-d H:i:s'),
            'assigned_to' => 'system',
            'status' => 1,
            'stage' => 'draft',
            'platforms' => json_encode(['email'=>true, 'discord'=>true, 'linkedin'=>true]),
            'primary_content' => json_encode($groupedLabels),
        ];
    
        $this->marketingModel->save($campaign);
        return $this->marketingModel->getInsertID();
    }
    
    private function storeTemporaryData($data)
    {
        
        if (!empty($data)) {
            $this->marketingModel->insertTemporaryData($data);
        } else {
            $this->logger->warning('Attempted to store empty data.');
        }
    }
    
    private function selectSummarySentences($sentences, $scores, $topN = 5)
    {
        arsort($scores, SORT_NUMERIC);
        $topSentenceIndexes = array_keys(array_slice($scores, 0, $topN, true));
        $summary = array_intersect_key($sentences, array_flip($topSentenceIndexes));
        usort($summary, function ($a, $b) use ($sentences) {
            return array_search($a, $sentences) - array_search($b, $sentences);
        });
        return $summary;
    }

    private function splitIntoSentences($content)
    {
        $content = preg_replace('/\s+/', ' ', trim($content));
        $sentences = preg_split('/(?<=[.!?])\s+(?=[A-Z])/', $content, -1, PREG_SPLIT_NO_EMPTY);
    
        return array_values(array_filter($sentences, function ($s) {
            $s = trim(strip_tags($s));
            return strlen($s) >= 10 && substr_count($s, ' ') >= 2;
        }));
    }
    
    public function summarize($text, $method = 'textrank', $charLimit = 500)
    {
        $text = $this->cleanText($text);
        if ($method === 'tfidf') {
            return $this->summarizeText($text);
        } else {
            return $this->summarizeContent($text, $charLimit);
        }
    }    
    
    public function summarizeContent($content, $charLimit = 500)
    {
        // !! DON'T HAVE OPENAI INTEGRATED, NEED TO INTEGRATE THAT API OR COMPOSER LIBRARY FIRST. THE CODE PROVIDED DIDN'T WORK FOR THIS SO PROVIDE THE CORRECT PHP COMPOSER LIBRARY TO ADD HERE - For ChatGPT Shadi GPT
        // try {
        //     $response = $this->openAI->completions()->create([
        //         'model' => 'text-davinci-003',
        //         'prompt' => 'Summarize the following content:\n\n' . $text,
        //         'max_tokens' => 150,
        //     ]);
        //     return explode('. ', $response['choices'][0]['text']);
        // } catch (Exception $e) {
        //     $this->logger->error('Error in summarizing content: ' . $e->getMessage());
        //     return [];
        // }

        if (empty(trim($content))) {
            $this->logger->error('$content is Empty for summarizeContent() function');
            return [];
        }

        $sentences = $this->splitIntoSentences($content);
        if (empty($sentences) || count($sentences) < 2) {
            log_message('warning', '⚠️ summarizeContent(): Not enough valid sentences to summarize.');
            return null;
        }        
        
        if (empty($sentences)) {
            $this->logger->error('No sentences found for summarization');
            return [];
        }

        $tokens = $this->tokenizeWithNlpTools($content);
        $features = $this->extractFeaturesWithPhpMl($content);
        $wordFrequencies = $this->calculateWordFrequencies($content, $this->getStopWords());
        $similarityMatrix = $this->buildSimilarityMatrix($sentences, $wordFrequencies);
        $scores = $this->pageRank($similarityMatrix);
        $summary = $this->buildSummaryToCharLimit($sentences, $scores, $charLimit);
        $finalSummary = $this->convertUrlsToLinks($summary);

        return !empty($finalSummary) ? [
            'sentences' => $sentences,
            'tokens' => $tokens,
            'features' => $features,
            'wordFrequencies' => $wordFrequencies,
            'similarityMatrix' => $similarityMatrix,
            'scores' => $scores,
            'summary' => $finalSummary,
        ] : $summary;
    }

    public function summarizeContentFromHtml($html)
    {
        try {
            if (empty($html)) {
                log_message('warning', 'MyMIMarketing L1166 - summarizeContentFromHtml(): Empty input.');
                return null;
            }
    
            // Clean and sanitize HTML content
            $content = $record['content'] ?? '';
            if (is_array($content)) $content = implode(' ', array_map('strip_tags', $content));
            $clean = $this->sanitizeRawEmailContent($content); // already exists
            $clean = preg_replace('/[^[:print:]]/', '', $clean); // non-printable cleanup
            if (strlen($clean) < 500 || substr_count($clean, ' ') < 10) {
                log_message('error', '❌ MyMIMarketing L1191 - summarizeContentFromHtml(): Invalid summary structure or too short.');
                return null;
            }

            $cleanText = $clean;
    
            if (!is_string($cleanText) || strlen($cleanText) < 100 || substr_count($cleanText, ' ') < 10) {
                log_message('warning', 'MyMIMarketing L1174 - summarizeContentFromHtml(): Cleaned content too short or malformed.');
                return null;
            }
    
            // Try TF-IDF summarization
            $summary = $this->summarizeText($cleanText);
            if (empty($summary) || strlen($summary) < 100) {
                log_message('warning', 'MyMIMarketing L1181 - summarizeContentFromHtml(): TF-IDF summary too short — trying TextRank fallback.');
                $summary = $this->summarizeContent($cleanText);
            }
    
            if (empty($summary) || strlen($summary) < 50) {
                log_message('warning', 'MyMIMarketing L1186 - summarizeContentFromHtml(): Summary failed even after fallback.');
                return null;
            }
            
            if (!isset($summary['summary']) || strlen(trim($summary['summary'])) < 15) {
                log_message('error', '❌ MyMIMarketing L1191 - summarizeContentFromHtml(): Invalid summary structure or too short.');
                return null;
            }            
            return $summary;
        } catch (\Throwable $e) {
            log_message('error', 'MyMIMarketing L1196 - summarizeContentFromHtml() Exception: ' . $e->getMessage());
            return null;
        }
    }  
    
    public function summarizeContentTextRank($content)
    {
        $sentences = $this->splitIntoSentences($content);
        $similarityMatrix = $this->buildSimilarityMatrix($sentences);
        $scores = $this->pageRank($similarityMatrix);
        return $this->extractTopSentences($sentences, $scores);
    }

    public function summarizeText($text, $maxSentences = 5)
    {
        if (!is_string($text) || empty(trim($text))) {
            log_message('error', 'summarizeText(): Empty or invalid input text provided.');
            return 'Summary not available.';
        }
    
        $sentences = $this->splitIntoSentences($text);
        if (empty($sentences) || count($sentences) < 2) {
            log_message('warning', 'summarizeText(): Not enough content to summarize.');
            return implode(' ', $sentences);
        }
    
        $wordFrequencies = $this->calculateWordFrequencies($text, $this->getStopWords());
        $similarityMatrix = $this->buildSimilarityMatrix($sentences, $wordFrequencies);
        $scores = $this->pageRank($similarityMatrix);
    
        arsort($scores);
        $topIndexes = array_slice(array_keys($scores), 0, $maxSentences);
        sort($topIndexes);
    
        $summary = implode(' ', array_map(function ($i) use ($sentences) {
            return $sentences[$i] ?? '';
        }, $topIndexes));
    
        return trim($summary);
    }
    
    // public function summarizeText($text, $numSentences = 3)
    // {
    //     log_message('debug', 'summarizeText() Input Sample: ' . substr($text, 0, 300));
    
    //     if (empty($text) || !is_string($text)) {
    //         log_message('warning', 'MyMIMarketing::summarizeText() - Invalid or empty input.');
    //         return '';
    //     }
    
    //     $text = $this->normalizeUtf8($text);
    //     $sentences = $this->splitIntoSentences($text);
    
    //     if (count($sentences) < 2) {
    //         log_message('debug', 'MyMIMarketing::summarizeText() - Not enough sentences to summarize.');
    //         return $text;
    //     }
    
    //     $documents = array_filter(array_map(function ($sentence) {
    //         $tokens = $this->tokenizeWithNlpTools($this->normalizeUtf8($sentence));
    //         return is_array($tokens) && count($tokens) > 0 ? $tokens : null;
    //     }, $sentences));
    
    //     if (empty($documents) || !is_array($documents[0]) || empty($documents[0])) {
    //         log_message('warning', '❌ summarizeText() - Token documents malformed: ' . json_encode($documents));
    //         return '';
    //     }
    
    //     try {
    //         $tfIdf = new TfIdfTransformer();
    //         $tfIdf->fit($documents);
    //         $tfIdf->transform($documents);
    //     } catch (\Throwable $e) {
    //         log_message('error', 'MyMIMarketing::summarizeText() - TF-IDF error: ' . $e->getMessage());
    //         return '';
    //     }
    
    //     $scores = [];
    //     foreach ($documents as $i => $tokens) {
    //         $score = 0.0;
    //         foreach ($tokens as $token) {
    //             $score += is_string($token) ? (strlen($token) > 3 ? 1.2 : 0.8) : 0.0;
    //         }
    //         $scores[$i] = $score;
    //     }
    
    //     arsort($scores);
    //     $topIndexes = array_slice(array_keys($scores), 0, $numSentences);
    //     sort($topIndexes);
    
    //     $summary = implode(' ', array_intersect_key($sentences, array_flip($topIndexes)));
    //     log_message('info', 'MyMIMarketing::summarizeText() - Final summary generated.');
    //     return $this->normalizeUtf8($summary);
    // }
    
    protected function buildSummaryToCharLimit(array $sentences, array $topIndexes, int $charLimit = 280): string
    {
        $summary = '';
        foreach ($topIndexes as $index) {
            if (!isset($sentences[$index])) {
                log_message('error', "buildSummaryToCharLimit(): ❌ Sentence index $index not found.");
                continue;
            }
    
            $nextSentence = $sentences[$index];
            if (strlen($summary . ' ' . $nextSentence) > $charLimit) {
                break;
            }
    
            $summary .= $nextSentence . ' ';
        }
    
        return trim($summary);
    }
    
    private function buildSimilarityMatrix($sentences, $wordFrequencies)
    {
        $matrix = [];
        $sentenceLength = count($sentences);
    
        for ($i = 0; $i < $sentenceLength; $i++) {
            for ($j = 0; $j < $sentenceLength; $j++) {
                if ($i !== $j) {
                    $sentenceI = $sentences[$i] ?? null;
                    $sentenceJ = $sentences[$j] ?? null;
    
                    if (empty($sentenceI) || empty($sentenceJ)) {
                        log_message('error', "buildSimilarityMatrix(): Missing sentence at index {$i} or {$j}.");
                        continue;
                    }
    
                    $matrix[$i][$j] = $this->calculateSimilarity($sentenceI, $sentenceJ, $wordFrequencies);
                }
            }
        }
    
        return $matrix;
    }
    
    private function calculateSimilarity($sentence1, $sentence2, $wordFrequencies)
    {
        $sentence1 = is_string($sentence1) ? strtolower($sentence1) : '';
        $sentence2 = is_string($sentence2) ? strtolower($sentence2) : '';
    
        $words1 = array_unique(str_word_count($sentence1, 1));
        $words2 = array_unique(str_word_count($sentence2, 1));
        $commonWords = array_intersect($words1, $words2);
    
        $score = 0;
        foreach ($commonWords as $word) {
            $score += (float) ($wordFrequencies[$word] ?? 0);
        }
    
        $logWordCount1 = count($words1) > 0 ? log(count($words1)) : 0;
        $logWordCount2 = count($words2) > 0 ? log(count($words2)) : 0;
    
        if ($logWordCount1 + $logWordCount2 == 0) {
            return 0;
        }
    
        return $score / ($logWordCount1 + $logWordCount2);
    }    
    
    private function calculateWordFrequencies($content, $stopWords)
    {
        $frequencies = [];
        $words = preg_split('/\s+/', strtolower($content));
        foreach ($words as $word) {
            if (!in_array($word, $stopWords) && strlen($word) > 1) {
                $frequencies[$word] = ($frequencies[$word] ?? 0) + 1;
            }
        }
        arsort($frequencies);
        return $frequencies;
    }
    
    public function cleanHtmlSummaryPreview($text)
    {
        return preg_replace(['/=3D/', '/=20/', '/=E2=80=94/', '/=E2=80=99/', '/=E2=80=A6/'], ['=', ' ', '—', '’', '...'], $text);
    }
    
    private function cleanText($text) {
        $text = $this->decodeSpecialCharacters($text);
        $text = $this->sanitizeRawEmailContent($text);
        return $this->normalizeUtf8(strip_tags($text));
    }    

    public function cleanTitle(string $rawTitle): string
    {
        $clean = $rawTitle;
        $clean = str_replace(['_', '-'], ' ', $clean);          // Replace underscores and dashes with space
        $clean = preg_replace('/\s+/', ' ', $clean);             // Collapse multiple spaces
        $clean = html_entity_decode($clean, ENT_QUOTES | ENT_HTML5, 'UTF-8'); // Decode HTML entities
        $clean = preg_replace('/[^\w\s.,!?\'"()-]/u', '', $clean); // Remove weird characters except punctuation
        $clean = trim($clean);
    
        // Capitalize properly if it got smashed
        if (strlen($clean) < 150 && !preg_match('/[a-z]\s[A-Z]/', $clean)) {
            $clean = ucwords(strtolower($clean));
        }
    
        return $clean;
    }
    
    private function combineScores($featureScore, $keywordScore, $pageRankScore, $semanticDiversityScore)
    {
        $featureScore = is_numeric($featureScore) ? (float)$featureScore : 0.0;
        $keywordScore = is_numeric($keywordScore) ? (float)$keywordScore : 0.0;
        $pageRankScore = is_numeric($pageRankScore) ? (float)$pageRankScore : 0.0;
        $semanticDiversityScore = is_numeric($semanticDiversityScore) ? (float)$semanticDiversityScore : 0.0;
    
        $combinedScore = 0.4 * $featureScore + 0.2 * $keywordScore + 0.3 * $pageRankScore + 0.1 * $semanticDiversityScore;
        $this->logger->debug('✅ Combined Score for sentence: ' . $combinedScore);
        return $combinedScore;
    }    

    public function decodeMimeHeaderSafe($string)
    {
        try {
            return mb_decode_mimeheader($string);
        } catch (\Throwable $e) {
            log_message('error', 'decodeMimeHeaderSafe() failed: '.$e->getMessage());
            return $string;
        }
    }
    
    private function decodeSpecialCharacters($text)
    {
        return html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    }

    /**
     * Generate Blog post content.
     */
    public function generateBlogContent(array $tradeAlert): string
    {
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $tradeDesc = $tradeAlert['trade_description'] ?? '';
        $news = $tradeAlert['financial_news'] ?? '';
        $details = $tradeAlert['details'] ?? '';
        $content = "Blog Post: In-depth Market Analysis on {$ticker} ({$company})\n\n"
                 . "Current Price: \${$price}\n\n"
                 . "Trade Analysis: {$tradeDesc}\n\n"
                 . "Financial News: {$news}\n\n"
                 . "Detailed Analysis: {$details}\n\n"
                 . "Stay tuned for more insights!";
        return $content;
    }
    
    /**
     * Generate Email content.
     */
    public function generateEmailContent(array $tradeAlert): string
    {
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $tradeDesc = $tradeAlert['trade_description'] ?? '';
        $news = $tradeAlert['financial_news'] ?? '';
        $details = $tradeAlert['details'] ?? '';
        $content = "Email Alert for {$ticker} ({$company}):\n"
                 . "Current Price: \${$price}\n"
                 . "Trade Signal: {$tradeDesc}\n"
                 . "Latest News: {$news}\n"
                 . "Analysis Details: {$details}\n"
                 . "For more information, visit our website.";
        return $content;
    }

    private function generateEmailFallbackUrl(string $subject, string $emailIdentifier): string
    {
        $safeSubject = urlencode(substr($subject, 0, 50));
        return site_url('Management/Marketing/Email/' . $safeSubject . '/' . md5($emailIdentifier));
    }    
    
    public function generateGroupedBlogAndEmailDrafts(array $groupedLabeledSummaries): array
    {
        $blog = '';
        $email = '';
    
        foreach ($groupedLabeledSummaries as $group) {
            $label = $group['label'] ?? 'Market Update';
            $blog .= "<h2>{$label}</h2>\n";
            $email .= strtoupper($label) . "\n\n";
    
            foreach ($group['items'] as $item) {
                $title = $item['title'] ?? '(Untitled)';
                $summary = strip_tags($item['summary'] ?? '');
                $blog .= "<h4>{$title}</h4><p>{$summary}</p>\n";
                $email .= "- {$title}: {$summary}\n\n";
            }
    
            $blog .= "<hr/>\n";
            $email .= str_repeat('-', 40) . "\n\n";
        }
    
        $blog .= "<p>Visit <a href='https://www.mymiwallet.com'>MyMI Wallet</a> to explore more.</p>";
        $email .= "Explore more at https://www.mymiwallet.com";
    
        return [
            'blog' => $blog,
            'email' => $email
        ];
    }
    
    public function generateGroupLabelsFromTFIDF(array $groupedSummaries): array
    {
        $labeledGroups = [];
    
        foreach ($groupedSummaries as $index => $group) {
            $combinedText = implode(' ', array_map(function ($record) {
                return strip_tags($record['summary'] ?? '') . ' ' . ($record['title'] ?? '');
            }, $group));
    
            $topKeywords = $this->getTopKeywordScores($combinedText, 3); // most relevant terms
            $label = implode(' ', array_map('ucfirst', array_slice($topKeywords, 0, 3)));
    
            $labeledGroups[] = [
                'label' => $label ?: 'General Insight',
                'items' => $group
            ];
        }
    
        return $labeledGroups;
    }
    
    /**
     * Generate randomized marketing content for a trade alert.
     *
     * @param array $tradeAlert A record from bf_investment_trade_alerts.
     * @return array Associative array with keys for each social platform.
     */
    public function generateRandomMarketingContent(array $tradeAlert): array
    {
        // 🔥 Diverse intros for engagement
        $intros = [
            "🚨 Breaking Market Update!",
            "📢 Urgent Trade Alert!",
            "🔥 High-Momentum Stock Pick!",
            "🚀 Skyrocketing Stocks!",
            "💰 Smart Money Moves!",
            "⚡ Quick Market Insight!",
            "📈 Bullish Breakout Alert!",
            "📊 Technical Setup Unfolding!",
            "🧐 Deep Market Analysis!",
            "💡 Pro-Level Trading Insight!"
        ];
    
        // 🎭 Emoticons to boost visibility
        $emoticons = ['🚀', '🔥', '💰', '📈', '📊', '⚡', '✅', '🤖', '🎯', '🔍'];
    
        // 🏆 CTAs with strong call-to-action
        $outros = [
            "📊 Stay ahead of the markets!",
            "⏳ Don't miss this setup!",
            "💰 Trade smart & maximize gains!",
            "🚀 Follow for more trade alerts!",
            "📈 Watch this ticker closely!",
            "🔥 This could be the next big mover!",
            "💡 Insights that matter. Stay tuned!",
            "💎 Precision trading at its best!",
            "⚡ More insights coming soon!",
            "📢 Tap in for more premium setups!"
        ];
    
        // 🎯 Randomly select elements
        $intro = $intros[array_rand($intros)];
        $outro = $outros[array_rand($outros)];
        $emote1 = $emoticons[array_rand($emoticons)];
        $emote2 = $emoticons[array_rand($emoticons)];
    
        // 📌 Extract core trade details
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $tradeDesc = trim($tradeAlert['trade_description'] ?? '');
        $news = trim($tradeAlert['financial_news'] ?? '');
        $details = trim($tradeAlert['details'] ?? '');
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        $link = trim($tradeAlert['tv_chart'] ?? $tradeAlert['tv_chart_link'] ?? '');
    
        // 📊 Prepare chart link text (if available)
        $chartText = (!empty($link)) ? "📉 Chart: [View Here]({$link})\n" : '';
    
        // 🧮 Calculate space used by fixed elements
        $fixedLength = strlen($intro) + strlen($outro) + strlen($emote1) + strlen($emote2) + strlen($chartText) + 12; // Buffer spacing
    
        // 📏 Set max allowed length for trade message
        $maxMessageLength = 2000 - $fixedLength;
    
        // ✍️ Construct the trade alert message
        $coreMessage = "Trade Alert for **{$ticker}** ({$company}):\n"
                     . "Price: \${$price}\n"
                     . "Signal: {$tradeDesc}\n"
                     . "News: {$news}\n"
                     . "Details: {$details}\n"
                     . $chartText;
    
        // 🔪 Trim if it exceeds max allowed length
        if (strlen($coreMessage) > $maxMessageLength) {
            $coreMessage = substr($coreMessage, 0, $maxMessageLength - 3) . "...";
        }
    
        // 🏁 Final assembly with intros, outros, and chart link
        $finalMessage = "{$emote1} {$intro}\n{$coreMessage}\n{$outro} {$emote2}";
    
        // 📲 Return platform-specific formats
        return [
            'twitter'  => substr($finalMessage, 0, 280),   // Twitter (X) limit
            'facebook' => substr($finalMessage, 0, 2000),  // Facebook limit
            'linkedin' => substr($finalMessage, 0, 2000),  // LinkedIn limit
            'discord'  => substr($finalMessage, 0, 2000)   // Discord limit
        ];
    }

    public function generateTimelineData($articles)
    {
        $timeline = [];
        foreach ($articles as $article) {
            $date = date('Y-m-d', strtotime($article['scraped_at'] ?? $article['created_at'] ?? 'now'));
            $timeline[$date][] = $article;
        }
    
        ksort($timeline); // Chronological order
        return $timeline;
    }
    
    public function generateVoiceoverMp3FromText($text)
    {
        try {
            $client = new \Google\Cloud\TextToSpeech\V1\TextToSpeechClient();
            $input = new \Google\Cloud\TextToSpeech\V1\SynthesisInput();
            $input->setText($text);
            $voice = new \Google\Cloud\TextToSpeech\V1\VoiceSelectionParams();
            $voice->setLanguageCode('en-US');
            $voice->setSsmlGender(\Google\Cloud\TextToSpeech\V1\SsmlVoiceGender::MALE);
            $audioConfig = new \Google\Cloud\TextToSpeech\V1\AudioConfig();
            $audioConfig->setAudioEncoding(\Google\Cloud\TextToSpeech\V1\AudioEncoding::MP3);
            $response = $client->synthesizeSpeech($input, $voice, $audioConfig);
            $filePath = WRITEPATH . 'uploads/voiceovers/voiceover_' . time() . '.mp3';
            file_put_contents($filePath, $response->getAudioContent());
            return base_url('uploads/voiceovers/' . basename($filePath));
        } catch (\Throwable $e) {
            log_message('error', 'generateVoiceoverMp3FromText() failed: ' . $e->getMessage());
            return null;
        }
    }
    
    /**
     * Generate a Voiceover Script for Video.
     */
    public function generateVoiceoverScript()
    {
        $tradeAlerts = $this->alertsModel->getFilteredTradeAlerts([
            'start' => date('Y-m-d 00:00:00'),
            'end' => date('Y-m-d 23:59:59'),
        ])->get()->getResultArray();
    
        if (empty($tradeAlerts)) {
            return ['status' => 'error', 'message' => 'No trade alerts found for today.'];
        }
    
        $script = "**Voiceover Script: MyMI Trade Alerts - Top Stock Movers**\n\n[INTRO]\n";
        $script .= "Welcome to today’s MyMI Trade Alerts! We’re breaking down the hottest stocks in the market...\n\n";
    
        foreach ($tradeAlerts as $alert) {
            $script .= "**[{$alert['ticker']} - {$alert['company']}]**\n";
            $script .= "**Price:** \${$alert['price']} | **% Change:** {$alert['change']}% | **Volume:** {$alert['volume']}M\n";
            $script .= "📈 52-Week High: \${$alert['high']} | 📉 52-Week Low: \${$alert['low']}\n";
            $script .= "Market Cap: {$alert['market_cap']}\n\n";
        }
    
        $script .= "[OUTRO]\nThat’s it for today’s alerts. Stay tuned and happy trading!\n";
    
        return ['status' => 'success', 'script' => $script];
    }
    
    public function generateVoiceoverScriptFromSummary(string $summary): string
    {
        if (empty($summary)) {
            return 'No summary available for voiceover.';
        }
    
        $summary = strip_tags($summary);
        $sentences = $this->splitIntoSentences($summary);
        $hook = $sentences[0] ?? 'Here’s your market update:';
        $script = "**Voiceover Preview**\n\n";
        $script .= "[INTRO]\n{$hook}\n\n";
    
        foreach (array_slice($sentences, 1, 3) as $line) {
            $script .= "{$line}\n";
        }
    
        $script .= "\n[OUTRO]\nLearn more inside your MyMI Wallet.\n";
        return $script;
    }
    
    /**
     * Generate Email Content using a template with dynamic placeholders.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertEmailContent(array $tradeAlert): string
    {
        // Define a default email template (this could also be stored in a DB for flexibility)
        $defaultTemplate = <<<EOT
        Hello,

        {intro}

        Check out our latest trade alert on {ticker} from {company}!
        Current Price: \${price}
        Trade Signal: {trade_description}
        Latest News: {financial_news}
        For more details, view the full analysis here: {trade_chart_link}

        {outro}
        EOT;
        // Randomized intros and outros for variation:
        $intros = [
            "Heads up, traders!",
            "Breaking news from the market!",
            "Your daily trade update is here!",
            "Hot off the press!",
            "Market alert!"
        ];
        $outros = [
            "Happy trading!",
            "Stay tuned for more insights.",
            "Trade smart and prosper!",
            "Keep your eyes on the market!",
            "Have a great trading day!"
        ];
        $intro = $intros[array_rand($intros)];
        $outro = $outros[array_rand($outros)];

        // Build the replacement map. Use defaults if a field is missing.
        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.',
            '{financial_news}'    => $tradeAlert['financial_news'] ?? 'No news available.',
            '{trade_chart_link}'  => $tradeAlert['trade_chart_link'] ?? 'https://www.mymiwallet.com/trade-overview?ticker=' . urlencode($tradeAlert['ticker'] ?? ''),
            '{intro}'             => $intro,
            '{outro}'             => $outro
        ];

        // Replace all placeholders in the template.
        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Generate Blog Content using a template.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertBlogContent(array $tradeAlert): string
    {
        $defaultTemplate = <<<EOT
        Blog Post: Market Analysis on {ticker} ({company})

        **Current Price:** \${price}

        **Trade Analysis:**
        {trade_description}

        **Financial News Update:**
        {financial_news}

        For a detailed review, visit our website.
        EOT;

        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.',
            '{financial_news}'    => $tradeAlert['financial_news'] ?? 'No news available.'
        ];

        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Generate Voiceover Script Content using a template.
     *
     * @param array $tradeAlert
     * @return string
     */
    public function generateTradeAlertVoiceoverScriptContent(array $tradeAlert): string
    {
        $defaultTemplate = <<<EOT
        Voiceover Script for {ticker}:

        "Welcome to today’s market update. Our focus is on {ticker} from {company}. 
        Currently, it is trading at \${price}. 
        Trade insight: {trade_description}. 
        Stay tuned for further updates and in-depth analysis."

        Thank you for watching!
        EOT;

        $replacements = [
            '{ticker}'            => strtoupper(trim($tradeAlert['ticker'] ?? 'N/A')),
            '{company}'           => $tradeAlert['company'] ?? 'Unknown Company',
            '{price}'             => number_format($tradeAlert['price'] ?? 0, 2),
            '{trade_description}' => $tradeAlert['trade_description'] ?? 'No trade signal available.'
        ];

        $content = str_replace(array_keys($replacements), array_values($replacements), $defaultTemplate);
        return $content;
    }

    /**
     * Example method to generate randomized social media content.
     * (This method already exists in your codebase.)
     *
     * @param array $tradeAlert
     * @return array
     */
    public function generateTradeAlertRandomMarketingContent(array $tradeAlert): array
    {
        $intros = [
            "Heads up, traders!",
            "🔥 Hot Trade Alert!",
            "🚀 Ready for a breakout?",
            "Attention: Market Movers!",
            "⚡ Quick update:"
        ];
        $emoticons = ['🚀', '🔥', '💰', '📈', '📊', '⚡', '✅', '🤖'];
        $outros = [
            "Stay tuned for more!",
            "Don't miss out!",
            "Trade smart and prosper!",
            "Keep your eyes on the market!",
            "Happy trading!"
        ];
        $intro = $intros[array_rand($intros)];
        $emote = $emoticons[array_rand($emoticons)];
        $outro = $outros[array_rand($outros)];
        $ticker = strtoupper(trim($tradeAlert['ticker'] ?? 'N/A'));
        $company = $tradeAlert['company'] ?? 'Unknown Company';
        $tradeDesc = trim($tradeAlert['trade_description'] ?? '');
        $news = trim($tradeAlert['financial_news'] ?? '');
        $details = trim($tradeAlert['details'] ?? '');
        $price = number_format($tradeAlert['price'] ?? 0, 2);
        
        $baseMessage = "{$emote} {$intro}\n" .
            "Trade Alert for **{$ticker}** ({$company}):\n" .
            "Price: \${$price}\n" .
            "Signal: {$tradeDesc}\n" .
            "News: {$news}\n" .
            "Details: {$details}\n" .
            "{$outro} {$emote}";
        
        $socialContent = [
            'twitter'  => substr($baseMessage, 0, 280),
            'facebook' => $baseMessage,
            'linkedin' => $baseMessage,
            'discord'  => $baseMessage
        ];
        
        return $socialContent;
    }

    public function getBlogPosts()
    {
         
        $getBlogPosts = $this->marketingModel->getBlogPosts();
        return ['getBlogPosts' => $getBlogPosts];
    }

    // public function getCampaignsBySchedId($accountid) {
    //     
    //     $campaigns = $this->marketingModel->getCampaignsBySchedId($accountid); 
    //     return $campaigns; 
    // } 

    public function getCampaigns() {
        
        $getMarketingCampaigns = $this->marketingModel->getActiveCampaigns(); 
        return $getMarketingCampaigns; 
    }

    public function getCampaignByID($campaignID) { 
        
        $campaignInfo = $this->marketingModel->getCampaignById($campaignID); 
        return $campaignInfo; 
    }

    public function getCampaignsBySchedId($sched_id) {
        
        $campaigns = $this->marketingModel->getCampaignsBySchedId($sched_id); 
        if ($campaigns) {
            foreach ($campaigns as &$campaign) {
                $campaign['primary_content'] = $this->generateSchedPrimaryContent($campaign['id']);
                $campaign['social_media_content'] = $this->generateSchedSocialMediaContent($campaign['id']);
            }
        } else {
            $campaigns = []; // Ensure campaigns is an array
        }
        log_message('debug', 'MyMIMarketing::getCampaignsBySchedId - $campaigns: ' . print_r($campaigns, true));
        return $campaigns;
    }  

    public function getFeatures() {
        
        $getFeatures                        = $this->marketingModel->getFeatures(); 
        if ($this->debug === 1) {
            // log_message('debug', 'MyMIDashboard L113 - $getFeatures: ' . (print_r($getFeatures, true)));
        }
        return $getFeatures; 
    }

    public function getKeywordCandidates(): array
    {
        $watchlist = $this->getMyMIInvestments()->getUserWatchlist($this->cuID); 
        
        // Option 2: Hardcoded fallback
        $default = ['Apple', 'Tesla', 'Inflation', 'Ethereum', 'Interest Rates'];
    
        $symbols = array_map(fn($row) => $row['symbol'], $watchlist);
        return array_unique(array_merge($symbols, $default));
    }
    
    public function getManagementTeam() {
        
        $getManagementTeam                 = $this->marketingModel->getMarketingTeam(); 
        if ($this->debug === 1) {
            // log_message('debug', 'MyMIDashboard L121 - $getManagementTeam: ' . (print_r($getManagementTeam, true)));
        }
        return $getManagementTeam; 
    }
    
    public function generateCTA($summary)
    {
        return "💡 Learn more inside MyMI Wallet — your financial edge starts here.";
    }
    
    public function generateContentAndInsert(array $record)
    {
        $recordId = $record['id'] ?? null;
        if (!$recordId || empty($record['content'])) {
            log_message('error', "❌ generateContentAndInsert() - Invalid record ID or missing content.");
            return null;
        }
    
        // Clean and normalize content
        $rawContent = $record['content'];
        $cleanContent = $this->sanitizeRawEmailContent($rawContent);
        if (strlen($cleanContent) < 300 || substr_count($cleanContent, ' ') < 20) {
            log_message('warning', "⚠️ generateContentAndInsert() - Skipping record ID {$recordId} due to insufficient cleaned content.");
            $cleanContent = $this->generateFallbackSummary($cleanedContent ?? $rawContent);
            return null;
        }
    
        // Run summarization pipeline
        $summaryData = $this->summarizeContent($cleanContent);
        if (!is_array($summaryData) || empty($summaryData['summary'])) {
            log_message('warning', "⚠️ generateContentAndInsert() - No summary generated for record ID {$recordId}");
            return null;
        }
    
        // Build headline and post content
        $headline = $this->generateHeadline($summaryData['summary']);
        if (is_string($summaryData['summary']) && strlen($summaryData['summary']) > 10) {
            $keywords = $summaryData['keywords'] ?? $this->extractKeywords($summaryData['summary']);
        }        
        
        $posts = $this->generatePlatformContent($summaryData['summary'], $keywords);
    
        // Prepare and insert into final table
        $insertData = [
            'source_id'   => $recordId,
            'title'       => $headline,
            'summary'     => $summaryData['summary'],
            'keywords'    => implode(',', $keywords),
            'posts'       => json_encode($posts),
            'platforms'   => json_encode(array_keys($posts)),
            'status'      => 'ready',
            'created_at'  => date('Y-m-d H:i:s'),
        ];
    
        $result = $this->marketingModel->insert($insertData);
        if ($result) {
            log_message('info', "✅ generateContentAndInsert() - Inserted final content for record ID {$recordId}");
            return $insertData;
        } else {
            log_message('error', "❌ generateContentAndInsert() - Failed DB insert for record ID {$recordId}");
            return null;
        }
    }
    
    public function generateContentForZapier($platform, $contentData)
    {
        $payload = [
            'platform' => $platform,
            'content' => $contentData['content'],
            'media_url' => $contentData['media_url'] ?? null,
        ];

        return json_encode($payload);
    } 
    
    public function generateContentFromRaw(array $emailRecord)
    {
        if (!isset($emailRecord['content']) || strlen(trim($emailRecord['content'])) < 1000) {
            log_message('error', 'generateContentFromRaw(): Invalid or too short content: ' . substr(strip_tags($emailRecord['content'] ?? 'NULL'), 0, 200));
            return null;
        }        

        $rawText = $emailRecord['content'];
        if (is_array($rawText)) {
            log_message('error', 'generateContentFromRaw(): content is array — flattening.');
            $rawText = implode(' ', array_map('strip_tags', $rawText));
        }

        if (empty($rawText)) {
            log_message('error', 'MyMIMarketing - generateContentFromRaw(): Missing content.');
            return null;
        }

        $cleanContent = $this->sanitizeRawEmailContent($rawText);
        $cleanContent = preg_replace('/[^[:print:]]/', '', $cleanContent);

        if (strlen($cleanContent) < 500 || substr_count($cleanContent, ' ') < 10) {
            log_message('error', "❌ MyMIMarketing - Skipping record ID {$emailRecord['id']} — insufficient cleaned content.");
            return null;
        }

        $text = preg_replace('/\s+/', ' ', trim(strip_tags($cleanContent)));

        try {
            $summaryData = $this->summarizeContentFromHtml($cleanContent);
        } catch (\Throwable $e) {
            log_message('error', "🛑 summarizeContentFromHtml() threw exception for ID {$emailRecord['id']}: " . $e->getMessage());
            $summaryData = null;
        }

        // Handle malformed return
        if (!is_array($summaryData) || !isset($summaryData['summary']) || strlen($summaryData['summary']) < 25) {
            log_message('error', "❌ summarizeContentFromHtml(): Invalid summary structure or too short.");
            $summaryData = [
                'summary' => substr($text, 0, 300) . '...',
                'keywords' => $this->extractKeywords($text),
                'featureScore' => 0,
                'keywordScore' => 0,
                'pageRankScore' => 0,
                'semanticDiversityScore' => 0,
            ];
            log_message('info', "⚠️ Fallback summary manually generated for record ID {$emailRecord['id']}.");
        }

        $summary = $summaryData['summary'];
        $headline = $this->generateHeadline($summary);
        $subtopics = $this->extractSubtopics($text);
        $voiceoverUrl = $this->generateVoiceoverMp3FromText($summary);
        $posts = [
            'blog'     => $this->formatBlogPost($headline, $summary),
            'email'    => $this->formatEmailBlast($headline, $summary),
            'facebook' => $this->formatSocialPost($headline, $summary, 'facebook'),
            'linkedin' => $this->formatSocialPost($headline, $summary, 'linkedin'),
            'twitter'  => $this->formatSocialPost($headline, $summary, 'twitter'),
            'discord'  => $this->formatDiscordPost($headline, $summary),
        ];

        $this->insertFinalScraper($emailRecord, [
            'summary'  => $summary,
            'voiceover_url' => $voiceoverUrl,
            'keywords' => $summaryData['keywords'] ?? [],
        ]);

        return [
            'headline'  => $headline,
            'summary'   => $summary,
            'subtopics' => $subtopics,
            'posts'     => $posts,
            'voiceover_url' => $voiceoverUrl,
            'source_id' => $emailRecord['id'],
            'platforms' => json_encode(array_keys($posts)),
            'status'    => 'ready',
        ];
    }

    public function generateHeadline(string $summary): string
    {
        if (empty($summary)) {
            log_message('warning', '⚠️ MyMIMarketing::generateHeadline: summary is empty.');
            return 'MyMI Update';
        }
        
        if (stripos($summary, 'utf-8q') !== false || stripos($summary, '=?utf-8') !== false) {
            $summary = $this->decodeMimeHeaderSafe($summary);
        }
        
        $cleanText = strip_tags($summary);
        $cleanText = preg_replace('/\s+/', ' ', trim($cleanText));
        
        // Use stronger sentence boundary
        $sentences = preg_split('/(?<=[.!?])\s+(?=[A-Z])/', $cleanText, 2, PREG_SPLIT_NO_EMPTY);
        $headline = $sentences[0] ?? substr($cleanText, 0, 100);
    
        // Clean and truncate to 12 words max
        $words = explode(' ', $headline);
        $cleanHeadline = implode(' ', array_slice($words, 0, 12));
    
        return rtrim($cleanHeadline, ',;:.') . (count($words) > 12 ? '...' : '');
    }    
    
    private function generateSchedPrimaryContent($campaignId) {
        // Logic to generate primary content
        return 'Primary content for campaign ID ' . $campaignId;
    }
    
    private function generateSchedSocialMediaContent($campaignId) {
        // Logic to generate social media content
        return [
            'facebook' => 'Facebook content for campaign ID ' . $campaignId,
            'twitter' => 'Twitter content for campaign ID ' . $campaignId,
        ];
    }

    private function generateTradeAlertMessage($alert, $action)
    {
        return "**🚀 TRADE ALERT! 🚀**\n"
            . "**Symbol:** {$alert['ticker']}\n"
            . "**Company:** {$alert['company']}\n"
            . "**Type:** {$action}\n"
            . "**Price:** \${$alert['price']}\n"
            . "**Target:** \${$alert['target_price']}\n"
            . "**Stop Loss:** \${$alert['stop_loss']}\n"
            . "[📊 View Chart]({$alert['tv_chart']})";
    } 

    public function getFinalizedContent($limit = 10)
    {
        return $this->marketingModel
            ->where('status', 'ready')
            ->where('title IS NOT NULL')
            ->where('summary IS NOT NULL')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->findAll();
    }
    
    public function getScrapesByKeyword($keyword) {
        return $this->marketingModel->getScrapesByKeyword($keyword); // assumes this method exists in model
    }

    private function getStopWords()
    {
        return [
            "a", "the", "and", "of", "in", "to", "is", "you", "that", "it", "he", "was", "for", "on", "are", "as", "with", "his", "they", "I", "at", "be", "this", "have", "from", "or", "one", "had", "by", "word", "but", "not", "what", "all", "were", "we", "when", "your", "can", "said", "there", "use", "an", "each", "which", "she", "do", "how", "their", "if", "will", "up", "other", "about", "out", "many", "then", "them", "these", "so", "some", "her", "would", "make", "like", "him", "into", "time", "has", "look", "two", "more", "write", "go", "see", "number", "no", "way", "could", "people", "my", "than", "first", "water", "been", "call", "who", "oil", "its", "now", "find", "long", "down", "day", "did", "get", "come", "made", "may", "part"
        ];
    }

    public function getTimelineGroupedByTopic()
    {
        $allArticles = $this->marketingModel->getAllFinalizedArticles();
    
        $groupedByTopic = [];
        foreach ($allArticles as $article) {
            $topic = $article['topic'] ?? 'General';
            $groupedByTopic[$topic][] = $article;
        }
    
        // Apply timeline grouping to each topic group
        $finalTimeline = [];
        foreach ($groupedByTopic as $topic => $articles) {
            $finalTimeline[$topic] = $this->generateTimelineData($articles);
        }
    
        return $finalTimeline;
    }

    public function getTopKeywordScores($content, $max = 10)
    {
        if (!is_string($content)) {
            log_message('error', 'getTopKeywordScores(): Content must be a string');
            return [];
        }
    
        $content = $this->normalizeUtf8($content);
        $sentences = $this->splitIntoSentences($content);
    
        if (empty($sentences)) {
            log_message('error', 'getTopKeywordScores(): No valid sentences to process');
            return [];
        }
    
        $tokenized = array_values(array_filter(array_map(function ($sentence) {
            $cleaned = strtolower($this->normalizeUtf8(trim($sentence)));
            $tokens = preg_split('/\W+/', $cleaned, -1, PREG_SPLIT_NO_EMPTY);
            return array_filter($tokens, fn($w) => strlen($w) > 2);
        }, $sentences)));
    
        if (empty($tokenized) || !isset($tokenized[0]) || !is_array($tokenized[0])) {
            log_message('error', 'getTopKeywordScores(): Tokenized input invalid. Tokenized: ' . json_encode($tokenized));
            return [];
        }
    
        try {
            $vectorizer = new TokenCountVectorizer(new WhitespaceTokenizer());
            $vectorizer->fit($tokenized);
            $vectorizer->transform($tokenized);
    
            $vocab = $vectorizer->getVocabulary();
            $invertedVocab = array_flip($vocab);
    
            $tfIdf = new TfIdfTransformer();
            $tfIdf->fit($tokenized);
            $tfIdf->transform($tokenized);
        } catch (\Throwable $e) {
            log_message('error', 'getTopKeywordScores(): TF-IDF processing failed — ' . $e->getMessage());
            return [];
        }
    
        $scores = [];
        foreach ($tokenized as $doc) {
            foreach ($doc as $index => $value) {
                if (!isset($invertedVocab[$index]) || !is_numeric($value)) {
                    continue;
                }
    
                $word = $invertedVocab[$index];
                $scores[$word] = ($scores[$word] ?? 0.0) + (float) $value;
            }
        }
    
        if (empty($scores)) {
            log_message('error', 'getTopKeywordScores(): No TF-IDF scores generated after transformation.');
            return [];
        }
    
        arsort($scores);
        return array_keys(array_slice($scores, 0, $max, true));
    }

    public function insertFinalScraper($record, $summary)
    {
        $model = new MarketingModel();
    
        if (!isset($record['id']) || !$summary) {
            log_message('error', '❌ Missing record ID or summary when calling insertFinalScraper()');
            return false;
        }
    
        // ✅ Prevent duplicate inserts
        $existing = $model->where('source_id', $record['id'])->first();
        if ($existing) {
            log_message('info', "⚠️ Final scrape already exists for source_id: {$record['id']}");
            return false;
        }
    
        // ✅ Ensure encoding is safe
        $cleanSummary = mb_convert_encoding($summary['summary'], 'UTF-8', 'UTF-8');
    
        // ✅ Strip emojis and special characters from title
        $cleanTitle = isset($record['title']) ? $record['title'] : word_limiter($cleanSummary, 12);

        // Decode malformed MIME headers
        if (stripos($cleanTitle, 'utf-8q') !== false || stripos($cleanTitle, '=?utf-8') !== false) {
            $cleanTitle = $this->decodeMimeHeaderSafe($cleanTitle);
        }
        
        $cleanTitle = preg_replace('/[^\p{L}\p{N}\s:;\-]/u', '', $cleanTitle);

        $cta = $this->generateCTA($summary['summary']);
        $data = [
            'source_id' => $record['id'],
            'title' => trim($cleanTitle),
            'summary' => trim($cleanSummary),
            'keywords' => isset($summary['keywords']) ? implode(',', $summary['keywords']) : '',
            'cta' => $cta, // <-- ✅ ADD THIS
            'date_created' => date('Y-m-d H:i:s'),
        ];
    
        $result = $model->insert($data);
        if ($result) {
            log_message('info', "✅ Final scraped content inserted for source_id: {$record['id']}");
        } else {
            log_message('error', "❌ Failed to insert final scrape for source_id: {$record['id']}");
        }
    
        return $result;
    }

    /**
     * Prevent duplicate processing by checking if email_identifier already exists
     */
    public function isEmailAlreadyHandled(string $identifier): bool
    {
        $existing = $this->marketingModel
            ->where('email_identifier', $identifier)
            ->first();
        return !empty($existing);
    }

    private function isSemanticallyDifferent($sentence1, $sentence2, $tokens)
    {
        $tokens1 = array_intersect($tokens, str_word_count(strtolower($sentence1), 1));
        $tokens2 = array_intersect($tokens, str_word_count(strtolower($sentence2), 1));
        $overlap = count(array_intersect($tokens1, $tokens2));
        $threshold = 2;
        return $overlap < $threshold;
    }

    private function pageRank($matrix, $dampingFactor = 0.85, $maxIterations = 100, $tolerance = 1e-6)
    {
        $numSentences = count($matrix);
        if ($numSentences == 0) {
            return [];
        }

        $pagerank = array_fill(0, $numSentences, 1 / $numSentences);
        $tempRank = array_fill(0, $numSentences, 0);

        for ($iter = 0; $iter < $maxIterations; $iter++) {
            for ($i = 0; $i < $numSentences; $i++) {
                $tempRank[$i] = (1 - $dampingFactor) / $numSentences;
                for ($j = 0; $j < $numSentences; $j++) {
                    if ($i != $j && isset($matrix[$j][$i])) {
                        $matrixRowSum = array_sum($matrix[$j]);
                        if ($matrixRowSum != 0) {
                            $tempRank[$i] += $dampingFactor * ($matrix[$j][$i] * $pagerank[$j] / $matrixRowSum);
                        }
                    }
                }
            }

            $diff = 0;
            for ($i = 0; $i < $numSentences; $i++) {
                $diff += abs($tempRank[$i] - $pagerank[$i]);
            }

            if ($diff < $tolerance) {
                break;
            }
            $pagerank = $tempRank;
        }
        return $pagerank;
    }

    public function seoCheck()
    {
        
        $uri_string = $this->request->getUri()->getPath();
        $query = $this->marketingModel->where('url', $uri_string)->first();

        if (!$query) {
            $data = [
                'url' => $uri_string,
                'title' => str_replace(['_', '/'], [' ', ' - '], $uri_string),
                'description' => "Experience the future of personal finance with MyMI Wallet. We provide advanced budgeting and investment portfolio management solutions, empowering individuals to better manage their finances. Streamline your financial journey with our intuitive online fintech application and service.",
                'image' => base_url('/assets/images/Company/MyMI-Wallet-White.png'),
            ];

            $this->marketingModel->insert($data);
            $insert_id = $this->marketingModel->getInsertID();

            $task_info = [
                'task' => 'Page SEO Edit',
                'title' => str_replace(['_', '/'], [' ', ' - '], $uri_string),
                'seo_id' => $insert_id,
                'url' => $uri_string,
            ];

            $this->assignMarketingTask($task_info);
        }
    }

    public function social_media()
    {
        return [
            'discord' => $this->socialMedia->discord,
            'facebook_page' => $this->socialMedia->facebook_page,
            'facebook_group' => $this->socialMedia->facebook_group,
            'linkedin' => $this->socialMedia->linkedin,
            'twitter' => $this->socialMedia->twitter,
            'youtube' => $this->socialMedia->youtube,
        ];
    }
    
    private function stripHtmlTags($htmlContent)
    {
        return strip_tags($htmlContent);
    }
    
    public function testMarketingSummarizer($limit = 10)
    {
        $records = $this->marketingModel->getRecentTempScraperRecords($limit);
    
        if (empty($records)) {
            log_message('info', 'testMarketingSummarizer(): No temp records found to test.');
            return;
        }
    
        foreach ($records as $record) {
            $id = $record['id'] ?? 'N/A';
            $html = $record['content'] ?? '';
            log_message('debug', "🧪 Testing summarization for record ID $id");
    
            $summary = $this->summarizeContentFromHtml($html);
    
            if ($summary) {
                log_message('info', "✅ Record ID $id summary: " . substr($summary, 0, 150));
            } else {
                log_message('error', "❌ Record ID $id failed to summarize.");
            }
        }
    }
    
    private function tokenizeSmart($text, $method = 'nlp') {
        return $method === 'nlp' 
            ? $this->tokenizeWithNlpTools($text) 
            : $this->tokenizeText($text);
    }
    
    private function tokenizeText($text)
    {
        $text = strtolower(strip_tags($text));
        return preg_split('/\W+/', $text, -1, PREG_SPLIT_NO_EMPTY);
    }
       
    public function tokenizeWithNlpTools($content)
    {
        $tokenizer = new NlpWhitespaceTokenizer();
        $tokens = $tokenizer->tokenize($content);
        $this->logger->debug('Tokens: ' . print_r($tokens, true));
        return $tokens;
    }

    public function getPageHeaders()
    {
        
        $getPageSEO = $this->marketingModel->getMarketingPageSeo();
        $pageSEOData = [];
        foreach ($getPageSEO as $pageSEO) {
            $pageSEOData[] = [
                'page_id' => $pageSEO['id'],
                'page_name' => $pageSEO['page_name'],
                'page_title' => $pageSEO['page_title'],
                'page_url' => $pageSEO['page_url'],
                'page_sitemap_url' => $pageSEO['page_sitemap_url'],
                'page_internal_url' => $pageSEO['page_internal_url'],
                'page_controller' => $pageSEO['page_controller'],
                'page_controller_url' => $pageSEO['page_controller_url'],
                'page_controller_directory' => $pageSEO['page_controller_directory'],
                'page_file_directory' => $pageSEO['page_file_directory'],
                'page_image' => $pageSEO['page_image'],
                'page_description' => $pageSEO['page_description'],
                'page_address' => $pageSEO['page_address'],
                'page_city' => $pageSEO['page_city'],
                'page_state' => $pageSEO['page_state'],
                'page_country' => $pageSEO['page_country'],
                'page_zipcode' => $pageSEO['page_zipcode'],
                'page_facebook' => $pageSEO['page_facebook'],
                'linked' => $pageSEO['linked'],
                'functionality' => $pageSEO['functionality'],
                'design' => $pageSEO['design'],
                'seo' => $pageSEO['seo'],
                'ext_links' => $pageSEO['ext_links'],
                'grammar' => $pageSEO['grammar'],
                'd_optimize' => $pageSEO['d_optimize'],
                'load_perf' => $pageSEO['load_perf'],
                'additional_notes' => $pageSEO['additional_notes'],
            ];
        }
        return $pageSEOData;
    }

    public function getPageHeadersByName($pageName)
    {
        
        $getPageSEO = $this->marketingModel->getMarketingPageSeoByName($pageName);
        $pageSEOData = [];
        foreach ($getPageSEO as $pageSEO) {
            $pageSEOData[] = [
                'page_id' => $pageSEO['id'],
                'page_name' => $pageSEO['page_name'],
                'page_title' => $pageSEO['page_title'],
                'page_url' => $pageSEO['page_url'],
                'page_sitemap_url' => $pageSEO['page_sitemap_url'],
                'page_internal_url' => $pageSEO['page_internal_url'],
                'page_controller' => $pageSEO['page_controller'],
                'page_controller_url' => $pageSEO['page_controller_url'],
                'page_controller_directory' => $pageSEO['page_controller_directory'],
                'page_file_directory' => $pageSEO['page_file_directory'],
                'page_image' => $pageSEO['page_image'],
                'page_description' => $pageSEO['page_description'],
                'page_address' => $pageSEO['page_address'],
                'page_city' => $pageSEO['page_city'],
                'page_state' => $pageSEO['page_state'],
                'page_country' => $pageSEO['page_country'],
                'page_zipcode' => $pageSEO['page_zipcode'],
                'page_facebook' => $pageSEO['page_facebook'],
                'linked' => $pageSEO['linked'],
                'functionality' => $pageSEO['functionality'],
                'design' => $pageSEO['design'],
                'seo' => $pageSEO['seo'],
                'ext_links' => $pageSEO['ext_links'],
                'grammar' => $pageSEO['grammar'],
                'd_optimize' => $pageSEO['d_optimize'],
                'load_perf' => $pageSEO['load_perf'],
                'additional_notes' => $pageSEO['additional_notes'],
            ];
        }
        return $pageSEOData;
    }
    
    public function postToDiscord($message)
    {
        $discordWebhookUrl = getenv('DISCORD_WEBHOOK_URL');
    
        // ✅ Ensure the message is within the 2000 character limit
        if (strlen($message) > 2000) {
            $message = substr($message, 0, 1997) . "..."; // Truncate and add "..."
        }
    
        $payload = json_encode(["content" => $message]);
    
        $ch = curl_init($discordWebhookUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $response;
    }
    
    public function postToFacebookPage($pageId, $message)
    {
        try {
            $response = $this->facebook->post("/{$pageId}/feed", [
                'message' => $message,
            ], $this->facebook->getAccessToken());

            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            log_message('error', 'Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            log_message('error', 'Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    public function postToFacebookGroup($groupId, $message)
    {
        try {
            $response = $this->facebook->post("/{$groupId}/feed", [
                'message' => $message,
            ], $this->facebook->getAccessToken());

            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            log_message('error', 'Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            log_message('error', 'Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    public function sendNotification($type, $viewPath, $data, $targetGroup = null, $socialMedia = [])
    {
        
        $userModel = new UserModel();
        if ($targetGroup) {
            $users = $userModel->where('group', $targetGroup)->findAll();
        } else {
            $users = $userModel->findAll();
        }

        $viewContent = view($viewPath, $data);

        $notoCount = 0;
        $emailNotoCount = 0;

        if (in_array('in-app', $type)) {
            foreach ($users as $user) {
                $this->sendInAppNotification($user, $viewContent);
                $notoCount++;
            }
        }

        if (in_array('email', $type)) {
            foreach ($users as $user) {
                $this->sendEmailNotification($user, $viewContent);
                $emailNotoCount++;
            }
        }

        foreach ($socialMedia as $platform) {
            switch ($platform) {
                case 'facebook':
                    $this->postToFacebook($data['message']);
                    break;
                case 'twitter':
                    $this->postToTwitter($data['message']);
                    break;
                case 'linkedin':
                    $this->postToLinkedIn($data['message']);
                    break;
                case 'discord':
                    $this->postToDiscord($data['message']);
                    break;
            }
        }

        $notificationData = [
            'active' => 1,
            'message' => $viewContent,
            'created_at' => date('Y-m-d H:i:s'),
            'created_by' => session('user_id'),
            'noto_count' => $notoCount,
            'email_noto_count' => $emailNotoCount,
        ];
        $this->marketingModel->storeNotification($notificationData);
    }

    private function sendInAppNotification($user, $content)
    {
        $db = \Config\Database::connect();
        $db->table('user_notifications')->insert([
            'user_id' => $user->id,
            'content' => $content,
            'created_at' => date('Y-m-d H:i:s')
        ]);
    }

    private function sendEmailNotification($user, $content)
    {
        $email = \Config\Services::email();
        $email->setTo($user->email);
        $email->setSubject('Notification');
        $email->setMessage($content);
        $email->send();
    }

    public function postToSocialMedia($content)
    {
        try {
            $this->postToFacebook($content);
            $this->postToTwitter($content);
            $this->postToLinkedIn($content);
            // Add more integrations if needed
        } catch (\Throwable $e) {
            $this->logger->error('❌ postToSocialMedia() failed: ' . $e->getMessage());
        }
    }
    

    private function postToFacebook($message)
    {
        try {
            $response = $this->facebook->post('/me/feed', ['message' => $message], $this->socialMedia->facebook_access_token);
            return $response->getGraphNode();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            $this->logger->error('Facebook Graph returned an error: ' . $e->getMessage());
            return false;
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            $this->logger->error('Facebook SDK returned an error: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Fetch tweets based on a specific hashtag or query.
     */
    public function fetchTweets($query, $count = 100) {
        
        try {
            $tweets = $this->twitter->get('search/tweets', [
                'q' => $query,
                'count' => $count
            ]);

            if ($this->twitter->getLastHttpCode() === 200) {
                $processedTweets = [];
                foreach ($tweets->statuses as $tweet) {
                    $processedTweets[] = [
                        'tweet_id' => $tweet->id_str,
                        'content' => $tweet->text,
                        'author' => $tweet->user->screen_name,
                        'created_at' => $tweet->created_at,
                        'url' => "https://twitter.com/{$tweet->user->screen_name}/status/{$tweet->id_str}"
                    ];
                }

                // Store in database
                foreach ($processedTweets as $tweetData) {
                    $this->marketingModel->storeScrapedContent([
                        'title' => $tweetData['content'],
                        'url' => $tweetData['url'],
                        'content' => $tweetData['content'],
                        'keywords' => json_encode([$tweetData['author']]),
                        'scraped_at' => date('Y-m-d H:i:s')
                    ]);
                }

                return $processedTweets;
            } else {
                throw new \Exception('Failed to fetch tweets: ' . $this->twitter->getLastBody());
            }
        } catch (\Throwable $th) {
            log_message('error', 'Error fetching tweets: ' . $th->getMessage());
            return [];
        }
    }

    /**
     * Generate content from tweets.
     */
    public function generateContentFromTweets($tweets) {
        $summary = $this->summarizeText(implode(' ', array_column($tweets, 'content');
        if (empty(trim($summary)) || strlen($summary) < 30) {
            log_message('warning', '⚠️ Summary too short or missing for record ID ' . $record['id'] . ' | $summary array: ' . print_r($summary, true));
            return false; // skip this record
        }
        if (is_string($summary) && strlen($summary) > 10) {
            $keywords = $this->extractKeywords($summary);
        }
        
        if (empty($keywords)) {
            log_message('warning', '⚠️ Keywords not working for record ID ' . $record['id'] . ' | $keywords array: ' . print_r($keywords, true));
            return false; // skip this record
        }

        return [
            'summary' => $summary ?? '',
            'keywords' => $keywords ?? '',
            'platform_content' => $this->generatePlatformContent($summary, $keywords)
        ];
    }

    private function generateFallbackKeywords($text)
    {
        $words = preg_split('/\W+/', strtolower($text), -1, PREG_SPLIT_NO_EMPTY);
        $freq = array_count_values(array_filter($words, fn($w) => strlen($w) > 4));
        arsort($freq);
        return array_keys(array_slice($freq, 0, 10));
    }
    
    public function generateFallbackSummary(string $content): ?string
    {
        $sentences = $this->splitIntoSentences($content);
        if (empty($sentences)) {
            log_message('warning', '⚠️ No valid sentences found in fallback summary generation.');
            return null;
        }
    
        $summary = implode(' ', array_slice($sentences, 0, 3));
        return strip_tags(trim($summary));
    }
    
    public function generateFromTempScraper($limit = 5)
    {
        $records = $this->marketingModel->getLatestTempRecords($limit);
    
        if (empty($records)) {
            log_message('info', 'No temp scraper records found to process.');
            return;
        }
    
        foreach ($records as $record) {
            try {
                log_message('debug', '🧪 Processing record ID ' . $record['id']);
                $summary = $this->generateContentFromRaw($record); // ✅ Fixed: Pass the full record array
                if ($summary) {
                    // $this->marketingModel->insertFinalScraper($record, $summary);
                    $this->marketingModel->markTempScraperProcessed($record['id']);
                    log_message('info', '✅ Processed and stored content for record ID ' . $record['id']);
                } else {
                    log_message('warning', '⚠️ Summary was null/empty for record ID ' . $record['id']);
                }
            } catch (\Throwable $e) {
                log_message('error', '❌ Error generating content for record ID ' . $record['id'] . ': ' . $e->getMessage());
            }
        }
    }    
    
    /**
     * Post content to Twitter.
     */
    public function postToTwitter($content) {
        try {
            $response = $this->twitter->post('statuses/update', ['status' => $content]);
            if ($this->twitter->getLastHttpCode() === 200) {
                log_message('info', 'Successfully posted to Twitter: ' . $content);
                return $response;
            } else {
                throw new \Exception('Failed to post to Twitter: ' . json_encode($response));
            }
        } catch (\Throwable $th) {
            log_message('error', 'Error posting to Twitter: ' . $th->getMessage());
            return false;
        }
    }

    private function postToLinkedIn($message)
    {
        try {
            $response = $this->linkedin->post('/people/~/shares', [
                'comment' => $message,
                'visibility' => [
                    'code' => 'anyone'
                ]
            ], $this->socialMedia->linkedin_access_token);
            return $response;
        } catch (Exception $e) {
            $this->logger->error('LinkedIn API returned an error: ' . $e->getMessage());
            return false;
        }
    }

    private function postToBlog($content)
    {
        // Assuming you're using WordPress for blogging
        $client = new Client([
            'base_uri' => $this->siteSettings->wordpress_site_url,
        ]);

        try {
            $response = $client->post('/wp-json/wp/v2/posts', [
                'auth' => [$this->siteSettings->wordpress_username, $this->siteSettings->wordpress_password],
                'json' => [
                    'title' => substr($content, 0, 50),
                    'content' => $content,
                    'status' => 'publish',
                ],
            ]);

            if ($response->getStatusCode() == 201) {
                $this->logger->info('Posted to blog: ' . $content);
                return json_decode($response->getBody(), true);
            } else {
                $this->logger->error('Failed to post to blog: ' . $response->getBody());
                return false;
            }
        } catch (RequestException $e) {
            $this->logger->error('Blog post request error: ' . $e->getMessage());
            return false;
        }
    }

    public function distributeContentToSocialMedia($content)
    {
        $twitterPost = "� **Stock Market Highlights** �\n";
        $facebookPost = "� **Market Movers Update** �\n";
        $linkedinPost = "� **Today's Market Summary** �\n";
        $discordPost = "� **TRADE ALERTS UPDATE!** �\n";

        foreach ($content['expandedContent'] as $post) {
            $twitterPost .= $post . "\n";
            $facebookPost .= $post . "\n";
            $linkedinPost .= $post . "\n";
            $discordPost .= $post . "\n";
        }

        // Post to Twitter (example using API)
        $this->postToTwitter($twitterPost);
        $this->postToFacebook($facebookPost);
        $this->postToLinkedIn($linkedinPost);
        $this->postToDiscord($discordPost);

        return [
            'twitter' => $twitterPost,
            'facebook' => $facebookPost,
            'linkedin' => $linkedinPost,
            'discord' => $discordPost
        ];
    }
    
    public function generateAndPostContent()
    {
        
        $emailSummaries = $this->marketingModel->getEmailSummariesForReview();
        foreach ($emailSummaries as $summary) {
            log_message('info', 'Generating content for email summary: ' . $summary['email_subject']);

            $content = $this->generateMarketingContent($summary['summary']);
            log_message('debug', 'Generated content: ' . print_r($content, true));

            $this->postToSocialMedia($content);
            $this->postToBlog($content);

            $this->marketingModel->updateEmailStatus($summary['email_identifier'], 'Posted');
            log_message('info', 'Updated email status to Posted for: ' . $summary['email_subject']);
        }
    }

    // private function generateMarketingContent($summary)
    // {
    //     $prompt = "Create a marketing post based on the following summary:\n\n" . $summary;
    //     $response = $this->openAI->complete([
    //         'prompt' => $prompt,
    //         'max_tokens' => 150,
    //     ]);

    //     return $response->choices[0]->text;
    // }


    /**
     * Generate content for each platform and save for publishing
     */
    public function generateMarketingContent(): void
    {
        $topStories = $this->marketingModel->getTopStories(10); // Existing call to get pending items
    
        $count = 0;
    
        foreach ($topStories as $story) {
            // ✅ Skip if title is empty
            if (empty(trim($story['title'] ?? ''))) {
                log_message('debug', '⏭ Skipped record ID '.$story['id'].' - no title provided.');
                continue;
            }
    
            // ✅ Break once top 5 valid entries found
            if ($count >= 5) {
                break;
            }
    
            $headline = $story['title'];
            $url = $story['source_url'] ?? '#';
            $summary = $this->generateSummary($story);
            $hashtags = $this->extractHashtags($story['title'].' '.$story['email_body']);
    
            $platformPosts = [
                'discord'  => "**{$headline}**\n{$summary}\n🔗 {$url}\n{$hashtags}",
                'twitter'  => "{$headline} {$url} {$hashtags}",
                'linkedin' => "{$headline}\n{$summary}\nRead more: {$url} {$hashtags}",
                'facebook' => "{$headline}\n{$summary}\n{$url} {$hashtags}",
                'email'    => [
                    'subject' => $headline,
                    'body'    => "{$summary}\n\nRead More: {$url}\n{$hashtags}",
                ],
            ];
    
            $this->marketingModel->storeGeneratedContent($story['id'], $platformPosts);
            $count++;
        }
    }    

    private function logContentError($recordId, $reason)
    {
        $message = "🪓 Skipped record ID {$recordId}: {$reason}";
        log_message('debug', $message);
    
        // Insert into bf_error_logs
        helper(['text']);
        $this->db->table('bf_error_logs')->insert([
            'level'      => 'ERROR',
            'message'    => $message,
            'context'    => 'MyMIMarketing::generateContentFromRaw',
            'file'       => 'MyMIMarketing.php',
            'line'       => __LINE__,
            'ip_address' => service('request')->getIPAddress(),
            'user_agent' => service('request')->getUserAgent()->getAgentString(),
            'created_at' => date('Y-m-d H:i:s')
        ]);
    
        // Also insert a stub into bf_marketing_scraper
        $this->db->table('bf_marketing_scraper')->insert([
            'source_id'   => $recordId,
            'title'       => 'Error Summary',
            'summary'     => $reason,
            'category'    => 'Error',
            'status'      => 'skipped',
            'created_on'  => date('Y-m-d H:i:s'),
        ]);
    }
    
    private function logScrapeError($url, $error)
    {
        log_message('error', "Scraping failed for URL: $url, Error: $error");
    }

    public function generateContentFromData($title, $content, $tags)
    {
        // Process the content, summarize, or apply any NLP techniques.
        $summary = $this->summarizeContent($content); // Example NLP method

        // Generate the final content
        return $title . " - " . $summary . " Tags: " . implode(', ', $tags);
    }

    public function generateContentFromScrapedData($scrapedData, $platform = null)
    {
        if (empty($scrapedData) || !is_array($scrapedData)) {
            log_message('error', '❌ generateContentFromScrapedData() called with empty or invalid $scrapedData');
            return [];
        }
    
        $cleanedSummaries = [];
    
        foreach ($scrapedData as $record) {
            $rawContent = $record['content'] ?? '';
            $cleaned = $this->sanitizeRawEmailContent($rawContent);
    
            if (strlen($cleaned) < 300 || substr_count($cleaned, ' ') < 20) {
                log_message('warning', '[MyMIMarketing] Skipped record due to short or unstructured content (Title: ' . ($record['title'] ?? 'Untitled') . ')');
                continue;
            }
    
            try {
                $summaryData = $this->summarizeContent($cleaned);
    
                if (!is_array($summaryData) || empty($summaryData['summary'])) {
                    log_message('warning', '⚠️ generateContentFromScrapedData(): Summary was null/empty for record title: ' . ($record['title'] ?? 'Untitled'));
                    continue;
                }
    
                $headline = $this->generateHeadline($summaryData['summary']);
                $platformPosts = $this->generatePlatformContent($summaryData['summary'], $summaryData['tokens'] ?? []);
    
                $payload = [
                    'title' => $record['title'] ?? $headline,
                    'source' => $record['url'] ?? 'unknown',
                    'summary' => $summaryData['summary'],
                    'keywords' => $summaryData['tokens'] ?? [],
                    'headline' => $headline,
                    'platform_content' => $platformPosts,
                    'platform' => $platform,
                    'created_on' => date("Y-m-d H:i:s"),
                ];
    
                $this->marketingModel->storeGeneratedContent($record['id'] ?? null, $platformPosts);
                $cleanedSummaries[] = $payload;
            } catch (\Throwable $e) {
                log_message('error', '❌ Exception in generateContentFromScrapedData(): ' . $e->getMessage());
            }
        }
    
        return $cleanedSummaries;
    }
    
    public function generateContentFromLargeText($content, $tags)
    {
        if (empty($content)) {
            log_message('error', 'Content is empty in generateContentFromLargeText.');
            return [
                'summary' => '',
                'keywords' => [],
                'platforms_content' => [],
            ];
        }
    
        $tokenizer = new WhitespaceTokenizer();
        $samples = [$tokenizer->tokenize($content)];
    
        log_message('debug', 'Tokenized samples: ' . print_r($samples, true));
    
        if (
            empty($samples) ||
            !isset($samples[0]) ||
            !is_array($samples[0]) ||
            empty($samples[0])
        ) {
            log_message('error', '🚫 Empty or malformed document array before TF-IDF.');
            return [
                'summary' => '',
                'keywords' => [],
                'platforms_content' => [],
            ];
        }
    
        try {
            $tfidf = new TfIdfTransformer();
            $tfidf->fit($samples);
            $tfidf->transform($samples);
            log_message('debug', 'TfIdf transformation successful.');
        } catch (\Exception $e) {
            log_message('error', 'TfIdfTransformer failed: ' . $e->getMessage());
            return [
                'summary' => '',
                'keywords' => [],
                'platforms_content' => [],
            ];
        }
    
        $summary = $this->summarizeText($content);
        if (is_string($content) && strlen($content) > 10) {
            $keywords = $this->extractKeywords($content);
        }
        $platforms_content = $this->generatePlatformContent($summary, $keywords);
    
        return [
            'summary' => $summary,
            'keywords' => $keywords,
            'platforms_content' => $platforms_content,
        ];
    }
    
    public function generateCanvaVideo()
    {
        $scriptResponse = $this->generateVoiceoverScript();
        if (!$scriptResponse['status'] === 'success') {
            return $this->respond(['status' => 'error', 'message' => 'Voiceover script not found'], 404);
        }
    
        $scriptText = $scriptResponse['script'];
    
        $canvaApiUrl = "https://api.canva.com/v1/projects";
        $headers = [
            'Authorization: Bearer YOUR_CANVA_API_KEY',
            'Content-Type: application/json'
        ];
    
        $payload = [
            'title' => 'MyMI Trade Alerts Video',
            'template' => 'YOUR_CANVA_TEMPLATE_ID',
            'elements' => [
                'text' => $scriptText,
                'voiceover' => base_url('uploads/voiceover.mp3')
            ]
        ];
    
        $ch = curl_init($canvaApiUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        curl_close($ch);
    
        return $this->respond(['status' => 'success', 'message' => 'Video generated', 'video_url' => json_decode($response)->video_url]);
    }

    public function generateEnhancedContent($voiceScript)
    {
        // Step 1: Summarize the voice script into a structured format
        $summary = $this->summarizeContent($voiceScript);

        // Step 2: Perform spelling & grammar check using an external API (Grammarly alternative)
        $checkedContent = $this->spellCheckAndRefine($summary);

        // Step 3: Generate additional content using MyMIMarketing::contentGenerator
        $expandedContent = $this->contentGenerator($checkedContent);

        return [
            'summary' => $summary,
            'checkedContent' => $checkedContent,
            'expandedContent' => $expandedContent
        ];
    }
    
    private function generatePrimaryContent($scrapedData)
    {
        // Generate the primary content based on the scraped data
        $content = "";
        foreach ($scrapedData as $data) {
            $content .= "Source: {$data['source']}\n";
            $content .= "Title: {$data['title']}\n";
            $content .= "Content: " . substr($data['content'], 0, 200) . "...\n";
            $content .= "Link: " . ($data['url'] ?? 'N/A') . "\n\n";
        }
        return $content;
    }
    
    public function generatePlatformContent($summary, $keywords, $mediaAssets = [])
    {
        // Facebook: Maximize engagement by adding hashtags
        $facebookContent = "Facebook Post: " . $summary . "\n\n" . "Related: #" . implode(' #', $keywords);
    
        // Twitter (X): Ensure content is within 280 characters
        $twitterContent = "Twitter: " . substr($summary, 0, 280) . "\n\n#" . implode(' #', $keywords);
    
        // StockTwits: Short, engaging financial-related content
        $stocktwitsContent = "StockTwits: " . substr($summary, 0, 250) . "\n\n" . implode(' ', $keywords);
    
        // Discord: Engaging message with hashtags
        $discordContent = "Discord: " . $summary . "\n\nJoin the discussion! #" . implode(' #', $keywords);
    
        // Blog: Provide a more detailed write-up
        $blogContent = "Blog Post\n\n" . $summary . "\n\nKeywords: " . implode(', ', $keywords);
    
        // Email Notification: Short summary and CTA
        $emailContent = "Email Notification: " . $summary . "\n\nRead more on our blog.";
    
        // In-Browser / Mobile Phone Notifications: Brief and action-oriented
        $browserNotificationContent = "New Update: " . substr($summary, 0, 100) . "... Click to learn more.";
    
        // TikTok Video Script: Generating a short script for voiceover
        $tiktokScript = $this->generateTikTokScript($summary, $keywords, $mediaAssets);
    
        // YouTube Video Script: More detailed video script
        $youtubeScript = $this->generateYouTubeScript($summary, $keywords, $mediaAssets);
    
        return [
            'Facebook' => $facebookContent,
            'Twitter' => $twitterContent,
            'StockTwits' => $stocktwitsContent,
            'Discord' => $discordContent,
            'Blog' => $blogContent,
            'Email' => $emailContent,
            'BrowserNotification' => $browserNotificationContent,
            'TikTok' => $tiktokScript,
            'YouTube' => $youtubeScript
        ];
    }   

    public function generateSocialPost(array $summary): array
    {
        $text = $summary['summary'] ?? '';
        $keywords = $summary['keywords'] ?? [];
    
        $hashtags = implode(' ', array_map(function ($word) {
            return '#' . ucfirst(trim($word));
        }, array_slice($keywords, 0, 5)));
    
        return [
            'twitter'  => substr("{$text} {$hashtags}", 0, 280),
            'facebook' => "{$text}\n\n{$hashtags}",
            'linkedin' => "{$text}\n\n#StayInformed {$hashtags}",
            'discord'  => "**News Summary:**\n{$text}\n\n{$hashtags}",
        ];
    }
    
    private function generateSocialMediaContent($scrapedData)
    {
        // Generate social media content for each platform based on the scraped data
        $facebookContent = "Facebook: ";
        $twitterContent = "Twitter: ";
        $linkedinContent = "LinkedIn: ";

        foreach ($scrapedData as $data) {
            $facebookContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
            $twitterContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
            $linkedinContent .= $data['title'] . " " . ($data['url'] ?? '') . "\n";
        }

        return [
            'Facebook' => $facebookContent,
            'Twitter' => $twitterContent,
            'LinkedIn' => $linkedinContent,
        ];
    }

    /**
     * Basic summary (could be replaced with AI summary)
     */
    protected function generateSummary(array $story): string
    {
        return substr(strip_tags($story['email_body'] ?? ''), 0, 250) . '...';
    }
    
    public function generateTikTokScript($summary, $keywords, $mediaAssets = [])
    {
        $hook = "Did you know?";
        $cta = "Follow us for more updates!";
    
        // Optionally include media references (if provided)
        $mediaInclusion = !empty($mediaAssets) ? "Include these images/videos: " . implode(", ", $mediaAssets) : "";
    
        // TikTok video script generation
        return "TikTok Video Script:\n1. Hook: \"{$hook}\"\n2. Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";
    }
    
    public function generateYouTubeScript($summary, $keywords, $mediaAssets = [])
    {
        $hook = "Breaking news in the world of finance...";
        $cta = "Like, subscribe, and share for more updates!";
    
        // Optionally include media references (if provided)
        $mediaInclusion = !empty($mediaAssets) ? "Include these images/videos: " . implode(", ", $mediaAssets) : "";
    
        // YouTube video script generation
        return "YouTube Video Script:\n1. Hook: \"{$hook}\"\n2. Detailed Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";
    }

    public function generateVoiceoverAudio($text)
    {
        $client = new TextToSpeechClient();
        $input = new SynthesisInput();
        $input->setText($text);
    
        $voice = new VoiceSelectionParams();
        $voice->setLanguageCode('en-US');
        $voice->setSsmlGender('MALE');
    
        $audioConfig = new AudioConfig();
        $audioConfig->setAudioEncoding(AudioEncoding::MP3);
    
        $response = $client->synthesizeSpeech($input, $voice, $audioConfig);
        $audioContent = $response->getAudioContent();
    
        $filePath = WRITEPATH . 'uploads/voiceover.mp3';
        file_put_contents($filePath, $audioContent);
    
        return base_url('uploads/voiceover.mp3');
    }

    public function generateStockInformation($cuID)
    {
        $MyMIInvestments = new MyMIInvestments();
        // Fetch investment dashboard data
        $investmentData = $MyMIInvestments->getInvestmentDashboard($cuID);

        // Dynamically determine asset types (stocks, ETFs, crypto)
        $symbols = $this->getSymbolsByAssetType($investmentData['getSymbols']);

        $forecastData = [];
        $riskData = [];

        // Process each asset type
        foreach ($symbols as $type => $symbolList) {
            switch ($type) {
                case 'stocks':
                    $forecastData['stocks'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['stocks'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'stocks');
                    break;
                case 'etfs':
                    $forecastData['etfs'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['etfs'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'etfs');
                    break;
                case 'crypto':
                    $forecastData['crypto'] = $MyMIInvestments->performARIMAForecast($symbolList);
                    $riskData['crypto'] = $MyMIInvestments->generateRiskManagementTools($cuID, 'crypto');
                    break;
            }
        }

        // Generate content based on the data
        $content = $this->generateContent($forecastData, $riskData);

        return $content;
    }

    private function getSymbolsByAssetType($symbols)
    {
        // Assuming we can identify the asset type by the symbol
        // This is just a placeholder logic and should be replaced with actual identification logic
        $result = [
            'stocks' => [],
            'etfs' => [],
            'crypto' => []
        ];

        foreach ($symbols as $symbol) {
            if (preg_match('/^[A-Z]{1,5}$/', $symbol)) {
                $result['stocks'][] = $symbol;
            } elseif (preg_match('/^[A-Z]{1,5}$/', $symbol)) {
                $result['etfs'][] = $symbol;
            } else {
                $result['crypto'][] = $symbol;
            }
        }

        return $result;
    }

    private function generateContent($forecastData, $riskData)
    {
        $content = "";

        // Stocks Content
        if (!empty($forecastData['stocks'])) {
            $content .= "### Stock Investment Forecast\n";
            foreach ($forecastData['stocks'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // ETFs Content
        if (!empty($forecastData['etfs'])) {
            $content .= "### ETF Investment Forecast\n";
            foreach ($forecastData['etfs'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // Crypto Content
        if (!empty($forecastData['crypto'])) {
            $content .= "### Crypto Investment Forecast\n";
            foreach ($forecastData['crypto'] as $symbol => $forecast) {
                $content .= "- **{$symbol}**: " . json_encode($forecast) . "\n";
            }
        }

        // Risk Management Insights
        $content .= "\n### Risk Management Insights\n";
        foreach ($riskData as $type => $riskMetrics) {
            $content .= "#### " . ucfirst($type) . " Risks\n";
            foreach ($riskMetrics as $riskMetric => $details) {
                $content .= "- **{$riskMetric}**: " . json_encode($details) . "\n";
            }
        }

        return $content;
    }

    public function getRecentPosts($limit = 5)
    {
        // $marketingModel = new \App\Models\MarketingModel();
        return $this->marketingModel->getRecentPosts($limit);
    }
    
    /**
     * Pull news from MarketAux API (hourly)
     */
    public function pullFinancialNews(): void
    {
        
        $response = $this->client->get('https://www.marketaux.com/api/v1/news/all', [
            'query' => [
                'api_token' => getenv('marketaux.apiKey'),
                'language'  => 'en',
                'country'   => 'us',
                'published_after' => date('Y-m-d\TH:i:s\Z', strtotime('-1 hour')),
                'limit'     => 50,
            ],
        ]);

        $data = json_decode($response->getBody(), true);
        if (isset($data['data'])) {
            foreach ($data['data'] as $story) {
                $this->marketingModel->saveNews($story);
            }
        }
    }

    public function rankBufferCandidates()
    {
        $buffer = $this->marketingModel->fetchBufferPostsForScoring();
        foreach ($buffer as $post) {
            if (is_string($post['summary']) && strlen($post['summary']) > 10) {
                $keywords = $this->extractKeywords($post['summary']);
            }
            
            $score = array_sum(array_column($keywords, 'score'));
            $tagScore = min($score / 10, 10); // normalize to 0–10 scale
    
            $this->marketingModel->updateBufferItem($post['id'], [
                'tag_score' => $tagScore
            ]);
        }
    }
    
    /**
     * Score and tag scraped news dynamically based on content
     */
    public function rankNewsArticles(): void
    {
        $unrankedNews = $this->marketingModel->getUnrankedNews();

        foreach ($unrankedNews as $news) {
            $content = strtolower(($news['title'] ?? '') . ' ' . ($news['email_subject'] ?? '') . ' ' . ($news['email_body'] ?? ''));
            $words = str_word_count(strip_tags($content), 1);
            $wordFreq = array_count_values($words);

            $filtered = array_filter($wordFreq, fn($freq, $word) => strlen($word) > 3 && $freq > 1, ARRAY_FILTER_USE_BOTH);
            arsort($filtered);

            $score = array_sum(array_values($filtered));
            $topKeywords = array_slice(array_keys($filtered), 0, 5);

            $this->marketingModel->updateRankedNews($news['id'], $score, implode(',', $topKeywords));
        }
    }

    public function summarizeMultipleArticles(array $articles): string
    {
        $allContent = '';
    
        foreach ($articles as $article) {
            $content = $article['content'] ?? '';
            $allContent .= strip_tags($content) . ' ';
        }
    
        if (empty(trim($allContent))) {
            log_message('error', 'summarizeMultipleArticles() received empty content.');
            return 'No content available to summarize.';
        }
    
        $summaryData = $this->summarizeContent($allContent);
        return is_array($summaryData) && isset($summaryData['summary']) ? $summaryData['summary'] : substr($allContent, 0, 300) . '...';
    }
    
}
?>
<?php
namespace App\Models;

use CodeIgniter\Model;
use Phpml\FeatureExtraction\TfIdfTransformer;
use Phpml\Tokenization\WhitespaceTokenizer;

class MarketingModel extends Model
{
    protected $table = 'bf_marketing_scraper';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'object';
    protected $useSoftDeletes = false;
    protected $allowedFields = [
        // General fields (used in multiple sections)
        'title', 'description', 'created_on', 'modified_on', 'status', 'type',
    
        // Fields for minimal footprint and specific queries
        'day', 'time', 'activity', 'link', 'url', 'summary', 'content', 
        'email_identifier', 'email_date', 'email_sender', 'email_subject', 'email_body',
        'email_attachments', 'keywords', 'scraped_at', 'links', 'images', 'videos', 
        'metadata', 'structured_data',
    
        // Fields for marketing content
        'sched_id', 'escalated', 'audience_type', 'stage', 'name', 'assigned_on', 
        'assigned_to', 'completed_on', 'scheduled_at', 'primary_content', 'secondary_content',
        'html_content', 'voice_script', 'shared', 'shared_users', 'blog', 'in_app', 
        'email', 'discord', 'facebook', 'linkedin', 'telegram', 'twitter', 'website',
        'promotional_links', 'facebook_message', 'linkedin_message', 'discord_message',
        'stocktwits_message', 'tiktok_message', 'youtube_message', 'email_message',
        'additional_info',
    
        // New field for image uploads
        'image_paths' // Stores paths to uploaded images
    ];
    
    protected $useTimestamps = true;
    protected $createdField = 'created_on';
    protected $updatedField = 'modified_on';


    // Add a marketing campaign to the database
    public function addMarketingCampaign($campaignData) {
        log_message('debug', 'MarketingModel L206 - $marketingData: ' . (print_r($campaignData, true))); 
        $dbData = [
            'beta' => $campaignData['beta'],
            'config_mode' => $campaignData['config_mode'],
            'form_mode' => $campaignData['form_mode'],
            'escalated' => $campaignData['escalated'],
            'created_by' => $campaignData['user_id'], 
            'user_id' => $campaignData['user_id'],
            'user_email' => $campaignData['user_email'],
            'username' => $campaignData['username'],
            'assigned_to' => $campaignData['assigned_to'],
            'assigned_on' => $campaignData['date'] . ' - ' . $campaignData['time'],
            'name' => $campaignData['campaign_name'],
            'promotional_links' => $campaignData['promotionalLinks'],
            'overall_campaign_description' => $campaignData['overall_campaign_description'],
            'voice_script' => $campaignData['voice_script'],
            'facebook_message' => $campaignData['facebookMessage'], 
            'linkedin_message' => $campaignData['linkedinMessage'], 
            'discord_message' => $campaignData['discordMessage'], 
            'stocktwits_message' => $campaignData['stocktwitsMessage'], 
            'tiktok_message' => $campaignData['tiktokMessage'], 
            'youtube_message' => $campaignData['youtubeMessage'], 
            'email_message' => $campaignData['emailMessage'], 
            'additional_info' => $campaignData['additionalInfo'], 
            'hashtags' => $campaignData['hashtags'], 
        ];
        log_message('debug', 'MarketingModel L206 - $marketingData: ' . (print_r($dbData, true))); 
        if ($this->db->table('bf_marketing_campaigns')->insert($dbData)) {
            log_message('info', 'Campaign created successfully.');
            return $this->getInsertID();
        } else {
            log_message('error', 'DB Insert Error: ' . json_encode($this->errors()));
            return false;
        }
    }

    public function addMarketingSchedule($data) {
        $data['zapier_webhook_url'] = $data['zapier_webhook_url'] ?? null;
        $data['post_status'] = 'pending';
        $this->db->table('bf_marketing_schedule')->insert($data);
        return $this->db->insertID();
    }

    // Add a subscriber to the database
    public function addSubscriber($subscriberData) {
        if ($this->db->table('bf_users_subscribers')->insert($subscriberData)) {
            log_message('info', 'Subscriber added successfully.');
            return true;
        } else {
            log_message('error', 'DB Insert Error: ' . json_encode($this->errors()));
            return false;
        }
    }

    public function cleanHtmlEmailContent($raw): string
    {
        // Ensure $raw is always a string and not null
        $raw = is_string($raw) ? $raw : '';
    
        $decoded = quoted_printable_decode($raw);
        $decoded = is_string($decoded) ? $decoded : ''; // Some decoders return null
    
        $text = strip_tags($decoded);
        $text = preg_replace('/\s+/', ' ', str_replace(["\r", "\n", "\t", '&nbsp;'], ' ', $text));
    
        return trim(substr($text, 0, 5000));
    }
    
    // Copy an existing marketing campaign
    public function copyMarketingCampaign($marketingData)
    {
        unset($marketingData['id']);
        if ($this->insert($marketingData)) {
            log_message('info', 'Campaign copied successfully.');
            return $this->getInsertID();
        } else {
            log_message('error', 'DB Insert Error: ' . json_encode($this->errors()));
            return false;
        }
    }

    public function countBlogs() {
        return $this->db->table('bf_marketing_blog_posts')->countAllResults();
    } 
    
    public function countNewlyInsertedToday(): int
    {
        return $this->where('DATE(scraped_at)', date('Y-m-d'))
                    ->countAllResults();
    }
    
    public function createSlug($title)
    {
        $slug = url_title($title, '-', true);
        $existing = $this->db->table('bf_marketing_blog_posts')->where('slug', $slug)->countAllResults();
    
        return $existing ? $slug . '-' . uniqid() : $slug;
    }
    
    // Delete a marketing campaign
    public function deleteMarketingCampaign($id)
    {
        if ($this->delete($id)) {
            log_message('info', 'Campaign deleted successfully.');
            return true;
        } else {
            log_message('error', 'DB Delete Error: ' . json_encode($this->errors()));
            return false;
        }
    }

    public function deleteSchedule($id) {
        return $this->db->table('bf_marketing_schedule')->where('id', $id)->delete();
    }

    // Edit an existing marketing campaign
    public function editMarketingCampaign($marketingData)
    {
        if ($this->update($marketingData['id'], $marketingData)) {
            log_message('info', 'Campaign updated successfully.');
            return true;
        } else {
            log_message('error', 'DB Update Error: ' . json_encode($this->errors()));
            return false;
        }
    }

    // Extract keywords from text using TF-IDF
    public function extractKeywords($text)
    {
        if (empty($text) || strlen(trim($text)) < 50) {
            return []; // skip short or invalid input
        }        

        $tokenizer = new WhitespaceTokenizer();
        $tokens = array_filter($tokenizer->tokenize($text));

        if (empty($tokens)) {
            return [];
        }

        $documents = [$tokens];
        $tfidf = new TfIdfTransformer();
        try {
            $tfidf->transform($documents);
        } catch (\Exception $e) {
            log_message('error', 'TfIdfTransformer failed: ' . $e->getMessage());
            return [];
        }

        $keywordScores = [];
        foreach ($documents[0] as $word => $score) {
            $keywordScores[$word] = $score;
        }
        arsort($keywordScores);
        return array_slice(array_keys($keywordScores), 0, 10);
    }

    public function fetchBufferPaginated($page = 1, $limit = 20)
    {
        $offset = ($page - 1) * $limit;
    
        $builder = $this->db->table('bf_marketing_buffer')
            ->where('status !=', 'promoted')
            ->orderBy('tag_score', 'DESC')
            ->limit($limit, $offset);
    
        $results = $builder->get()->getResultArray();
    
        $total = $this->db->table('bf_marketing_buffer')
            ->where('status !=', 'promoted')
            ->countAllResults();
    
        return [
            'data' => $results,
            'pagination' => [
                'page'  => $page,
                'pages' => ceil($total / $limit),
            ]
        ];
    }
    
    public function fetchBufferPaginatedWithFilters(array $params = [])
    {
        $page          = $params['page'] ?? 1;
        $limit         = $params['limit'] ?? 20;
        $offset        = ($page - 1) * $limit;
        $keyword       = $params['keyword'] ?? null;
        $category      = $params['category'] ?? null;
        $minTagScore   = $params['min_tag_score'] ?? 0;
        $onlySuggested = $params['only_suggested'] ?? false;
    
        $builder = $this->db->table('bf_marketing_buffer')->where('status !=', 'promoted');
    
        if (!empty($keyword)) {
            $builder->like('keyword', $keyword);
        }
    
        if (!empty($category)) {
            $builder->where('category', $category);
        }
    
        if (!empty($minTagScore)) {
            $builder->where('tag_score >=', $minTagScore);
        }
    
        if ($onlySuggested) {
            $builder->where('auto_suggest', 1);
        }
    
        $totalQuery = clone $builder;
        $total      = $totalQuery->countAllResults(false);
    
        $results = $builder
            ->orderBy('tag_score', 'DESC')
            ->limit($limit, $offset)
            ->get()
            ->getResultArray();
    
        return [
            'data' => $results,
            'pagination' => [
                'page'  => $page,
                'limit' => $limit,
                'pages' => ceil($total / $limit),
                'total' => $total,
            ],
        ];
    }

    public function fetchBufferPostsForReview($limit = 25)
    {
        return $this->db->table('bf_marketing_buffer')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getBufferItem($id)
    {
        return $this->db->table('bf_marketing_buffer')->where('id', $id)->get()->getRowArray();
    }

    public function getIncompleteSummaries($limit = 50)
    {
        return $this->db->table('bf_marketing_scraper')
            ->where("(title IS NULL OR title = '' OR summary IS NULL OR summary = '')", null, false)
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getPendingAutoSuggested($limit = 5)
    {
        return $this->db->table('bf_marketing_buffer')
            ->where('status', 'pending')
            ->where('auto_suggest', 1)
            ->orderBy('tfidf_score', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getPendingScheduledPosts($currentTimestamp)
    {
        return $this->db->table('bf_marketing_schedule')
            ->where('post_time <=', $currentTimestamp)
            ->where('post_status', 'pending')
            ->get()
            ->getResult();
    }

    public function getPendingScraperSummaries($limit = 10)
    {
        return $this->db->table('bf_marketing_scraper')
            ->where('status', null)
            ->orWhere('status', '')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    public function getProcessedEmails($date = null)
    {
        $builder = $this->select('email_identifier');

        if ($date) {
            $builder->where('DATE(email_date)', $date);
        }

        $results = $builder->get()->getResultArray();

        $identifiers = [];
        foreach ($results as $row) {
            if (!empty($row->email_identifier)) {
                $identifiers[] = $row->email_identifier;
            }
        }

        return $identifiers;
    }
    
    
    public function findBufferItem($id)
    {
        return $this->db->table('bf_marketing_buffer')->where('id', $id)->get()->getRowArray();
    }

    public function findFinalizedById($id)
    {
        return $this->db->table('bf_marketing_scraper')
            ->where('id', $id)
            ->get()
            ->getRowArray();
    }
    
    // Get all active campaigns
    public function getActiveCampaigns()
    {
        // Start query builder
        $builder = $this->db->table('bf_marketing_campaigns');

        // Count active campaigns without executing the query
        $num_rows = $builder->where('status', 1)->countAllResults(false);

        // Get the result as an array
        $result = $builder->where('status', 1)->get()->getResultArray();

        return ['result' => $result, 'num_rows' => $num_rows];
    }

    public function getActiveIdeas()
    {
        return $this->db->table('bf_marketing_ideas')->where('status !=', 'approved')->get()->getResultArray();
    }

    // Get all active priority campaigns
    public function getActivePriorityCampaigns()
    {
        // Start query builder
        $builder = $this->db->table('bf_marketing_campaigns');

        // Count active campaigns without executing the query
        $num_rows = $builder->where('status', 1)->where('escalated', 1)->countAllResults(false);

        // Get the result as an array
        $result = $builder->where('status', 1)->where('escalated', 1)->get()->getResultArray();

        return ['result' => $result, 'num_rows' => $num_rows];
    }
    
    public function getAllFinalizedArticles()
    {
        return $this->db->table('bf_marketing_scraper')
            ->where('status', 'ready')
            ->orderBy('scraped_at', 'desc')
            ->get()
            ->getResultArray();
    }
    
    public function getApprovedBufferWithoutSchedule()
    {
        return $this->db->table('bf_marketing_buffer')
            ->where('status', 'approved')
            ->where('scheduled_at IS NULL', null, false)
            ->where('schedule_interval >', 0)
            ->orderBy('tag_score', 'DESC')
            ->limit(10)
            ->get()
            ->getResultArray();
    }
    
    public function getApprovedLogos()
    {
        return $this->db->table('bf_company_logos')->get()->getResultArray();
    }
    
    public function getBlogPostBySlug($slug) {
        return $this->db->table('bf_marketing_blog_posts')
            ->where('slug', $slug)
            ->get()
            ->getRow();
    }

    // Retrieve details of a specific blog post
    public function getBlogPostDetails($id)
    {
        return $this->find($id);
    }

    // Retrieve blog posts for newsletters
    public function getBlogPosts()
    {
        return $this->where('type', 'Email/Newsletters')
                    ->limit(50) // Limit the results to prevent memory overload
                    ->get()
                    ->getResultArray();
    }

    public function getBlogs() {
        return $this->db->table('bf_marketing_blog_posts')
            ->orderBy('created_on', 'DESC')
            ->get()
            ->getResult();
    }
    
    public function getBufferItems($limit = 50)
    {
        return $this->builder()
            ->where('status', 'pending')
            ->orderBy('score', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getCampaignById($campaign_id) {
        return $this->db->table('bf_marketing_campaigns')
                        ->where('id', $campaign_id)
                        ->get()
                        ->getResultArray();
    }

    public function getCampaignsBySchedId($accountid) {
        return $this->db->table('bf_marketing_campaigns')
                        ->where('sched_id', $accountid)
                        ->get()
                        ->getResultArray();
    }

    public function getDailyLogsByDate($date)
    {
        return $this->db->table('bf_marketing_scraper')
            ->where('DATE(created_on)', $date)
            ->get()
            ->getResult();
    }

    public function getEmailRecordById($id)
    {
        return $this->db->table('bf_marketing_temp_scraper')
                        ->where('id', $id)
                        ->get()
                        ->getRowArray();
    }
    
    public function getEmailByMessageId($messageId)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('email_identifier', $messageId)
            ->get()
            ->getRowArray();
    }
    
    // Retrieve email contents that are not yet included in newsletters
    public function getEmailContentsForNewsletter() {
        return $this->where('include_newsletter', false)
                    ->limit(50) // Limit the results to prevent memory overload
                    ->get()
                    ->getResultArray();
    }

    public function getEmailsMissingTitleOrUrl($limit = 20)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('(title IS NULL OR title = "" OR url IS NULL OR url = "")', null, false)
            ->orderBy('date_scraped', 'DESC') // Or whatever is the actual timestamp field used
            ->limit($limit)
            ->get()->getResultArray();
    }

    // Retrieve email summaries for review
    public function getEmailSummariesForReview()
    {
        return $this->where('status', 'In Review')->limit(50)->get()->getResultArray(); // Limit the results to prevent memory overload
    }

    // Fetch a single exchange token by its ID
    public function getExchangeTokenById($id)
    {
        return $this->db->table('bf_exchanges_assets')->where('id', $id)->get()->getRowArray();
    }
    
    public function getExistingLogoBySymbol($symbol)
    {
        return $this->db->table('bf_company_logos')->where('symbol', $symbol)->get()->getRow();
    }
    
    // Get MyMI Services & Features
    public function getFeatures() {
        return $this->db->table('bf_users_memberships')->where('active', 1)->orderBy('feature_level', 'ASC')->orderBy('feature_name', 'ASC')->get()->getResultArray(); 
    }

    public function getGeneratedContent($postId) {
        return $this->db->table('bf_marketing_campaigns')
                        ->where('sched_id', $postId)
                        ->get()
                        ->getRowArray();
    }

    public function getGeneratedPostById($id)
    {
        $row = $this->db->table('bf_marketing_scraper')->where('id', $id)->get()->getRowArray();
        if (!$row || empty($row['platforms'])) return [];
    
        $decoded = json_decode($row['platforms'], true);
        if (!is_array($decoded)) return [];
    
        return $decoded;
    }

    public function getGeneratedPostsBySourceId($id)
    {
        $row = $this->db->table('bf_marketing_scraper')->where('source_id', $id)->get()->getRowArray();
        if (!$row || empty($row['platforms'])) return [];
    
        $decoded = json_decode($row['platforms'], true);
        if (!is_array($decoded)) return [];
    
        return $decoded;
    }
    
    public function getLatestGeneratedSummaries($limit = 25)
    {
        return $this->db->table('bf_marketing_scraper')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    // Retrieve the latest newsletter draft
    public function getLatestNewsletterDraft() {
        return $this->db->table('bf_marketing_newsletters')
                        ->orderBy('created_at', 'DESC')
                        ->first();
    }

    public function getLatestTempRecords($limit = 5)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('status', 'In Review')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    public function getLatestUnprocessedEmails($limit = 10)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('status', 'In Review')
            ->orderBy('scraped_at', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getMarketingBuffer($status = 'Pending')
    {
        return $this->builder()
            ->where('status', $status)
            ->orderBy('created_at', 'DESC')
            ->get()
            ->getResultArray();
    }
    
    // Get SEO information by page name
    public function getMarketingPageSeoByName($pageTitle) {
        return $this->where('page_name', $pageTitle)->get()->getResultArray();
    }

    public function getMarketingTeam() {
        $result = $this->db->table('bf_management_positions')
                           ->where('department', 'Marketing')
                           ->get()
                           ->getResultArray();

        return $result; 
    }

    // Retrieve news articles
    public function getNewsArticles()
    {
        $result = $this->select('articles_json')->first();
        return json_decode($result->articles_json ?? '[]', true);
    }


    public function getNewEmails()
    {
        return $this->db->table('bf_marketing_raw_emails')
            ->where('status', 'unprocessed')
            ->get()
            ->getResultArray();
    }
    
    // Retrieve news posts
    public function getNewsPosts()
    {
        return $this->where('type', 'news_post')
                    ->limit(50) // Limit the results to prevent memory overload
                    ->get()
                    ->getResultArray();
    }
    
    public function getNextScheduledPost()
    {
        return $this->db->table('bf_marketing_buffer')
            ->where('status', 'approved')
            ->where('tag_score >=', 7.0)
            ->orderBy('tag_score', 'DESC')
            ->limit(1)
            ->get()
            ->getRowArray();
    }
    

    public function getRecentGeneratedContent($limit = 10)
    {
        return $this->db->table('bf_marketing_scraper')
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getRecentTempScraperRecords($limit = 10)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->orderBy('id', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getRecentPosts($limit = 5)
    {
        $results = $this->db->table('bf_marketing_scraper')
            ->select("id, title, category, created_at, blog_content, summary, keywords")
            ->orderBy('created_at', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    
        foreach ($results as &$r) {
            $hasSummary = !empty(trim($r['summary'] ?? ''));
            $hasContent = !empty(trim($r['blog_content'] ?? ''));
    
            if (!$hasSummary && $hasContent) {
                $text = strip_tags($r['blog_content']);
                $summary = substr($text, 0, 150);
                $r['summary'] = rtrim($summary, '. ') . '...';
            }
    
            // Append keyword tags (if available)
            if (!empty($r['keywords'])) {
                $keywords = is_array($r['keywords']) ? $r['keywords'] : explode(',', $r['keywords']);
                $tags = array_map(fn($k) => '#' . ucfirst(trim($k)), array_slice($keywords, 0, 5));
                $r['tags'] = implode(' ', $tags);
            } else {
                $r['tags'] = '';
            }
        }
    
        return $results;
    }
    
    public function getRecentScrapes()
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->orderBy('scraped_at', 'DESC')
            ->limit(5)
            ->get()
            ->getResult();
    }

    public function getRecentSummaries($limit = 5)
    {
        return $this->db->table('bf_marketing_scraper')
            ->select('id, title, summary, keywords, scraped_at')
            ->where("CHAR_LENGTH(summary) >=", 100)
            ->where("summary LIKE", '% % % % % % % % % %') // At least 10 spaces
            ->orderBy('created_on', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    
    public function getRecentUnprocessedTempEmails($limit = 5)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('status', 'In Review')
            ->orderBy('id', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    public function getScheduledBufferPosts($timestamp)
    {
        return $this->db->table('bf_marketing_buffer')
            ->where('status', 'approved')
            ->where('scheduled_at <=', $timestamp)
            ->orderBy('scheduled_at', 'ASC')
            ->limit(3)
            ->get()
            ->getResultArray();
    }
    
    // Get scheduled campaigns
    public function getScheduledCampaigns() {
        return $this->db->table('bf_marketing_newsletters')
                        ->where('status', 'scheduled')
                        ->where('scheduled_date <=', date('Y-m-d H:i:s'))
                        ->get()
                        ->getResultArray();
    }

    // Get the schedule of activities by day
    public function getScheduleByDay($day) {
        return $this->db->table('bf_marketing_calendar')
                        ->where('day', ucfirst($day))
                        ->get()->getResultArray();
    }

    public function getScheduleById($id) {
        return $this->db->table('bf_marketing_schedule')->where('id', $id)->get()->getRow();
    }

    public function getScrapesByDate($date)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('DATE(scraped_at)', $date)  // Fix here
            ->orderBy('scraped_at', 'DESC');

            if ($limit) {
                $builder->limit($limit);
            }

            return $builder->get()->getResultArray();
    }   

    // In App\Models\MarketingModel.php
    public function getScrapesByKeyword($keyword)
    {
        return $this->db
            ->table('bf_marketing_scraper')
            ->like('summary', $keyword)
            ->orLike('keywords', $keyword)
            ->orderBy('created_on', 'DESC')
            ->limit(10)
            ->get()
            ->getResultArray();
    }

    public function getTodaysNewsContent($limit = 10)
    {
        $builder = $this->db
            ->table('bf_marketing_temp_scraper')
            ->where('DATE(scraped_at)', date('Y-m-d'))
            ->where('type !=', 'todays_story')
            ->orderBy('scraped_at', 'DESC')
            ->limit($limit);
    
        $query = $builder->get();
        $results = $query->getResultArray();
    
        if (empty($results)) {
            log_message('info', 'No scraped content found for today.');
        }
    
        return $results;
    }    

    public function getTodaysScrapedContent()
    {
        return $this->db
            ->table('bf_marketing_temp_scraper')  // ✅ Make sure this is your temp table
            ->where('DATE(scraped_at)', date('Y-m-d'))
            ->orderBy('feature_score', 'DESC')    // Optional: sort by relevance
            ->get()
            ->getResultArray();
    }    
        
    public function getTodaysStory()
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('DATE(created_on)', date('Y-m-d'))
            ->orderBy('created_on', 'desc') // Fix here
            ->get()
            ->getResultArray();
    }    
        
    public function getYesterdaysStory()
    {
        $yesterday = date('Y-m-d', strtotime('-1 day'));
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('DATE(created_on)', $yesterday)
            ->orderBy('created_on', 'desc') // Fix here
            ->get()
            ->getResultArray();
    }    
    
    public function getTodaysGeneratedSummaries() {
        $todaysStory = $this->db->table('bf_marketing_temp_scraper')
                            ->where('DATE(scraped_at)', date('Y-m-d'))
                            ->where('status', 'ready')
                            ->orderBy('created_on', 'DESC')
                            ->limit(10)
                            ->get()
                            ->getResultArray();
        return $todaysStory; 
    }

    public function getTopBufferPosts($limit = 5, $minTagScore = 7.5)
    {
        return $this->builder('bf_marketing_buffer')
            ->where('status', 'approved')
            ->where('tag_score >=', $minTagScore)
            ->orderBy('tag_score', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }
    

    public function getTopStories($limit = 10)
    {
        return $this->db->table('bf_marketing_scraper')
            ->where('status', 'pending')
            ->where('title IS NOT NULL')
            ->where('title !=', '')
            ->orderBy('feature_score', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    public function getTopTempRecords($limit = 5)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('title IS NOT NULL')
            ->orderBy('created_at', 'desc')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    // Retrieve Upcoming Daily Marketing Campaigns
    public function getUpcomingSchedule() {
        return $this->db->table('bf_marketing_schedule')
                        ->select('id, post_date, completed, GROUP_CONCAT(DISTINCT platform ORDER BY platform ASC SEPARATOR ", ") as platforms, MIN(content_subject) as subjects, MIN(content_description) as descriptions')
                        ->where('post_date >=', date('Y-m-d')) // Fetch records with post_date from today onwards
                        ->groupBy('post_date')
                        ->orderBy('post_date', 'ASC') // Order by the post date
                        ->get()
                        ->getResultArray(); 
    
    }

    public function getUpcomingEarnings()
    {
        $builder = $this->db->where('bf_investment_calendar')
                        ->where('date >=', date('Y-m-d'))
                        ->where('event_type', 'Earnings')
                        ->orderBy('date', 'ASC')
                        ->get()
                        ->getResultArray();
        log_message('debug', 'MarketingModel L211 - getUpcomingEvents $builder Array: ' . (print_r($builder, true)));
        return $builder; 
    }

    public function getValidUnprocessedEmails($limit = 10)
    {
        $builder = $this->db->table('bf_marketing_temp_scraper');
        $builder->where('processed', 0);
        $builder->limit($limit * 2); // fetch more than needed for filtering
    
        $query = $builder->get();
        $results = $query->getResultArray();
    
        $valid = [];
    
        foreach ($results as $row) {
            $id = $row['id'];
    
            // Skip if no title
            if (empty($row['title'])) {
                log_message('debug', "🪓 Skipping record ID {$id} — Missing title.");
                continue;
            }
    
            // Skip if content is empty or too short
            if (empty($row['content']) || strlen(strip_tags($row['content'])) < 100) {
                log_message('debug', "🪓 Skipping record ID {$id} — Content empty or too short.");
                continue;
            }
    
            // Skip if it's mostly HTML tags
            $textContent = strip_tags($row['content']);
            $htmlRatio = strlen($textContent) / strlen($row['content'] ?? '');
            if ($htmlRatio < 0.3) {
                log_message('debug', "🪓 Skipping record ID {$id} — HTML-dominant content ({$htmlRatio}).");
                continue;
            }
    
            // If all passes, keep it
            $valid[] = $row;
    
            // Stop early if we hit limit
            if (count($valid) >= $limit) {
                break;
            }
        }
    
        return $valid;
    }    
    
    public function getValidUnprocessedEmailsFromToday($limit = 10)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('DATE(scraped_at)', date('Y-m-d'))
            ->where('content IS NOT NULL', null, false)
            ->where('title IS NOT NULL', null, false)
            ->where('CHAR_LENGTH(content) >', 250)
            ->orderBy('id', 'DESC')
            ->limit($limit)
            ->get()
            ->getResultArray();
    }

    public function incrementRetryCount($id)
    {
        return $this->db->table('bf_marketing_schedule')
            ->where('id', $id)
            ->set('retry_count', 'retry_count + 1', false)
            ->update(['last_attempt_at' => date('Y-m-d H:i:s')]);
    }
    
    public function insertBufferItem(array $summary)
    {
        $MyMIMarketing = new \App\Libraries\MyMIMarketing();
        $scoreData = $MyMIMarketing->getTopKeywordScores($summary['summary']);
        $threshold = getenv('MARKETING_TFIDF_THRESHOLD') ?: 7.5;

        $bufferRecord = [
            'keyword'      => $scoreData['top_keyword'] ?? 'general',
            'summary'      => $summary['summary'],
            'score'        => $scoreData['score'] ?? 0,
            'tag_score'    => $scoreData['tag_score'] ?? 0,
            'category'     => $scoreData['category'] ?? 'Uncategorized',
            'status'       => 'pending',
            'tfidf_score'  => $scoreData['tfidf_score'] ?? 0,
            'auto_suggest' => ($scoreData['tfidf_score'] ?? 0) >= $threshold ? 1 : 0,
            'platforms'    => json_encode([
                'discord'  => true,
                'linkedin' => true,
                'x'        => false,
                'email'    => false,
            ]),
            'created_at'   => date('Y-m-d H:i:s'),
        ];
    
        return $this->insert($bufferRecord);
    }
    
    public function insertFinalScraper(array $record, array $summary)
    {
        // Generate hash based on title + summary for uniqueness
        $title = trim($record['title'] ?? '');
        $summaryText = trim($summary['summary'] ?? '');
    
        // Guard against malformed records
        if (empty($title) || empty($summaryText)) {
            log_message('error', "❌ insertFinalScraper: Missing title or summary for source_id {$record['id']}");
            return false;
        }
    
        $hash = md5($title . $summaryText);
    
        // Check for existing hash
        $existing = $this->db->table('bf_marketing_scraper')->where('hash', $hash)->get()->getRowArray();
        if ($existing) {
            log_message('debug', "🛑 insertFinalScraper skipped — duplicate hash for source_id {$record['id']} (existing ID: {$existing['id']})");
            return false;
        }
    
        $data = [
            'source_id'   => $record['id'],
            'title'       => $title,
            'summary'     => $summaryText,
            'keywords'    => json_encode($summary['keywords'] ?? []),
            'platforms'   => json_encode($summary['posts'] ?? []),
            'category'    => $summary['category'] ?? 'News',
            'voiceover_url' => $summary['voiceover_url'],
            'status'      => 'ready',
            'hash'        => $hash,
            'created_on'  => date('Y-m-d H:i:s'),
        ];
    
        try {
            $this->db->table('bf_marketing_scraper')->insert($data);
            log_message('info', "✅ insertFinalScraper: Inserted summary for source_id {$record['id']}");
            return true;
        } catch (\Exception $e) {
            log_message('error', "❌ insertFinalScraper: DB insert failed — " . $e->getMessage());
            return false;
        }
    }
    
    public function insertNewsContent(array $newsItem, string $ticker)
    {
        $data = [
            'title'         => $newsItem['title'] ?? '',
            'summary'       => $newsItem['summary'] ?? '',
            'content'       => $newsItem['content'] ?? '',
            'type'          => 'financial_news',
            'status'        => 'Published',
            'created_on'    => date('Y-m-d H:i:s'),
            'modified_on'   => date('Y-m-d H:i:s'),
            'scraped_at'    => date('Y-m-d H:i:s'),
            'keywords'      => json_encode($newsItem['keywords'] ?? []),
            'links'         => json_encode($newsItem['links'] ?? []),
            'audience_type' => 'investor',
            'activity'      => $ticker,
        ];
        return $this->db->table('bf_marketing_scraper')->insert($data);
    }
    
    public function insertTempScraper($data)
    {
        return $this->db->table('bf_marketing_temp_scraper')->insert($data);
    }

    // Fetch emails from the server and store them
    public function idleFetchEmails()
    {
        $config = config('NewsEmailServer');
        $connectionString = "{$config->host}:{$config->port}/imap/{$config->encryption}";

        $inbox = @imap_open($connectionString, $config->username, $config->password);
        if (!$inbox) {
            log_message('error', 'Cannot connect to email server: ' . imap_last_error());
            return;
        }

        try {
            while (true) {
                if (function_exists('imap_idle')) {
                    $status = imap_idle($inbox);
                } else {
                    log_message('warning', '📭 imap_idle not supported on this server. Falling back to polling.');
                    sleep(30); // Polling fallback
                    continue;
                }
                
                $status = imap_idle($inbox);
                if ($status) {
                    $emails = imap_search($inbox, 'ALL');
                    if ($emails) {
                        foreach ($emails as $email_number) {
                            $overview = imap_fetch_overview($inbox, $email_number, 0)[0];
                            $sender = $overview->from;
                            $subject = $overview->subject;
                            $body = imap_fetchbody($inbox, $email_number, 1);
                            $data = [
                                'status' => 'In Review',
                                'type' => 'Email/Newsletters',
                                'email_identifier' => md5($subject . $sender . $overview->date),
                                'email_date' => date('Y-m-d H:i:s', strtotime($overview->date)),
                                'email_sender' => $sender,
                                'email_subject' => $subject,
                                'email_body' => $body,
                                'created_on' => date('Y-m-d H:i:s'),
                                'modified_on' => date('Y-m-d H:i:s'),
                            ];

                            if ($this->isEmailProcessed($data['email_identifier'])) {
                                log_message('debug', 'Email already processed: ' . $data['email_identifier']);
                            } else {
                                $this->storeEmailContent($data);
                            }
                        }
                    } else {
                        log_message('debug', 'No new emails found or imap_search returned false');
                    }
                }
                sleep(30);  // Sleep for 30 seconds before checking again
            }
        } catch (\Exception $e) {
            log_message('error', 'An exception occurred during email fetching: ' . $e->getMessage());
        } finally {
            imap_close($inbox);
        }
    }

    // Check if an email has already been processed
    public function isEmailProcessed($emailIdentifier)
    {
        return $this->where('email_identifier', $emailIdentifier)->countAllResults() > 0;
    }

    // Helper function to map keywords to contextual hashtags
    private function mapToContextualHashtags($keywords)
    {
        // Example implementation for mapping keywords to hashtags
        return array_map(fn($keyword) => '#' . preg_replace('/\s+/', '', ucfirst($keyword)), $keywords);
    }

    public function markEmailsAsProcessed($ids = [])
    {
        if (!empty($ids)) {
            return $this->db->table('bf_marketing_temp_scraper')
                ->whereIn('id', $ids)
                ->update(['status' => 'Processed']);
        }
        return false;
    }   
    
    public function markTempRecordAsProcessed($id)
    {
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('id', $id)
            ->update(['status' => 'Processed', 'updated_at' => date('Y-m-d H:i:s')]);
    }

    public function markTempScraperProcessed($id)
    {
        $this->db->table('bf_marketing_temp_scraper')
            ->where('id', $id)
            ->update(['status' => 'Processed']);
    }
    
    // Process email body text into summarized content and hashtags
    public function processText($emailBody)
    {
        $summary = $this->summarizeText($emailBody);
        $keywords = $this->extractKeywords($emailBody);
        $hashtags = $this->mapToContextualHashtags($keywords);

        if (empty($summary) || empty($hashtags)) {
            log_message('error', 'Text processing failed');
            return false;
        }

        return $summary . ' ' . implode(' ', $hashtags);
    }
    
    public function saveApprovedLogo($symbol, $imageUrl)
    {
        $symbol = strtoupper(trim($symbol)); // Ensure symbol is uppercase and trimmed of whitespace
    
        $data = [
            'symbol' => $symbol,
            'image_url' => $imageUrl,
            'approved_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ];
    
        try {
            // Check if the symbol already exists in bf_company_logos
            $existingLogo = $this->db->table('bf_company_logos')->where('symbol', $symbol)->get()->getRow();
    
            if ($existingLogo) {
                // Update the existing record only if the image_url is different or other changes are necessary
                if ($existingLogo->image_url !== $imageUrl) {
                    $this->db->table('bf_company_logos')->where('symbol', $symbol)->update($data);
                    log_message('info', "Logo for symbol {$symbol} updated in bf_company_logos.");
                } else {
                    log_message('info', "Logo for symbol {$symbol} already exists and is up to date.");
                }
            } else {
                // Insert a new record
                $this->db->table('bf_company_logos')->insert($data);
                log_message('info', "Logo for symbol {$symbol} added to bf_company_logos.");
            }
        } catch (\Exception $e) {
            log_message('error', "Failed to save or update logo for symbol {$symbol}: " . $e->getMessage());
        }
    }    
    
    public function saveDailyLog($data)
    {
        return $this->db->table('bf_marketing_scraper')->insert($data);
    }
    
    public function saveLogo($data)
    {
        $symbol = strtoupper(trim($data['symbol']));
        $existing = $this->db->table('bf_company_logos')->where('symbol', $symbol)->get()->getRow();
    
        $data['symbol'] = $symbol;
        $data['updated_at'] = date('Y-m-d H:i:s');
    
        if ($existing) {
            $this->db->table('bf_company_logos')->where('symbol', $symbol)->update($data);
            log_message('info', "Logo for symbol {$symbol} updated in bf_company_logos.");
        } else {
            $data['created_at'] = date('Y-m-d H:i:s');
            $this->db->table('bf_company_logos')->insert($data);
            log_message('info', "Logo for symbol {$symbol} added to bf_company_logos.");
        }
    }
        
    // Schedule a newsletter campaign
    public function scheduleNewsletterCampaign($data) {
        return $this->db->table('bf_marketing_newsletters')->insert($data);
    }

    public function storeContentAnalytics(array $data)
    {
        return $this->db->table('bf_marketing_analysis')->insert($data);
    }    
    
    public function storeEmail($data)
    {
        return $this->db->table('bf_marketing_temp_scraper')->insert($data);
    }
    
    // Store email content in the database
    public function storeEmailContent($data) {
        return $this->insert($data);
    }

    public function storeFinalMarketingContent($data)
    {
        return $this->db->table('bf_marketing_scraper')->insert($data);
    }

    public function storeTodaysStory($title, $content)
    {
        $data = [
            'title'       => $title,
            'content'     => $content,
            'links'       => json_encode([]),
            'url'         => '',
            'type'        => 'todays_story',
            'scraped_at'  => date('Y-m-d H:i:s'),  // Set scraped_at
            'created_on'  => date('Y-m-d H:i:s'),
            'modified_on' => date('Y-m-d H:i:s'),
        ];
        return $this->db->table('bf_marketing_temp_scraper')->insert($data);
    }
    
    
    public function submitCampaignContent($data) {
        // Convert promotional links array to JSON for storage
        if (isset($data['promotional_links']) && is_array($data['promotional_links'])) {
            $data['promotional_links'] = json_encode($data['promotional_links']);
        }

        // Add default values for missing fields if needed
        $data['status'] = $data['status'] ?? 1; // Default status
        $data['stage'] = $data['stage'] ?? 'draft';
        $data['created_on'] = date('Y-m-d H:i:s'); // Timestamp of creation
        
        return $this->save($data);
    }

    // Store a newsletter draft in the database
    public function storeNewsletterDraft($data) {
        return $this->db->table('bf_marketing_newsletters')->insert($data);
    }
    
    // Store promotional notification data
    public function storeNotification($data)
    {
        return $this->db->table('bf_users_promotional_messages')->insert($data);
    }

    public function storeScrapedContent($data) {
        return $this->db->table('bf_marketing_temp_scraper')->insert($data);
    }

    // Store scraped data temporarily
    public function storeTempScrapedData($data)
    {
        return $this->db->table('bf_marketing_temp_scraper')->insert($data);
    }
    
    // Summarize text using TF-IDF
    public function summarizeText($text)
    {
        if (empty($text)) {
            return '';
        }

        $sentences = explode('.', $text);
        if (count($sentences) <= 1) {
            return substr($text, 0, 200);
        }

        $tokenizer = new WhitespaceTokenizer();
        $documents = array_map([$tokenizer, 'tokenize'], $sentences);
        $documents = array_filter($documents);

        if (empty($documents)) {
            return '';
        }

        $tfidf = new TfIdfTransformer();
        try {
            $tfidf->transform($documents);
        } catch (\Exception $e) {
            log_message('error', 'TfIdfTransformer failed: ' . $e->getMessage());
            return '';
        }

        $sentenceScores = [];
        foreach ($documents as $index => $document) {
            $sentenceScores[$index] = array_sum($document);
        }

        arsort($sentenceScores);
        $numSentences = min(5, count($sentenceScores));
        $summarySentences = array_slice(array_keys($sentenceScores), 0, $numSentences);
        return implode('. ', array_intersect_key($sentences, array_flip($summarySentences)));
    }

    public function updateBufferItem($id, $data)
    {
        return $this->db->table('bf_marketing_buffer')->where('id', $id)->update($data);
    }
    
    public function updateBufferStatus($id, $status)
    {
        return $this->db->table('bf_marketing_buffer')->where('id', $id)->update(['status' => $status]);
    }

    // Update the status of a campaign
    public function updateCampaignStatus($id, $status) {
        return $this->db->table('bf_marketing_newsletters')
                        ->where('id', $id)
                        ->update(['status' => $status]);
    }

    public function updateEmailFields($id, $title, $url, $content = null)
    {
        $data = ['title' => $title, 'url' => $url];
        if (!empty($content)) {
            $data['content'] = $content;
        }
    
        return $this->db->table('bf_marketing_temp_scraper')
            ->where('id', $id)
            ->update($data);
    }
    
    // Update exchange token data
    public function updateExchangeToken($id, $data)
    {
        return $this->update($id, $data);
    }

    // Update promotional notification data
    public function updateNotification($data)
    {
        return $this->db->table('bf_users_promotional_messages')->update($data);
    }

    public function updateSchedule($id, $data) {
        return $this->db->table('bf_marketing_schedule')->where('id', $id)->update($data);
    }

    public function updatePostStatus($id, $status)
    {
        return $this->db->table('bf_marketing_schedule')
            ->where('id', $id)
            ->update(['post_status' => $status, 'last_attempt_at' => date('Y-m-d H:i:s')]);
    }

}
?>
<!-- app/Modules/Management/Views/Marketing/modals/insightPreview.php -->
<div class="modal-header bg-primary text-white">
    <h5 class="modal-title">🧠 AI Insight Editor</h5>
    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
</div>

<div class="modal-body">
    <form id="insightEditorForm">
        <input type="hidden" name="id" value="<?= esc($summary['id']) ?>">

        <div class="mb-3">
            <label class="form-label fw-bold">Title</label>
            <input type="text" name="title" class="form-control" value="<?= esc($summary['title']) ?>">
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Summary</label>
            <textarea name="summary" rows="6" class="form-control"><?= esc($cleaned_summary) ?></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Call to Action (CTA)</label>
            <input type="text" name="cta" class="form-control" value="<?= esc($summary['cta'] ?? '') ?>">
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Keywords</label>
            <input type="text" name="keywords" class="form-control" value="<?= esc(implode(',', $keywords)) ?>">
            <small class="text-muted">Comma-separated</small>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-success">💾 Save Changes</button>
        </div>
    </form>

    <?php if (!empty($posts)): ?>
        <hr>
        <h6 class="fw-bold mt-4">📢 Platform Preview</h6>
        <div class="bg-light p-3 rounded small">
            <?php foreach ($posts as $platform => $content): ?>
                <div class="mb-3">
                    <span class="badge bg-secondary"><?= ucfirst($platform) ?></span>
                    <pre class="mt-2"><?= esc($content) ?></pre>
                </div>
            <?php endforeach; ?>
        </div>
    <?php endif; ?>
    
    <hr>
    <div class="mt-4">
        <strong>📊 TF-IDF Chart:</strong>
        <canvas id="tfidfChart" height="200"></canvas>
    </div>

    <hr>
    <div class="mt-4">
        <strong>🧵 Thread Preview</strong>
        <div id="threadPreview" class="bg-white border p-3 rounded small text-muted" style="max-height: 300px; overflow-y: auto;">
            <em>Loading preview...</em>
        </div>
    </div>

</div>

<script <?= $nonce['script'] ?? '' ?>>
document.getElementById('insightEditorForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(this);

    fetch('<?= site_url("/API/Management/updateInsight") ?>', {
        method: 'POST',
        body: formData
    })
    .then(r => r.json())
    .then(res => {
        if (res.status === 'success') {
            alert('✅ Saved successfully!');
            location.reload();
        } else {
            alert('❌ Error: ' + res.message);
        }
    })
    .catch(err => {
        alert('❌ Save failed.');
        console.error(err);
    });
});
</script>
<script <?= $nonce['script'] ?? '' ?>>
function updatePlatformPreview() {
    const title = document.querySelector('input[name="title"]').value;
    const summary = document.querySelector('textarea[name="summary"]').value;
    const keywords = document.querySelector('input[name="keywords"]').value;

    fetch('<?= site_url('/API/Marketing/generateLivePreview') ?>', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ title, summary, keywords })
    })
    .then(r => r.json())
    .then(res => {
        if (res.status === 'success') {
            const previewContainer = document.querySelector('.bg-light');
            previewContainer.innerHTML = '';
            Object.entries(res.posts).forEach(([platform, content]) => {
                previewContainer.innerHTML += `
                    <div class="mb-3">
                        <span class="badge bg-secondary">${platform}</span>
                        <pre class="mt-2">${content}</pre>
                    </div>`;
            });
        }
    })
    .catch(err => console.error('Live preview failed', err));
}

document.querySelector('textarea[name="summary"]').addEventListener('input', updatePlatformPreview);
document.querySelector('input[name="keywords"]').addEventListener('input', updatePlatformPreview);
</script>

<script <?= $nonce['script'] ?? '' ?>>
document.addEventListener("DOMContentLoaded", function () {
    fetch(`/index.php/API/Marketing/getTopKeywordChart/<?= esc($summary['id']) ?>`)
        .then(res => res.json())
        .then(data => {
            if (data.status === 'success') {
                const ctx = document.getElementById('tfidfChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'TF-IDF Score',
                            data: data.scores,
                            backgroundColor: '#3E61BC'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        });
});
</script>
<script <?= $nonce['script'] ?? '' ?>>
document.addEventListener("DOMContentLoaded", function () {
    fetch(`/index.php/API/Marketing/generateThreadFromSummary/<?= esc($summary['id']) ?>`)
        .then(res => res.json())
        .then(data => {
            if (data.status === 'success') {
                const container = document.getElementById('threadPreview');
                container.innerHTML = '';
                data.thread.forEach((tweet, i) => {
                    container.innerHTML += `<p><strong>Part ${i + 1}:</strong> ${tweet}</p>`;
                });
            }
        });
});
</script>
<!-- app/Modules/Management/Views/Marketing/resources/groupedContentPreview.php -->
<div class="container my-5">
    <h3 class="mb-4">📝 Grouped Content Drafts</h3>

    <div class="mb-5">
        <h4>📩 Email Newsletter Draft</h4>
        <pre style="background:#f9f9f9; padding:1rem; border-radius:5px; white-space:pre-wrap;"><?= esc($emailContent) ?></pre>
    </div>

    <div>
        <h4>🧾 Blog Article Draft</h4>
        <div class="bg-light p-4 rounded shadow-sm">
            <?= $blogContent ?>
        </div>
    </div>
</div>
<!-- app/Modules/Management/Views/Marketing/resources/groupedSummariesView.php -->
<div class="container mt-4">
    <h3 class="mb-3">🧠 Grouped Finalized Summaries by Similarity</h3>
    <div class="mb-3">
        <a href="<?= site_url('API/Management/exportGroupedSummariesCSV') ?>" class="btn btn-sm btn-outline-secondary">📁 Export CSV</a>
        <a href="<?= site_url('API/Management/shareGroupedSummaries/discord') ?>" class="btn btn-sm btn-outline-primary">📤 Share to Discord</a>
        <a href="<?= site_url('API/Management/shareGroupedSummaries/linkedin') ?>" class="btn btn-sm btn-outline-info">📤 Share to LinkedIn</a>
    </div>

    <?php if (empty($groupedSummaries)): ?>
        <div class="alert alert-info">No grouped summaries found.</div>
    <?php else: ?>
        <?php foreach ($groupedSummaries as $index => $group): ?>
            <div class="card mb-4 shadow">
                <div class="card-header bg-primary text-white">
                    Group #<?= $index + 1 ?> — <?= count($group) ?> items
                </div>
                <div class="card-body">
                    <?php foreach ($group as $summary): ?>
                        <div class="mb-3 p-3 border rounded bg-light">
                            <h5><?= esc($summary['title'] ?? 'Untitled') ?></h5>
                            <p><?= esc(word_limiter(strip_tags($summary['summary'] ?? ''), 40)) ?></p>
                            <a href="<?= site_url('Marketing/PreviewGeneratedPost/' . $summary['id']) ?>" class="btn btn-sm btn-outline-primary" target="_blank">Preview</a>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>
        <?php endforeach; ?>
    <?php endif; ?>
</div>
<!-- app/Modules/Management/Views/Marketing/resources/timelineGroupedView.php -->
<div class="container my-5">
    <h3 class="mb-4">🕒 Topic-Based Timeline View</h3>
    <?php if (!empty($timeline)): ?>
        <?php foreach ($timeline as $date => $articles): ?>
            <h5 class="text-muted mt-4"><?= esc(date('F j, Y', strtotime($date))); ?></h5>
            <div class="row">
                <?php foreach ($articles as $article): ?>
                    <div class="col-md-6 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h6 class="card-title"><?= esc($article['title']) ?></h6>
                                <p class="card-text small"><?= esc(substr(strip_tags($article['summary']), 0, 150)) ?>...</p>
                                <p class="text-soft small"><?= date('g:i A', strtotime($article['scraped_at'] ?? $article['created_on'])) ?></p>
                                <a href="javascript:void(0);" class="btn btn-sm btn-outline-primary mt-2"
                                    onclick="loadSummaryInsightModal(<?= esc($article['id']) ?>)">
                                    🔍 View Insights
                                </a>

                                <?php if (!empty($article['keywords'])): ?>
                                    <div class="small text-muted mb-2">
                                        <?php foreach (explode(',', $article['keywords']) as $tag): ?>
                                            <span class="badge bg-light me-1">#<?= esc(trim($tag)) ?></span>
                                        <?php endforeach; ?>
                                    </div>
                                <?php endif; ?>
                                <canvas class="tfidf-chart" data-summary-id="<?= esc($article['id']) ?>" width="100%" height="200"></canvas>

                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php endforeach; ?>
    <?php else: ?>
        <div class="alert alert-warning">⚠️ No timeline data available.</div>
    <?php endif; ?>
</div>
<!-- Modal Placeholder -->
<div class="modal fade" id="insightModal" tabindex="-1" aria-labelledby="insightModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="insightModalLabel">📊 Summary Insight</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="insightModalBody">
        <p class="text-muted">Loading insights...</p>
      </div>
    </div>
  </div>
</div>

<script <?= $nonce['script'] ?? '' ?>>
function loadSummaryInsightModal(summaryId) {
    fetch(`/index.php/API/Marketing/PreviewGeneratedPost/${summaryId}`)
        .then(res => res.text())
        .then(html => {
            document.getElementById('insightModalBody').innerHTML = html;
            let modal = new bootstrap.Modal(document.getElementById('insightModal'));
            modal.show();
        })
        .catch(err => {
            console.error('Failed to load insight modal:', err);
            document.getElementById('insightModalBody').innerHTML = "<p class='text-danger'>Failed to load insights.</p>";
        });
}
</script>

<script src="<?= base_url('assets/vendor/chart.js/2.1.2/Chart.min.js'); ?>" <?= $nonce['script'] ?? '' ?>></script>
<script <?= $nonce['script'] ?? '' ?>>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll('.tfidf-chart').forEach(canvas => {
        const summaryId = canvas.dataset.summaryId;
        const ctx = canvas.getContext('2d');

        fetch(`/index.php/API/Marketing/getTopKeywordChart/${summaryId}`)
            .then(res => res.json())
            .then(data => {
                if (data.status === 'success') {
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.labels,
                            datasets: [{
                                label: 'TF-IDF Score',
                                data: data.scores,
                                backgroundColor: '#3E61BC'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                } else {
                    ctx.canvas.parentNode.innerHTML = "<p class='text-danger small'>Chart unavailable.</p>";
                }
            }).catch(err => {
                console.error(err);
                ctx.canvas.parentNode.innerHTML = "<p class='text-danger small'>Chart load failed.</p>";
            });
    });
});
</script>
<!-- app/Modules/Management/Views/Marketing/resources/finalizedSummaries.php -->
<?php if (!empty($finalizedContent)): ?>
    <div class="row">
        <?php foreach ($finalizedContent as $post): ?>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <h6 class="card-title"><?= esc($post->title) ?></h6>
                        <p class="small text-muted"><?= date('F j, Y g:i A', strtotime($post->created_on)) ?></p>
                        <div class="mb-2"><?= esc(word_limiter(strip_tags($post->summary), 40)) ?></div>
                        <button class="btn btn-primary btn-sm" onclick='dynamicModalLoader("📋 Preview Generated Post", "<?= site_url('Management/Marketing/previewGeneratedPost/' . $post->id) ?>", "modal-lg")'>📋 Preview</button>
                    </div>
                </div>
            </div>
        <?php endforeach; ?>
    </div>
<?php else: ?>
    <div class="alert alert-warning">No finalized content available.</div>
<?php endif; ?>
<!-- app/Modules/Management/Views/Marketing/resources/generatedSummaries.php -->
<div class="nk-block">
    <div class="nk-block-head">
        <div class="nk-block-head-content d-flex justify-content-between align-items-center">
            <h4 class="nk-block-title">📢 Generated Marketing Summaries</h4>
            <div class="d-flex justify-content-end mt-3">
                <label class="form-check form-switch ml-2">
                    <input type="checkbox" class="form-check-input btn btn-lg" id="liveModeToggle">
                    <span class="form-check-label">Live Mode</span>
                </label>
            </div>
        </div>
        <p class="text-soft">
            This section shows finalized summaries ready for distribution across platforms.
            <?php if (!empty($defaultKeyword)) : ?>
                <span class="badge bg-primary ms-2">🔍 Filtered by "<?= esc($defaultKeyword) ?>"</span>
            <?php endif; ?>
        </p>
    </div>
    <div class="input-group mb-3">
        <input type="text" id="keywordFilterInput" class="form-control" placeholder="🔍 Filter by keyword...">
        <button class="btn btn-outline-secondary" type="button" onclick="filterSummariesByKeyword()">Apply</button>
        <button class="btn btn-outline-danger" type="button" onclick="clearKeywordFilter()">Clear</button>
    </div>

    <div class="row" id="generatedSummariesBlock">
        <?php if (!empty($todaysStory)) : ?>
            <?php foreach ($todaysStory as $summary): ?>
                <?php 
                    $title = is_array($summary) ? $summary['title'] : $summary->title;
                    $summaryText = is_array($summary) ? $summary['summary'] ?? null : $summary->summary ?? null;
                    if (!$summaryText || strlen(trim($summaryText)) < 15) continue; 
                    $keywords = is_array($summary) ? $summary['keywords'] : $summary->keywords;
                    $cta = is_array($summary) ? $summary['cta'] ?? null : ($summary->cta ?? null);
                    $id = is_array($summary) ? $summary['id'] : $summary->id;
                    $created = is_array($summary) ? $summary['created_at'] : $summary->created_at;
                ?>
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <h6 class="title mb-1"><?= esc(mb_decode_mimeheader($title)) ?></h6>
                            <p class="text-soft small mb-2"><?= date('F j, Y g:i A', strtotime($created)) ?></p>
                            <div class="mb-2 small"><?= esc(preg_replace('/=\r?\n|\r|\n|=3D/', '', $summaryText)) ?></div>
                            <?php if (!empty(trim($keywords)) && $keywords !== '[]'): ?>
                                <div class="mb-2 small text-muted" id="hashtag-block-<?= $id ?>">
                                    <strong>#Tags:</strong>
                                    <?php foreach (explode(',', $keywords) as $tag): ?>
                                        <?php if (trim($tag) !== ''): ?>
                                            <span class="badge bg-light me-1 text-dark">#<?= trim($tag) ?></span>
                                        <?php endif; ?>
                                    <?php endforeach; ?>
                                </div>
                            <?php endif; ?>
                            <?php if (!empty($cta)): ?>
                                <div class="small text-primary mb-2"><strong>📣 CTA:</strong> <?= esc($cta) ?></div>
                            <?php endif; ?>

                            <a href="javascript:void(0);" onclick="dynamicModalLoader('<?= site_url('/Management/Marketing/previewGeneratedPost/' . $id) ?>')" class="btn btn-primary btn-sm mt-auto">🔍 Preview Post</a>
                            <button 
                                type="button" 
                                class="btn btn-primary dynamicModalLoader" 
                                data-formtype="Marketing" 
                                data-endpoint="previewGeneratedPost" 
                                data-accountid="<?= $post['id']; ?>">
                                🔍 Preview Post
                            </button>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>

        <?php else : ?>
            <div class="col-12">
                <div class="alert alert-warning">
                    ⚠️ No summaries available. Click "Generate Today’s Content" to begin.
                </div>
            </div>
        <?php endif; ?>
    </div>

    <div class="card mt-4">
        <div class="card-header bg-primary text-white" style="background-color: #3E61BC !important;">
            <strong>Top Keywords Insight</strong>
        </div>
        <div class="card-body">
            <canvas id="tfidfChart" width="100%" height="300"></canvas>
        </div>
    </div>

</div>
<!-- Modal -->
<div class="modal fade" id="previewPostModal" tabindex="-1" aria-labelledby="previewPostModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewPostModalLabel">🔍 Post Preview</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="previewPostContent">
        <div class="text-center my-5">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="<?= base_url('assets/vendor/chart.js/2.1.2/Chart.min.js'); ?>" <?= $nonce['script'] ?? '' ?>></script>
<script <?= $nonce['script'] ?? '' ?>>
document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById('tfidfChart').getContext('2d');

    fetch('<?= site_url("API/Marketing/getTopKeywordChart/SUMMARY_ID_HERE") ?>')
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'TF-IDF Score',
                            data: data.scores,
                            backgroundColor: '#3E61BC'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } else {
                ctx.canvas.parentNode.innerHTML = "<p class='text-danger'>Failed to load chart data.</p>";
            }
        })
        .catch(error => {
            console.error("Error loading chart:", error);
            ctx.canvas.parentNode.innerHTML = "<p class='text-danger'>Chart error.</p>";
        });
});
</script>

<script <?= $nonce['script'] ?? '' ?>>
// 🧠 Dynamic Preview Loader
function dynamicModalLoader(url) {
    const modal = new bootstrap.Modal(document.getElementById('previewPostModal'));
    const content = document.getElementById('previewPostContent');

    // Show loading spinner immediately
    content.innerHTML = `
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;

    modal.show();

    fetch(url)
        .then(response => response.json()) // 🛠 FIX: parse as JSON
        .then(data => {
            if (data.status === 'success' && data.html) {
                content.innerHTML = data.html;  // 🛠 FIX: use data.html
            } else {
                content.innerHTML = `<div class="alert alert-danger">❌ Failed to load preview. Please try again.</div>`;
            }
        })
        .catch(err => {
            content.innerHTML = `<div class="alert alert-danger">❌ Error loading preview. Please try again.</div>`;
            console.error('Error loading preview:', err);
        });
}

</script>

<script <?= $nonce['script'] ?? '' ?>>
const liveToggle = document.getElementById('liveModeToggle');
const summariesBlock = document.getElementById('generatedSummariesBlock');
const spinnerHtml = `
    <div class="text-center w-100 my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
`;
let liveInterval = null;

liveToggle.addEventListener('change', () => {
    if (liveToggle.checked) {
        liveInterval = setInterval(refreshGeneratedSummaries, 30000);
        refreshGeneratedSummaries();
    } else {
        clearInterval(liveInterval);
    }
});

async function refreshGeneratedSummaries() {
    summariesBlock.innerHTML = spinnerHtml;
    try {
        const response = await fetch('<?=site_url('/API/Marketing/fetchGeneratedSummariesJson')?>');
        const data = await response.json();

        if (data.status !== 'success') {
            summariesBlock.innerHTML = `<div class="alert alert-warning">⚠️ ${data.message}</div>`;
            return;
        }

        const trendingKeywords = {};
        summariesBlock.innerHTML = '';

        data.summaries.forEach(summary => {
            const card = renderSummaryCard(summary);
            summariesBlock.appendChild(card);

            // Collect trending keywords
            if (summary.keywords) {
                summary.keywords.split(',').forEach(keyword => {
                    keyword = keyword.trim();
                    if (keyword) trendingKeywords[keyword] = (trendingKeywords[keyword] || 0) + 1;
                });
            }
        });

        renderTrendingKeywords(trendingKeywords);

        filterSummariesByKeyword();
    } catch (err) {
        console.error('Live refresh failed:', err);
        summariesBlock.innerHTML = `<div class="alert alert-danger">🚨 Failed to refresh summaries.</div>`;
    }
}

function renderSummaryCard(summary) {
    const col = document.createElement('div');
    col.className = 'col-lg-4 col-md-6 mb-4';

    const card = document.createElement('div');
    card.className = 'card h-100 shadow-sm d-flex flex-column';

    const cardBody = document.createElement('div');
    cardBody.className = 'card-body d-flex flex-column';

    const title = document.createElement('h6');
    title.className = 'mb-1 title';
    title.innerText = summary.title;

    const date = document.createElement('p');
    date.className = 'mb-2 small text-soft';
    date.innerText = new Date(summary.created_at).toLocaleString();

    const summaryText = document.createElement('div');
    summaryText.className = 'mb-2 small';
    summaryText.innerText = summary.summary;

    const hashtagsBlock = document.createElement('div');
    hashtagsBlock.className = 'mb-2 small text-muted';
    hashtagsBlock.id = 'hashtag-block-' + summary.id;
    if (summary.keywords) {
        hashtagsBlock.innerHTML = `<strong>#Tags:</strong> ` +
            summary.keywords.split(',').map(tag => {
                if (tag.trim() !== '') {
                    return `<span class="badge bg-light me-1 text-dark">#${tag.trim()}</span>`;
                }
                return '';
            }).join(' ');
    }

    const ctaBlock = document.createElement('div');
    if (summary.cta) {
        ctaBlock.className = 'mb-2 small text-primary';
        ctaBlock.innerHTML = `<strong>📣 CTA:</strong> ${summary.cta}`;
    }

    const previewBtn = document.createElement('a');
    previewBtn.className = 'btn btn-primary btn-sm mt-auto';
    previewBtn.href = 'javascript:void(0);';
    previewBtn.innerHTML = '🔍 Preview Post';
    previewBtn.onclick = () => dynamicModalLoader('<?php echo site_url('/Management/Marketing/previewGeneratedPost'); ?>' + summary.id);

    cardBody.append(title, date, summaryText, hashtagsBlock, ctaBlock, previewBtn);
    card.append(cardBody);
    col.append(card);
    return col;
}

function renderTrendingKeywords(trendingKeywords) {
    const trendingAreaId = 'trending-keywords-strip';
    let trendingArea = document.getElementById(trendingAreaId);

    if (!trendingArea) {
        const header = document.querySelector('.nk-block-head-content');
        trendingArea = document.createElement('div');
        trendingArea.id = trendingAreaId;
        trendingArea.className = 'text-soft small mt-2';
        header.appendChild(trendingArea);
    }

    const topKeywords = Object.entries(trendingKeywords)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5)
        .map(([word]) => `<span class="badge bg-info text-dark me-1">#${word}</span>`)
        .join(' ');

    trendingArea.innerHTML = `<strong>📈 Trending:</strong> ${topKeywords || 'No trending keywords yet'}`;
}

function filterSummariesByKeyword() {
    const keyword = document.getElementById('keywordFilterInput').value.toLowerCase().trim();
    const summaries = document.querySelectorAll('#generatedSummariesBlock .col-md-6, #generatedSummariesBlock .col-lg-4');

    summaries.forEach((card) => {
        const title = card.querySelector('h6.title')?.innerText.toLowerCase() || '';
        const body = card.querySelector('.mb-2.small')?.innerText.toLowerCase() || '';
        const tagsBlock = card.querySelector('[id^="hashtag-block-"]');
        const tags = tagsBlock ? tagsBlock.innerText.toLowerCase() : '';

        const match = keyword === '' || title.includes(keyword) || body.includes(keyword) || tags.includes(keyword);
        card.style.display = match ? '' : 'none';
    });
}

function clearKeywordFilter() {
    document.getElementById('keywordFilterInput').value = '';
    filterSummariesByKeyword();
}

document.addEventListener("DOMContentLoaded", () => {
    const keywordInput = document.getElementById('keywordFilterInput');
    const params = new URLSearchParams(window.location.search);
    const keywordParam = params.get('keyword');

    const pathSegments = window.location.pathname.split('/').filter(Boolean);
    let keywordFromPath = '';

    if (pathSegments.includes('Search')) {
        const searchType = pathSegments[pathSegments.indexOf('Search') + 1];
        const value = pathSegments[pathSegments.indexOf('Search') + 2] || '';
        keywordFromPath = decodeURIComponent(value);
    }

    const finalKeyword = keywordParam || keywordFromPath || <?=json_encode($defaultKeyword ?? '')?>;

    if (finalKeyword && keywordInput) {
        keywordInput.value = finalKeyword;
        filterSummariesByKeyword();
    }
});
</script>
<!-- app/Modules/Management/Views/Marketing/index.php -->
<?php
// ⏱️ Load Page Context
$managementActionItems = $siteSettings->managementActionItems;
$department = $uri->getSegment(2);
$viewFileData = [
    'managementActionItems' => $managementActionItems,
    'targetUsers' => $targetUsers ?? 0,
    'totalActiveUsers' => $totalActiveUsers ?? 0,
    'totalActivePartners' => $totalActivePartners ?? 0,
    'totalActiveCampaigns' => $totalActiveCampaigns ?? [],
    'getTasksByDepartment' => $getTasksByDepartment ?? [],
    'totalDepartmentTasks' => $totalDepartmentTasks ?? [],
    'totalPageSEOTasks' => $totalPageSEOTasks ?? [],
    'totalTransFees' => $totalTransFees ?? 0,
    'totalLastTransFees' => $totalLastTransFees ?? 0,
    'usersPercentage' => $usersPercentage ?? 0,
    'getActiveCampaigns' => $getActiveCampaigns ?? [],
    'totalApprovedAssets' => $totalApprovedAssets ?? 0,
    'totalPendingAssets' => $totalPendingAssets ?? 0,
    'userGoals' => $userGoals ?? [],
    'newsUpdates' => $newsUpdates ?? [],
    'getBlogPosts' => $getBlogPosts ?? [],
    'recentMarketingPosts' => $recentMarketingPosts ?? [],
    'todaysStory' => $todaysStory ?? [],
];
?>

<div class="nk-block">
    <div class="row gy-gs">
        <div class="col-lg-12">
            <div class="nk-block-head-xs">
                <div class="nk-block-head-content">
                    <h1 class="title nk-block-title">MyMI Management - <?= esc($department) ?></h1>
                    <a href="<?= site_url('/Management'); ?>">← Back to Management Dashboard</a>
                </div>
            </div>
        </div>

        <!-- 🧩 Primary Marketing Interface -->
        <div class="col-12 col-xxl-4">
            <?= view('ManagementModule/Views/Marketing\index\action_center_new', $viewFileData); ?>
        </div>
        <div class="col-12 col-xxl-8">
        <?= view('ManagementModule/Views/Marketing\index\control_center', $viewFileData); ?>
        </div>

        <!-- 🔘 Control Panel + Analytics -->
        <div class="col-12">
            <?php // view('ManagementModule/Views/Marketing\resources\controlPanelBlock', $viewFileData); ?>
        </div>
        <div class="col-12">            
            <?= view('ManagementModule/Views/Marketing\index\most_recent_content', $viewFileData); ?>
            <?php // view('ManagementModule/Views/Marketing\resources\analyticsSummaryBlock', $viewFileData); ?>
        </div>

        <!-- 📋 Summaries + CTA Suggestion -->
        <div class="col-12 col-xxl-12">
            <?= view('ManagementModule/Views/Marketing\resources\controlPanelBlock', $viewFileData); ?>
            <?php // view('ManagementModule/Views/Marketing\resources\generatedSummariesBlock', $viewFileData); ?>
        </div>
        <div class="col-12 col-xxl-6">
            <?php // echo view('ManagementModule/Views/Marketing\resources\ctaRecommenderModule', $viewFileData); ?>
        </div>

        <div class="col-12 mt-4">
            <h5 class="title">✅ Finalized Marketing Content</h5>
            <div id="finalizedContentBlock">
                <?= view('ManagementModule/Views/Marketing\resources\finalizedSummaries', ['finalizedContent' => $finalizedContent ?? []]) ?>
            </div>
        </div>

        <!-- 🔄 Live Refresh Toggle + View -->
        <div class="col-12 col-xxl-12 px-2">
            <div class="generated-summaries" id="generatedSummariesBlock">
                <?= view('ManagementModule/Views/Marketing\resources\generatedSummaries', $viewFileData); ?>
            </div>
        </div>

        <!-- 📰 Recent Posts -->
        <div class="col-12 col-xxl-12 mt-3">
            <div class="card card-bordered">
                <div class="card-inner">
                    <h5 class="title">📰 Recent Marketing Posts</h5>
                    <?php
                    $validPosts = array_filter($recentMarketingPosts, fn($p) => !empty($p->title));
                    if (!empty($validPosts)): ?>
                        <ul class="list-group">
                            <?php foreach ($validPosts as $post): ?>
                                <li class="list-group-item d-flex justify-content-between align-items-start flex-column">
                                    <div class="w-100">
                                        <strong><?= esc($post->title ?: '(Untitled Post)') ?></strong><br>
                                        <small class="text-muted"><?= date('M d, Y h:i A', strtotime($post->created_at)) ?></small><br>
                                        <?php if (!empty($post->short_description)): ?>
                                            <small class="text-secondary"><?= esc($post->short_description) ?>...</small>
                                        <?php else: ?>
                                            <small class="text-secondary">No description available.</small>
                                        <?php endif; ?>
                                    </div>
                                    <div class="mt-2">
                                        <button class="btn btn-sm btn-primary"
                                                onclick="dynamicModalLoader('Marketing', 'PreviewGeneratedPost', '<?= $post->id ?>')">
                                            Preview
                                        </button>
                                    </div>
                                </li>
                            <?php endforeach; ?>
                        </ul>
                    <?php else: ?>
                        <p>No posts with valid titles available yet. Click 'Generate' to create one!</p>
                    <?php endif; ?>
                </div>
            </div>
        </div>

        <!-- 📊 Additional Insights -->
        <div class="col-12 col-xxl-4 mt-3">
            <?= view('ManagementModule/Views/Marketing\index\exchange_action_center', $viewFileData); ?>
        </div>
        <div class="col-12 col-xxl-8 mt-3">
            <?= view('ManagementModule/Views/Marketing\index\target_users', $viewFileData); ?>
        </div>
    </div>
</div>

<script <?= $nonce['script'] ?? '' ?>>
if (document.getElementById('liveModeToggle')?.checked) {
    setInterval(() => {
        fetch("<?= site_url('Marketing/fetchGeneratedSummariesBlock') ?>", {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
                // 🔒 Add CSRF dynamically if needed
                // 'X-CSRF-TOKEN': "<?= csrf_hash() ?>"
            }
        })
        .then(res => res.text())
        .then(html => {
            document.getElementById('generatedSummariesBlock').innerHTML = html;
        });
    }, 30000);
}
</script>
<!-- app/Modules/Management/Views/Marketing/resources/controlPanelBlock.php -->
<div class="card card-bordered mb-4">
    <div class="card-inner">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="title mb-0">🛠️ Control Panel</h5>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="liveToggle">
                <label class="form-check-label" for="liveToggle">Live Mode</label>
            </div>
        </div>

        <div class="d-flex flex-wrap gap-2 justify-content-end mt-3">
            <button class="btn btn-success" id="generatePostBtn">📝 Generate New Post</button>
            <button class="btn btn-primary" onclick="generateTodaysStory()">📢 Generate Today’s Story</button>
            <button class="btn btn-outline-secondary" onclick="refreshDashboard()">🔄 Refresh Dashboard</button>
            <button class="btn btn-info" onclick="loadPendingSummaries()">🧪 Preview Summaries</button>
            <button class="btn btn-warning" onclick="triggerReprocessIncompleteEmails()">🛠️ Reprocess Emails</button>
            <a class="btn btn-warning" href="<?= site_url('API/Management/triggerBackfill'); ?>">
                🔁 Run Backfill for Incomplete Posts
            </a>
            <a href="<?= site_url('Management/Marketing/View-Grouped-Summaries') ?>" class="btn btn-outline-info">
                🧠 View Grouped Summaries
            </a>
            <a href="<?= site_url('API/Marketing/publishGroupedContentDraft') ?>" 
            class="btn btn-success"
            onclick="return confirm('Are you sure you want to publish today’s grouped digest now?');">
                    🚀 Publish Grouped Digest
            </a>

        </div>

        <div id="generate-post-status" class="mt-2 text-success small"></div>
        <div id="todays-story-status" class="mt-2 text-success small"></div>
    </div>
</div>

<script <?= $nonce['script'] ?? '' ?>>
function refreshDashboard() {
    location.reload();
}
</script>
<script <?= $nonce['script'] ?? '' ?>>
document.addEventListener("DOMContentLoaded", () => {
    const csrfToken = "<?= csrf_hash(); ?>";

    // ✅ Generate Today's Story
    const generateTodaysStory = async () => {
        const statusEl = document.getElementById('todays-story-status');
        statusEl.textContent = '⏳ Generating...';
        statusEl.classList.remove('text-danger', 'text-success');

        try {
            const response = await fetch("<?= site_url('API/Marketing/generateDailyContentDigest') ?>");
            const data = await response.json();

            if (data.status === 'success') {
                statusEl.textContent = '✅ ' + data.message;
                setTimeout(() => location.reload(), 1000);
            } else {
                statusEl.classList.add('text-danger');
                statusEl.textContent = '❌ ' + data.message;
            }
        } catch (error) {
            statusEl.classList.add('text-danger');
            statusEl.textContent = '❌ Error: ' + error.message;
        }
    };

    // ✅ Generate Marketing Post
    const generatePostBtn = document.getElementById("generatePostBtn");
    if (generatePostBtn) {
        generatePostBtn.addEventListener("click", async () => {
            const status = document.getElementById("generate-post-status");
            status.textContent = "⏳ Generating post...";
            status.classList.remove("text-danger", "text-success");

            try {
                const response = await fetch("<?= site_url('API/Marketing/generateContentFromScraper') ?>");
                const data = await response.json();

                if (data.status === "success") {
                    status.textContent = "✅ Post generated successfully!";
                    setTimeout(() => location.reload(), 1000);
                } else {
                    status.classList.add("text-danger");
                    status.textContent = "❌ " + data.message;
                }
            } catch (err) {
                console.error("❌ Error:", err);
                status.classList.add("text-danger");
                status.textContent = "❌ An error occurred.";
            }
        });
    }

    // ✅ Mass Resend Activation Emails
    window.massResendActivationEmails = async () => {
        const statusEl = document.getElementById("resend-status");
        statusEl.textContent = "⏳ Processing...";
        statusEl.classList.remove("text-danger", "text-success");

        try {
            const response = await fetch("<?= site_url('API/Marketing/massResendActivationEmails') ?>", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest",
                    "X-CSRF-TOKEN": csrfToken,
                },
                body: JSON.stringify({})
            });
            const data = await response.json();

            if (data.status === "success") {
                statusEl.classList.add("text-success");
                statusEl.textContent = "✅ " + data.message;
            } else {
                statusEl.classList.add("text-danger");
                statusEl.textContent = "❌ " + data.message;
            }
        } catch (err) {
            console.error(err);
            statusEl.classList.add("text-danger");
            statusEl.textContent = "❌ An error occurred.";
        }
    };

    // ✅ Reprocess Incomplete Emails
    window.triggerReprocessIncompleteEmails = async () => {
        if (!confirm("Reprocess up to 20 incomplete emails?")) return;

        try {
            const response = await fetch("<?= site_url('API/Marketing/reprocessIncompleteEmails') ?>");
            const data = await response.json();
            alert(data.message || "✅ Reprocessed successfully.");
        } catch (err) {
            alert("❌ Error: " + (err?.message || "Failed to reprocess."));
        }
    };

    // ✅ Expose global handler for 'Generate Today's Story'
    window.generateTodaysStory = generateTodaysStory;

    async function approveBufferItem(id) {
        updateStatus(`⏳ Approving #${id}...`);
        try {
            const response = await fetch(`<?= site_url('API/Management/approveBufferItem/') ?>${id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    'X-Requested-With': 'XMLHttpRequest',
                    "X-CSRF-TOKEN": csrfToken
                }
            });
            const data = await response.json();
            handleBufferResponse(data, id);
        } catch (err) {
            updateStatus(`❌ Error: ${err.message}`, true);
        }
    }

    function exportBufferCSV() {
        window.open("<?= site_url('API/Management/exportBufferPosts') ?>", '_blank');
    }

    async function loadPendingSummaries() {
        const container = document.getElementById('pending-summaries-preview');
        container.innerHTML = '⏳ Loading...';

        try {
            const res = await fetch("<?= site_url('API/Marketing/previewPendingSummaries') ?>");
            const html = await res.text();
            container.innerHTML = html;
        } catch (err) {
            container.innerHTML = '❌ Failed to load previews.';
            console.error(err);
        }
    }

    async function rejectBufferItem(id) {
        updateStatus(`⏳ Rejecting #${id}...`);
        try {
            const response = await fetch(`<?= site_url('API/Management/rejectBufferItem/') ?>${id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    'X-Requested-With': 'XMLHttpRequest',
                    "X-CSRF-TOKEN": csrfToken
                }
            });
            const data = await response.json();
            handleBufferResponse(data, id);
        } catch (err) {
            updateStatus(`❌ Error: ${err.message}`, true);
        }
    }

    function updateStatus(message, isError = false) {
        const el = document.getElementById('bufferActionStatus');
        el.classList.remove('text-success', 'text-danger');
        el.classList.add(isError ? 'text-danger' : 'text-success');
        el.textContent = message;
    }

    function handleBufferResponse(data, id) {
        if (data.status === 'success') {
            updateStatus(`✅ ${data.message}`);
            document.querySelector(`#bufferTableBody tr td:first-child:contains(${id})`).parentElement.remove();
        } else {
            updateStatus(`❌ ${data.message}`, true);
        }
    }

    function refreshBufferTable() {
        location.reload(); // Optional: You can switch this to a fetch if desired
    }
});
</script>