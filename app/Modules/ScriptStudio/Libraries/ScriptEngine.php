<?php
namespace App\Modules\ScriptStudio\Libraries;

class ScriptEngine
{
    public function convertToPineScript(string $code): string
    {
        $normalized = trim($code);
        if ($normalized === '') {
            return "// Pine Script export placeholder\n";
        }

        return "// Pine Script export generated by Script Studio\n" . $normalized . "\n";
    }

    public function convertToThinkScript(string $code): string
    {
        $normalized = trim($code);
        if ($normalized === '') {
            return "# ThinkScript export placeholder\n";
        }

        $thinkified = preg_replace('/(?:var|let)\s+/i', 'def ', $normalized);

        return "# ThinkScript export generated by Script Studio\n" . ($thinkified ?? $normalized) . "\n";
    }

    public function buildEmulatedCode(?string $language, ?string $code): string
    {
        $language = $language ?: 'PineScript';
        $code = trim((string) $code);

        if ($code === '') {
            return '';
        }

        return sprintf("// Emulated %s output generated for in-browser testing\n%s\n", $language, $code);
    }

    public function normalizeTags(string|array|null $tags): string
    {
        if (empty($tags)) {
            return json_encode([]);
        }

        if (is_string($tags)) {
            $parts = preg_split('/[,;]+/', $tags);
        } else {
            $parts = $tags;
        }

        $cleaned = [];
        foreach ($parts as $tag) {
            $tag = trim((string) $tag);
            if ($tag !== '') {
                $cleaned[] = $tag;
            }
        }

        $cleaned = array_values(array_unique($cleaned));

        return json_encode($cleaned);
    }

    public function tagsToArray(string|array|null $tags): array
    {
        if (is_array($tags)) {
            return $tags;
        }

        if (is_string($tags) && $tags !== '') {
            $decoded = json_decode($tags, true);
            if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
                return $decoded;
            }

            return array_values(array_filter(array_map('trim', preg_split('/[,;]+/', $tags))));
        }

        return [];
    }

    public function tagsToString(string|array|null $tags): string
    {
        return implode(', ', $this->tagsToArray($tags));
    }

    public function renderMarkdown(?string $markdown): string
    {
        $markdown = trim((string) $markdown);
        if ($markdown === '') {
            return '';
        }

        $lines = preg_split('/\r\n|\r|\n/', $markdown);
        $html = '';
        $inList = false;
        $inCode = false;

        foreach ($lines as $line) {
            $trimmed = rtrim($line);

            if (preg_match('/^```/', ltrim($trimmed))) {
                if ($inCode) {
                    $html .= "</code></pre>";
                    $inCode = false;
                } else {
                    $html .= '<pre><code>';
                    $inCode = true;
                }
                continue;
            }

            if ($inCode) {
                $html .= htmlspecialchars($trimmed, ENT_QUOTES, 'UTF-8') . "\n";
                continue;
            }

            if (preg_match('/^\s*[-*+]\s+(.+)/', $trimmed, $matches)) {
                if (! $inList) {
                    $html .= '<ul>';
                    $inList = true;
                }
                $html .= '<li>' . $this->formatInlineMarkdown($matches[1]) . '</li>';
                continue;
            }

            if ($inList) {
                $html .= '</ul>';
                $inList = false;
            }

            if (preg_match('/^###\s+(.+)/', $trimmed, $matches)) {
                $html .= '<h3>' . $this->formatInlineMarkdown($matches[1]) . '</h3>';
                continue;
            }

            if (preg_match('/^##\s+(.+)/', $trimmed, $matches)) {
                $html .= '<h2>' . $this->formatInlineMarkdown($matches[1]) . '</h2>';
                continue;
            }

            if (preg_match('/^#\s+(.+)/', $trimmed, $matches)) {
                $html .= '<h1>' . $this->formatInlineMarkdown($matches[1]) . '</h1>';
                continue;
            }

            if ($trimmed === '') {
                $html .= '<p></p>';
                continue;
            }

            $html .= '<p>' . $this->formatInlineMarkdown($trimmed) . '</p>';
        }

        if ($inList) {
            $html .= '</ul>';
        }

        if ($inCode) {
            $html .= '</code></pre>';
        }

        return $html;
    }

    private function formatInlineMarkdown(string $text): string
    {
        $escaped = htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
        $escaped = preg_replace('/`(.+?)`/', '<code>$1</code>', $escaped);
        $escaped = preg_replace('/\*\*(.+?)\*\*/s', '<strong>$1</strong>', $escaped);
        $escaped = preg_replace('/\*(.+?)\*/s', '<em>$1</em>', $escaped);
        $escaped = preg_replace('/\[(.+?)\]\((https?:\/\/[^\s]+)\)/', '<a href="$2" target="_blank" rel="noopener">$1</a>', $escaped);

        return $escaped;
    }
}