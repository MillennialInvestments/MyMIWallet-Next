<?php namespace App\Modules\Management\Controllers;use CodeIgniter\Controller;use Config\Services;use App\Config\{APIs,Auth,SiteSettings,SocialMedia};use App\Controllers\UserController;use App\Libraries\{BaseLoader,HtmlFormatter,MyMIAnalytics,MyMIAlerts,MyMIBudget,MyMIDashboard,MyMIExchange,MyMIMarketing,MyMIUser};use App\Models\{AlertsModel,AnnouncementModel,InvestmentModel,ManagementModel,MarketingModel,MyMIGoldModel,SolanaModel,UserModel};use App\Services\{DashboardService,GoalTrackingService,MarketingService,SolanaService,UserService};use CodeIgniter\API\ResponseTrait;use GuzzleHttp\Client;use GuzzleHttp\Exception\RequestException;use voku\helper\HtmlDomParser;class MarketingController extends UserController{use ResponseTrait;use BaseLoader;protected $API;protected $auth;protected $cuID;protected $data;protected $debug;protected $helpers=['auth','form','url'];protected $logger;protected $request;protected $session;protected $uri;protected $siteSettings;protected $NewsEmail;protected $HtmlFormatter;protected $MyMIAnalytics;protected $MyMIAlerts;protected $MyMIBudget;protected $MyMIDashboard;protected $MyMIExchange;protected $MyMIMarketing;protected $MyMIUser;protected $dashboardService;protected $goalTrackingService;protected $marketingService;protected $solanaService;protected $userService;protected $alertsModel;protected $investmentModel;protected $marketingModel;protected $userModel;protected $userAccount;protected $userDashboard;protected $getBlogPosts;protected $departmentTasks;protected $marketing;protected $reporting;public function __construct(){$this->API=config('APIs');$this->auth=service('authentication');$this->logger=service('logger');$this->NewsEmail=config('NewsEmailServer');$this->request=service('request');$this->session=Services::session();$this->siteSettings=config('SiteSettings');$this->debug=$this->siteSettings->debug;$this->uri=$this->request->getUri();$this->alertsModel=new AlertsModel();$this->investmentModel=new InvestmentModel();$this->marketingModel=new MarketingModel();$this->userDashboard=$this->getMyMIDashboard()->dashboardInfo($this->cuID);$this->departmentTasks=$this->getMyMIAnalytics()->get_department_tasks($this->uri->getSegment(2),['Page SEO Edit']);$this->getBlogPosts=$this->getMyMIMarketing()->getBlogPosts();$this->cuID=$this->session->get('user_id')?? $this->auth->id();if(!$this->cuID){log_message('error','Investments ControllerFailed to retrieve valid User ID in MyMIInvestments');throw new \RuntimeException('User ID could not be retrieved.');}log_message('debug',"InvestmentsController: cuID initialized as {$this->cuID}");$this->userAccount=$this->getMyMIUser()->getUserInformation($this->cuID);$userBudget=$this->getMyMIBudget()->getUserBudget($this->cuID);log_message('info','DashboardController L72 - $checkingSummary: '.$userBudget['checkingSummary']);$this->data['checkingSummary']=$userBudget['checkingSummary'];}public function commonData(): array{$this->data=$this->data ??[];$userData=$this->getuserService()->commonData();$this->data=array_merge($this->data,$userData);$this->data['siteSettings']=$this->siteSettings;$this->data['beta']=(string)$this->siteSettings->beta;$this->data['uri']=$this->request->getUri();$this->data['date']=$this->siteSettings->date;$this->data['time']=$this->siteSettings->time;$this->data['hostTime']=$this->siteSettings->hostTime;$dashboardInfo=$this->getDashboardService()->getDashboardInfo($this->cuID);$this->data['completedGoals']=$this->getGoalTrackingService()->getCompletedGoals($this->cuID);$this->data['pendingGoals']=$this->getGoalTrackingService()->getPendingGoals($this->cuID);$this->data['promotionalBanners']=$dashboardInfo['promotionalBanners'];$userBudget=$this->getBudgetService()->getUserBudget($this->cuID);$this->data['totalAccountBalance']=$userBudget['totalAccountBalance']?? 0;$this->data['totalAccountBalanceFMT']=$userBudget['totalAccountBalanceFMT']?? '0.00';$userSolanaData=$this->getSolanaService()->getSolanaData($this->cuID);$this->data['cuSolanaDW']=$userSolanaData['userSolanaWallets']['cuSolanaDW']?? null;$this->data['solanaNetworkStatus']=$userSolanaData['solanaNetworkStatus'];$this->data['cuSolanaTotal']=$userSolanaData['userSolanaWallets']['cuSolanaTotal']?? 0;$this->data['cuSolanaValue']=$userSolanaData['userSolanaWallets']['cuSolanaValue']?? 0;$this->data=array_merge($this->data,$userData);if($this->debug===1){}}public function index(){$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->data['reporting']=$this->getMyMIAnalytics()->reporting();$this->data['recentMarketingPosts']=$this->getMyMIMarketing()->getRecentPosts(5);if(empty($this->data['recentMarketingPosts'])){log_message('info','📭 No recent posts found. Running fallback generation...');$this->getMyMIMarketing()->generateFromTempScraper(5);$this->data['recentMarketingPosts']=$this->getMyMIMarketing()->getRecentPosts(25);}$this->data['todaysStory']=$this->marketingModel->getTodaysStory();$this->data['generatedSummaries']=$this->marketingModel->getLatestGeneratedSummaries(25);$this->data['marketingBuffer']=$this->marketingModel->getMarketingBuffer();if(empty($this->data['todaysStory'])){log_message('info','📅 No content generated today. Triggering summary fallback...');$this->getMyMIMarketing()->generateFromTempScraper(5);$this->data['todaysStory']=$this->marketingModel->where('DATE(created_at)',date('Y-m-d'))->orderBy('created_at','DESC')->findAll();}$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\index',$this->data);}public function add($type=null){log_message('debug','MarketingController L183 - add() method called with type: '.(is_null($type)?'null':$type));if(!empty($type)){if($this->request->getMethod()==='POST'){log_message('debug','Handling POST request for type: '.$type);if($type==='Schedule'){log_message('info','Processing Schedule submission');try{$this->marketingModel->addMarketingSchedule($this->request->getPost());log_message('info','Schedule data saved successfully');if($this->request->isAJAX()){return $this->response->setJSON(['success'=>true,'message'=>'Schedule added successfully']);}else{return redirect()->to('/Management/Marketing/Schedule')->with('success','Schedule added successfully');}}catch(\Exception $e){log_message('error','Error saving schedule: '.$e->getMessage());return $this->response->setJSON(['error'=>'Failed to save schedule.']);}}elseif($type==='Campaign'){log_message('info','Processing Campaign submission');try{$campaignData=['beta'=>$this->request->getPost('beta'),'config_mode'=>$this->request->getPost('config_mode'),'form_mode'=>$this->request->getPost('form_mode'),'escalated'=>$this->request->getPost('escalated'),'user_id'=>$this->request->getPost('user_id'),'user_email'=>$this->request->getPost('user_email'),'username'=>$this->request->getPost('username'),'assigned_to'=>$this->request->getPost('assigned_to'),'date'=>$this->siteSettings->date,'time'=>$this->siteSettings->time,'campaign_name'=>$this->request->getPost('campaign_name'),'promotionalLinks'=>json_encode($this->request->getPost('promotionalLinks')),'overall_campaign_description'=>$this->request->getPost('overall_campaign_description'),'voice_script'=>$this->request->getPost('voice_script'),'facebookMessage'=>$this->request->getPost('facebookMessage'),'linkedinMessage'=>$this->request->getPost('linkedinMessage'),'discordMessage'=>$this->request->getPost('discordMessage'),'stocktwitsMessage'=>$this->request->getPost('stocktwitsMessage'),'tiktokMessage'=>$this->request->getPost('tiktokMessage'),'youtubeMessage'=>$this->request->getPost('youtubeMessage'),'emailMessage'=>$this->request->getPost('emailMessage'),'additionalInfo'=>$this->request->getPost('additionalInfo'),'hashtags'=>$this->request->getPost('hashtags'),];$this->marketingModel->addMarketingCampaign($campaignData);log_message('info','Campaign data saved successfully');if($this->request->isAJAX()){log_message('info','MarketingController L251 - This is using the $this->request->isAJAX() Form Submission');return $this->response->setJSON(['success'=>true,'message'=>'Campaign added successfully']);}else{log_message('info','MarketingController L251 - This is NOT using the $this->request->isAJAX() Form Submission');return redirect()->to('/Management/Marketing/Campaigns')->with('success','Campaign added successfully');}}catch(\Exception $e){log_message('error','Error saving campaign: '.$e->getMessage());return $this->response->setJSON(['error'=>'Failed to save campaign.']);}}else{log_message('error','Unrecognized type in POST request: '.$type);return $this->response->setJSON(['error'=>'Unrecognized type in POST request']);}}if($this->request->getMethod()==='get'){log_message('debug','Handling GET request for type: '.$type);if($type==='Schedule'){log_message('debug','Loading view for Schedule');try{$response=$this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add',$this->data);log_message('debug','View for Schedule loaded successfully');return $response;}catch(\Exception $e){log_message('error','Failed to load view for Schedule: '.$e->getMessage());return $this->response->setJSON(['error'=>'Failed to load view for Schedule']);}}elseif($type==='Campaign'){log_message('debug','Loading view for Campaign');try{$response=$this->renderTheme('ManagementModule\Views\Marketing\Campaign\Add',$this->data);log_message('debug','View for Campaign loaded successfully');return $response;}catch(\Exception $e){log_message('error','Failed to load view for Campaign: '.$e->getMessage());return $this->response->setJSON(['error'=>'Failed to load view for Campaign']);}}else{log_message('error','Unrecognized type in GET request: '.$type);return $this->response->setJSON(['error'=>'Unrecognized type in GET request']);}}}else{log_message('warning','No type provided; redirecting to /Management/Marketing');return redirect()->to('/Management/Marketing')->with('error','No type provided');}}public function addSchedule(){if($this->request->getMethod()==='post'){$additionalInfo=$this->request->getPost('additional_info');$jsonData=null;if(!empty($additionalInfo)){$jsonData=json_decode($additionalInfo,true);if(json_last_error()!==JSON_ERROR_NONE){return redirect()->back()->withInput()->with('error','Invalid JSON format in Additional Information.');}}$scheduleData=['day'=>$this->request->getPost('day'),'time'=>$this->request->getPost('time'),'activity'=>$this->request->getPost('activity'),'link'=>$this->request->getPost('link'),'additional_info'=>json_encode($jsonData)];$this->marketingModel->addMarketingSchedule($scheduleData);return redirect()->to(base_url('Management/Marketing/Schedule'))->with('success','New schedule added successfully.');}$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\Schedule\Add');}public function addSubscriber(){helper('email');$rawRequestBody=$this->request->getBody();$jsonData=json_decode($rawRequestBody,true);$marketingModel=new MarketingModel();$subscriberData=['email'=>$jsonData['email'],'category'=>$jsonData['category'],'referral'=>$jsonData['referral'],'beta'=>$this->siteSettings->beta,'date'=>date('Y-m-d H:i:s'),'hostTime'=>date('Y-m-d H:i:s'),'time'=>date('H:i:s'),'user_id'=>session('user_id'),'user_ip'=>$this->request->getIPAddress()];if($marketingModel->addSubscriber($subscriberData)){$emailService=\Config\Services::email();$emailService->setTo($subscriberData['email']);$emailService->setSubject('🎉 Welcome to Investor’s Talk | MyMI Wallet');$emailService->setMessage(view('emails/welcomeInvestor',['siteSettings'=>$this->siteSettings,'socialMedia'=>config('SocialMedia'),]));if($emailService->send()){log_message('info','Management/MarketingController L346 - $emailService: '.print_r($emailService,true));return $this->response->setJSON(['success'=>true,'message'=>'Subscriber email sent successfully']);}else{log_message('error','Management/MarketingController L346 - Error Submitting: $emailService: '.print_r($emailService,true));return $this->response->setJSON(['success'=>false,'message'=>'Failed to send Welcome Email']);}}else{return $this->response->setJSON(['success'=>false,'message'=>'Failed to add subscriber']);}}public function approveBufferItem($id){$this->marketingModel->updateBufferStatus($id,'approved');return $this->respond(['status'=>'success','message'=>'Approved']);}public function approveLogo(){$symbol=$this->request->getPost('symbol');$imageUrl=$this->request->getPost('imageUrl');try{$this->marketingModel->saveApprovedLogo($symbol,$imageUrl);return $this->response->setJSON(['success'=>true,'message'=>'Logo approved successfully.',]);}catch(\Exception $e){log_message('error','Failed to approve logo: '.$e->getMessage());return $this->response->setJSON(['success'=>false,'message'=>'Failed to approve logo.',]);}}public function approveAndDownloadLogo(){$imageUrl=$this->request->getPost('selectedImage');$symbol=$this->request->getPost('symbol');try{$imageContent=file_get_contents($imageUrl);$imagePath=WRITEPATH.'uploads/Company-Logos/'.$symbol.'.png';file_put_contents($imagePath,$imageContent);$publicPath=FCPATH.'assets/images/Company-Logos/'.$symbol.'.png';rename($imagePath,$publicPath);return redirect()->to('/Management/Marketing/upcomingEarnings')->with('success','Logo approved and saved successfully.');}catch(\Exception $e){log_message('error','Failed to download or save logo: '.$e->getMessage());return redirect()->back()->with('error','Failed to save the logo.');}}public function approveContent($id){$content=$this->marketingModel->find($id);if(!$content){return redirect()->back()->with('error','Content not found.');}$this->marketingModel->update($id,['status'=>'approved']);return redirect()->back()->with('success','Content approved successfully.');}public function blogs(){$this->data['pageTitle']='MyMI Blogs | Management | MyMI Wallet';$this->data['reporting']=$this->getMyMIAnalytics()->reporting();$this->data['blogs']=$this->marketingModel->getBlogs();$this->data['totalBlogs']=$this->marketingModel->countBlogs();$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\Blogs',$this->data);}public function campaigns(){$this->data['pageTitle']='Marketing Campaigns | Management | MyMI Wallet';$this->data['reporting']=$this->getMyMIAnalytics()->reporting();$this->data['getActiveCampaigns']=$this->marketing['department']['getActiveCampaigns'];$this->data['getActivePriorityCampaigns']=$this->marketing['department']['getActivePriorityCampaigns'];$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\campaigns',$this->data);}public function contentGenerator(){try{$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\contentGenerator',$this->data);}catch(\Throwable $th){log_message('error','MarketingController contentGenerator error: '.$th->getMessage());}}public function contentReview(){$generatedContent=$this->session->get('generatedContent');if(empty($generatedContent)){return redirect()->to('/Management/Marketing')->with('error','No generated content available for review.');}return $this->renderTheme('ManagementModule\Views\Marketing\Content_Review',['generatedContent'=>$generatedContent]);}public function cronAnalyzeContent(){log_message('debug','🧠 Starting content digest analysis...');$this->getMyMIMarketing()->generateFromTempScraper(5);log_message('debug','✅ Content digest completed.');}public function cronFetchAndStoreEmails(){try{log_message('debug','Starting cronFetchAndStoreEmails');$this->marketingService->scrapeAndStoreEmailsToTemp();log_message('debug','Finished cronFetchAndStoreEmails');return $this->respond(['status'=>'success']);}catch(\Throwable $e){log_message('error','cronFetchAndStoreEmails Error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function cronFetchInbox(){log_message('debug','📨 Starting inbox scrape...');$this->getMyMIMarketing()->scrapeInboxAndStore();log_message('debug','✅ Inbox scrape completed.');}public function cronFetchMarketingEmails(){log_message('info','CRON: Starting Marketing Email Fetch');$service=new MarketingService();$emailsFetched=$this->getMyMIMarketing()->fetchAndStoreEmails('newsletters');log_message('info','CRON: Fetched '.$emailsFetched.' marketing emails');return $this->respond(['status'=>'success','fetched'=>$emailsFetched]);}public function cronGenerateContentFromTemp(){try{log_message('debug','Starting cronGenerateContentFromTemp');$this->marketingService->generateFinalContentFromTemp();log_message('debug','Finished cronGenerateContentFromTemp');return $this->respond(['status'=>'success']);}catch(\Throwable $e){log_message('error','cronGenerateContentFromTemp Error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function cronSendDailyLog(){date_default_timezone_set('America/Chicago');$contentData=$this->getLogsOrFallback();$emailView=view('emails/daily_log_summary',['contentData'=>$contentData['data'],'contentType'=>$contentData['type'],]);$subject=($contentData['type']==='logs')?'Daily Log Summary for '.date('F j, Y'):'Fallback Content - Daily Summary '.date('F j, Y');$this->email->setTo('community@mymiwallet.com')->setSubject($subject)->setMessage($emailView)->send();$this->email->setTo('team@mymiwallet.com')->setSubject('Reminder: Daily Log Email Pending Confirmation')->setMessage('The daily log email is scheduled to be sent at 3 PM CST. Please review the content to ensure everything is accurate.')->send();}public function edit($id=null){if($id===null){throw new \CodeIgniter\Exceptions\PageNotFoundException('Exchange ID not provided');}$tokenData=$this->marketingModel->getExchangeTokenById($id);if(!$tokenData){throw new \CodeIgniter\Exceptions\PageNotFoundException('Token not found');}if($this->request->getMethod()==='post'){$validation=\Config\Services::validation();$validation->setRules(['coin_name'=>'required','market_cap'=>'required|numeric','website'=>'required|valid_url','discord'=>'permit_empty|valid_url','facebook'=>'permit_empty|valid_url','telegram'=>'permit_empty|valid_url','twitter'=>'permit_empty|valid_url',]);if($validation->withRequest($this->request)->run()){$updatedData=['coin_name'=>$this->request->getPost('coin_name'),'market_cap'=>$this->request->getPost('market_cap'),'website'=>$this->request->getPost('website'),'discord'=>$this->request->getPost('discord'),'facebook'=>$this->request->getPost('facebook'),'telegram'=>$this->request->getPost('telegram'),'twitter'=>$this->request->getPost('twitter'),];if($this->marketingModel->updateExchangeToken($id,$updatedData)){$this->session->setFlashdata('success','Exchange token updated successfully');}else{$this->session->setFlashdata('error','Failed to update the exchange token');}return redirect()->to(site_url('Management/Marketing/Exchanges/Edit/'.$id));}else{$this->session->setFlashdata('validation_errors',$validation->getErrors());}}return $this->renderTheme('ManagementModule\Views\Marketing\Exchanges\edit',['token'=>$tokenData,'validation'=>$this->session->getFlashdata('validation_errors'),'redirectURL'=>site_url('Management/Marketing/Exchanges'),]);}public function editContent($id){$content=$this->marketingModel->find($id);if(!$content){return redirect()->back()->with('error','Content not found.');}return $this->renderTheme('ManagementModule\Views\Marketing\Content_Edit',['content'=>$content]);}public function fetchBufferPaginated(){$page=(int) $this->request->getGet('page')?:1;$limit=(int) $this->request->getGet('limit')?:20;$data=$this->marketingModel->fetchBufferPaginated($page,$limit);return $this->respond($data);}public function fetchLatestSummaries(){$generatedSummaries=$this->marketingModel->getLatestGeneratedSummaries(25);return $this->renderTheme('ManagementModule\Views\Marketing\resources\generatedSummaries',['generatedSummaries'=>$generatedSummaries]);}public function fetchMissingLogos(){$postData=$this->request->getJSON(true);$csrfName=csrf_token();$csrfHash=csrf_hash();if(!isset($postData[$csrfName])||$postData[$csrfName]!==$csrfHash){log_message('error','fetchMissingLogos: CSRF validation failed');return $this->response->setHeader('X-CSRF-Token-Name',$csrfName)->setHeader('X-CSRF-Token-Hash',$csrfHash)->setJSON(['error'=>'Invalid CSRF token.']);}$symbols=$postData['symbols']?? null;if(empty($symbols)||!is_array($symbols)){log_message('error','fetchMissingLogos: Invalid symbols input');return $this->response->setHeader('X-CSRF-Token-Name',$csrfName)->setHeader('X-CSRF-Token-Hash',$csrfHash)->setJSON(['error'=>'Invalid symbols input.']);}$results=[];foreach($symbols as $symbol){$results[]=['symbol'=>$symbol,'status'=>'not_found',];}return $this->response->setHeader('X-CSRF-Token-Name',$csrfName)->setHeader('X-CSRF-Token-Hash',$csrfHash)->setJSON(['results'=>$results]);}public function financialNews(){$symbols=$this->investmentModel->getAllSymbolsByEarnings();$approvedLogos=$this->marketingModel->getApprovedLogos();$existingSymbols=array_column($approvedLogos,'symbol');$missingSymbols=array_filter($symbols,function($symbol)use($existingSymbols){return!in_array($symbol['symbol'],$existingSymbols);});$this->data['approvedLogos']=$approvedLogos ??[];$this->data['missingSymbols']=$missingSymbols ??[];$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\financialNews',$this->data);}public function generateAudio(){$text=$this->request->getPost('text');$fileName=$this->request->getPost('fileName')?:uniqid('tts_',true);$directory=WRITEPATH.'uploads/';$outputFile=$directory.$fileName.'.mp3';if(empty($text)){return $this->response->setJSON(['status'=>'error','message'=>'Text cannot be empty.',]);}if(!is_dir($directory)){mkdir($directory,0777,true);}$command=sprintf('python3 gtts_script.py %s %s',escapeshellarg($text),escapeshellarg($outputFile));exec($command,$output,$status);if($status===0&&file_exists($outputFile)){$fileUrl=base_url('uploads/'.basename($outputFile));return $this->response->setJSON(['status'=>'success','message'=>'Audio file generated successfully.','file_url'=>$fileUrl,]);}else{return $this->response->setJSON(['status'=>'error','message'=>'Failed to generate audio.',]);}}private function generateAutomatedContent(){$scraperContent=$this->marketingModel->getRecentScrapes();$tempContent=$this->marketingModel->getRecentTempScrapes();$campaigns=$this->marketingModel->getActiveCampaignsLimited(50);$allContent=array_merge($scraperContent,$tempContent,$campaigns);$generatedContent=[];foreach($allContent as $content){$generatedContent[]=$this->getMarketingService()->generateContentFromPost($content->title ?? 'Untitled',$content->content ?? '',$content->tags?explode(',',$content->tags):[]);}foreach($generatedContent as $content){$slug=$this->marketingModel->createSlug($content['title']);$this->db->table('bf_marketing_blog_posts')->insert(['title'=>$content['title']?? 'Generated Content','content'=>$content['summary']?? '','slug'=>$slug,'tags'=>implode(',',$content['keywords']??[]),'created_on'=>date('Y-m-d H:i:s'),]);$this->marketingModel->saveDailyLog(['title'=>$content['title'],'content'=>$content['summary'],'type'=>'Automated','tags'=>implode(',',$content['keywords']),'date_time'=>date('Y-m-d H:i:s'),'author_information'=>'MyMI Automated System','created_on'=>date('Y-m-d H:i:s'),]);}return $generatedContent;}public function generateContent($platform,$postId){$post=$this->marketingModel->getSchedulePostById($postId);if(!$post){return redirect()->back()->with('error','Post not found.');}$content=$this->getMyMIMarketing()->generateContentFromGPT($post['subjects'],$post['descriptions'],$platform);$contentData=['post_id'=>$postId,'platform'=>$platform,'generated_content'=>$content,];$this->marketingModel->storeGeneratedContent($contentData);return redirect()->to("\Management\Marketing\Schedule")->with('success','Content generated successfully.');}public function generateContentDigestFromStored(){log_message('info','Marketing: Starting summary generation from stored marketing emails.');$model=new MarketingModel();$records=$model->getRecentUnprocessedTempEmails(5);$results=[];foreach($records as $record){if(empty($record['content'])||strlen($record['content'])<1000){log_message('debug',"⚠️ Skipping record ID {$record['id']} due to insufficient content length.");continue;}if(empty($record['title'])||empty($record['content'])){log_message('debug','Skipped record due to missing title/content ID: '.$record['id']);continue;}try{$summary=$this->getMarketingService()->generateContentFromRaw($record['title'],$record['content']);$model->storeFinalMarketingContent(['source_id'=>$record['id'],'title'=>$record['title'],'summary'=>$summary,'created_at'=>date('Y-m-d H:i:s')]);$model->markTempRecordAsProcessed($record['id']);$results[]=$record['title'];}catch(\Throwable $e){log_message('error','Failed to process record ID '.$record['id'].': '.$e->getMessage());}}return $this->respond(['status'=>'complete','processed_titles'=>$results]);}public function generateContentFromTweet($tweetId){$tweet=$this->marketingModel->getTweetById($tweetId);if(!$tweet){return $this->failNotFound('Tweet not found');}$generatedContent=$this->getMyMIMarketing()->generateContentFromTweets([$tweet]);$this->marketingModel->storeGeneratedContent(['tweet_id'=>$tweetId,'content'=>json_encode($generatedContent),'created_at'=>date('Y-m-d H:i:s')]);$this->getMyMIMarketing()->postToTwitter($generatedContent['platform_content']['Twitter']);return $this->respond(['message'=>'Content generated and posted successfully']);}public function generateDailyContentDigest(){log_message('debug','🧠 Start Memory Usage: '.memory_get_usage(true));@ini_set('memory_limit','768M');$limit=5;$summary=[];$rawRecords=$this->marketingModel->getLatestUnprocessedEmails($limit);foreach($rawRecords as $record){$content=$record['content']?? '';if(empty($content)||strlen($content)<500){log_message('debug',"⏭️ Skipped record ID {$record['id']} - insufficient content.");continue;}$contentSize=strlen($content);log_message('debug','📌 Processing record ID '.$record['id'].' with content size: '.$contentSize);log_message('debug','Management/MarketingController L770 - $record Array: '.print_r($record,true));if($contentSize===0){log_message('debug',"⏭️ Skipped record ID {$record['id']} - empty content.");continue;}try{gc_collect_cycles();$processed=$this->getMarketingService()->generateContentFromRaw($record);if($processed===null){log_message('debug',"⚠️ Skipped record ID {$record['id']} - generateContentFromRaw() returned null.");continue;}$this->marketingModel->saveFinalizedMarketingContent($processed);$summary[]=['title'=>$processed['headline'],'summary'=>$processed['summary'],'subtopics'=>$processed['subtopics'],'platform_posts'=>$processed['posts'],];}catch(\Throwable $e){log_message('error',"❌ generateDailyContentDigest failed on record ID {$record['id']}: {$e->getMessage()}");}}$this->marketingModel->markEmailsAsProcessed(array_column($rawRecords,'id'));log_message('debug','🏁 Peak Memory Usage: '.memory_get_peak_usage(true));return $this->response->setJSON(['digest'=>$summary]);}public function generateNewsletterContent(){$emailContents=$this->marketingModel->getEmailContentsForNewsletter();$content=$this->getMyMIMarketing()->generateNewsletterContent($emailContents);$newsletterData=['title'=>'Monthly Financial Newsletter - '.date('F Y'),'content'=>$content,'status'=>'draft','created_at'=>date('Y-m-d H:i:s'),];$this->marketingModel->storeNewsletterDraft($newsletterData);return redirect()->to(site_url('Management/Marketing/Content/Listing'))->with('success','Newsletter content generated successfully');}private function generateSummarizedFallbackContent($contentArray){$summarizedContent=[];$summarizer=new \App\Libraries\ContentSummarizer();foreach($contentArray as $content){$summarizedContent[]=['title'=>$content->title ?? 'Untitled','summary'=>$summarizer->summarize($content->content ?? '',200),'url'=>$content->url ?? null,];}return $summarizer->combineSummaries($summarizedContent);}private function getLogsOrFallback(){$logs=$this->marketingModel->getDailyLogsByDate(date('Y-m-d'));if(!empty($logs)){return['type'=>'logs','data'=>$logs];}$scrapedContent=$this->marketingModel->getRecentScrapes();$campaigns=$this->marketingModel->getActiveCampaignsLimited(50);$combinedContent=array_merge($scrapedContent,$campaigns['result']);$fallbackContent=$this->generateSummarizedFallbackContent($combinedContent);foreach($fallbackContent as $content){$this->marketingModel->saveDailyLog(['title'=>$content['title']?? 'Automated Content','content'=>$content['summary']?? '','type'=>'Automated','tags'=>implode(',',$content['keywords']??[]),'date_time'=>date('Y-m-d H:i:s'),'author_information'=>'MyMI Automated System','created_on'=>date('Y-m-d H:i:s'),]);}return['type'=>'fallback','data'=>$fallbackContent];}public function getRecentScrapes(){try{$scrapes=$this->marketingModel->getRecentScrapes();return $this->response->setJSON(['success'=>true,'scrapes'=>$scrapes]);}catch(\Throwable $th){log_message('error','getRecentScrapes: Exception - '.$th->getMessage());return $this->response->setJSON(['success'=>false,'message'=>'Failed to fetch recent scrapes.']);}}private function handleMediaUpload($mediaFiles){$uploadedMedia=[];foreach($mediaFiles as $file){if($file->isValid()&&!$file->hasMoved()){$newFileName=$file->getRandomName();$file->move(WRITEPATH.'uploads/media/',$newFileName);$uploadedMedia[]=['file_name'=>$file->getClientName(),'file_path'=>WRITEPATH.'uploads/media/'.$newFileName,'file_size'=>$file->getSize(),'file_type'=>$file->getMimeType(),];}}return $uploadedMedia;}public function ideas(){$this->data['pageTitle']='Marketing Campaigns | Management | MyMI Wallet';$this->data['reporting']=$this->getMyMIAnalytics()->reporting();$this->data['getActiveIdeas']=$this->marketingModel->getActiveIdeas();$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\ideas',$this->data);}public function importScheduleCSV(){if($this->request->getMethod()==='post'){$file=$this->request->getFile('csv_file');if($file->isValid()&&!$file->hasMoved()){$filePath=WRITEPATH.'uploads/'.$file->store();$csvData=array_map('str_getcsv',file($filePath));foreach($csvData as $row){$scheduleData=['day'=>$row[0],'time'=>$row[1],'activity'=>$row[2],];$scheduleId=$this->marketingModel->addMarketingSchedule($scheduleData);$campaignData=['sched_id'=>$scheduleId,'title'=>$row[3],'platform'=>$row[4],'content'=>$row[5],];$this->marketingModel->addMarketingCampaign($campaignData);}return redirect()->back()->with('success','Schedule and campaigns imported successfully.');}return redirect()->back()->with('error','Invalid CSV file.');}return $this->renderTheme('ManagementModule\Views\Marketing\importCSV');}public function previewBufferItem($id){$record=$this->marketingModel->findBufferItem($id);if(!$record)return $this->failNotFound("Item not found.");return $this->renderTheme('ManagementModule\Views\Marketing\modals\bufferPreview',['item'=>$record]);}public function previewGeneratedPost($id){try{$post=$this->marketingModel->find($id);if(!$post){return $this->failNotFound('Post not found.');}return $this->renderTheme('App\Modules\Management\Views\Marketing\modals/previewGeneratedPost',['post'=>$post]);}catch(\Throwable $e){log_message('error','❌ Failed to load post preview: '.$e->getMessage());return $this->failServerError('Unable to preview post.');}}public function previewPendingSummaries(){try{$pendingSummaries=$this->marketingModel->getPendingScraperSummaries(10);return $this->renderTheme('App\Modules\Management\Views\Marketing\partials\previewPendingSummaries',['pendingSummaries'=>$pendingSummaries]);}catch(\Throwable $e){log_message('error','❌ previewPendingSummaries failed: '.$e->getMessage());return $this->failServerError('Could not load summaries.');}}public function previewVideoScript($id){$post=$this->marketingModel->getGeneratedPostById($id);if(!$post)return $this->failNotFound('Post not found.');$posts=json_decode($post['posts'],true);$videoScript=$posts['video']?? 'No video script generated yet.';return $this->renderTheme('MarketingModule\Views\Marketing\modals\video_preview_modal',['title'=>$post['title'],'videoScript'=>$videoScript,]);}public function processScheduledPosts(){$currentTimestamp=date('Y-m-d H:i:s');$scheduledPosts=$this->marketingModel->getPendingScheduledPosts($currentTimestamp);foreach($scheduledPosts as $post){$payload=['platform'=>$post->platform,'content'=>$post->content,'media_url'=>$post->media_url,];try{$response=$this->sendToZapier($post->zapier_webhook_url,$payload);if($response->getStatusCode()===200){$this->marketingModel->updatePostStatus($post->id,'posted');}else{throw new Exception("Zapier response error: {$response->getBody()}");}}catch(Exception $e){$this->handlePostFailure($post,$e->getMessage());}}}private function sendToZapier($webhookUrl,$payload){$client=new \GuzzleHttp\Client();return $client->post($webhookUrl,['headers'=>['Content-Type'=>'application/json'],'json'=>$payload,]);}private function handlePostFailure($post,$error){$this->marketingModel->incrementRetryCount($post->id);log_message('error',"Failed to post to Zapier for Post ID {$post->id}: {$error}");if($post->retry_count>=3){$this->marketingModel->updatePostStatus($post->id,'failed');}}public function postCreator(){try{$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\index',$this->data);}catch(\Throwable $th){log_message('error','MarketingController postCreator error: '.$th->getMessage());}}public function promote(){$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->data['exchangeAssets']=[];$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\Promote',$this->data);}public function publishBlog($blogId){$blog=$this->marketingModel->getBlogPostDetails($blogId);if(!$blog){return redirect()->back()->with('error','Blog post not found.');}$this->marketingModel->update($blogId,['status'=>'published']);return redirect()->to('/Management/Marketing/Blogs')->with('success','Blog published successfully.');}public function rejectBufferItem($id){$this->marketingModel->updateBufferStatus($id,'rejected');return $this->respond(['status'=>'success','message'=>'Rejected']);}public function rejectContent($id){$content=$this->marketingModel->find($id);if(!$content){return redirect()->back()->with('error','Content not found.');}$this->marketingModel->update($id,['status'=>'rejected']);return redirect()->back()->with('success','Content rejected successfully.');}public function reviewBuffer(){$buffer=$this->marketingModel->getBufferItems();$this->data['pageTitle']='Marketing Buffer Dashboard';$this->data['buffer']=$buffer;return $this->renderTheme('ManagementModule\Views\Marketing\BufferDashboard',$this->data);}public function runContentGeneration(){$generatedContent=$this->generateAutomatedContent();$this->session->set('generatedContent',$generatedContent);return redirect()->to('/Management/Marketing/ContentReview')->with('success',count($generatedContent).' content items generated successfully. Please review and approve.');}private function sanitizeContent($content){$content=preg_replace('#<script(.*?)>(.*?)</script>#is','',$content);$content=preg_replace('#<style(.*?)>(.*?)</style>#is','',$content);$content=strip_tags($content);$content=preg_replace('/\s+/',' ',$content);return trim($content);}private function saveCampaign($formData){$data=['title'=>$formData['title'],'description'=>$formData['description'],];$this->marketingModel->addMarketingCampaign($data);}public function saveContentEdit($id){$postData=$this->request->getPost();$content=$this->marketingModel->find($id);if(!$content){return redirect()->back()->with('error','Content not found.');}$this->marketingModel->update($id,['content'=>$postData['content'],'status'=>'pending',]);return redirect()->to('/Management/Marketing/ContentReview')->with('success','Content updated successfully.');}private function saveSchedule($formData){$scheduleModel=new \App\Models\ScheduleModel();$data=['title'=>$formData['title'],'description'=>$formData['description'],];$scheduleModel->insert($data);}public function schedule($day=null){if(!empty($day)){$this->data['marketingSchedule']=$this->marketingModel->getScheduleByDay($day);foreach($this->data['marketingSchedule']as&$schedule){$schedule['campaigns']=$this->marketingModel->getCampaignsBySchedId($schedule['id']);}$this->data['scheduleByDay']='Yes';}else{$this->data['marketingSchedule']=$this->marketingModel->getUpcomingSchedule();foreach($this->data['marketingSchedule']as&$schedule){$schedule['campaigns']=$this->marketingModel->getCampaignsBySchedId($schedule['id']);}$this->data['scheduleByDay']='No';}$this->commonData();$this->data['pageTitle']='Daily Schedule | Management | MyMI Wallet';return $this->renderTheme('ManagementModule\Views\Marketing\Schedule',$this->data);}public function scheduleNewsletterCampaign(){$newsletterDraft=$this->marketingModel->getLatestNewsletterDraft();if(!$newsletterDraft){return $this->response->setJSON(['success'=>false,'message'=>'No newsletter draft found']);}$campaignData=['title'=>$newsletterDraft['title'],'content'=>$newsletterDraft['content'],'status'=>'scheduled','send_date'=>$this->request->getPost('send_date'),'target_audience'=>'all_users','created_at'=>date('Y-m-d H:i:s'),];if($this->marketingModel->scheduleNewsletterCampaign($campaignData)){return redirect()->to(site_url('Management/Marketing/Content/Listing'))->with('success','Newsletter campaign scheduled successfully');}else{return redirect()->back()->with('error','Failed to schedule newsletter campaign');}}private function scrapeGoogleSearch($query){$searchUrl='https://www.google.com/search?q='.urlencode($query);$client=new Client();try{$response=$client->get($searchUrl);if($response->getStatusCode()==200){$html=$response->getBody()->getContents();$dom=new \DOMDocument();libxml_use_internal_errors(true);$dom->loadHTML($html);libxml_clear_errors();$xpath=new \DOMXPath($dom);$results=[];foreach($xpath->query('//a[@href]')as $link){$href=$link->getAttribute('href');if(strpos($href,'/url?q=')===0){$href=substr($href,7,strpos($href,'&')-7);$text=$link->nodeValue;$results[]=['href'=>$href,'text'=>$text];}}return $results;}else{log_message('error','scrapeGoogleSearch: Could not retrieve content, HTTP status code - '.$response->getStatusCode());return['error'=>'Could not retrieve content, HTTP status code - '.$response->getStatusCode()];}}catch(RequestException $e){log_message('error','scrapeGoogleSearch: RequestException - '.$e->getMessage());return['error'=>'RequestException error: '.$e->getMessage()];}catch(\Exception $e){log_message('error','scrapeGoogleSearch: General error - '.$e->getMessage());return['error'=>'General error: '.$e->getMessage()];}return[];}public function scrapeLink(){$rawRequestBody=$this->request->getBody();$jsonData=json_decode($rawRequestBody,true);$url=$jsonData['url']?? null;if(!$url){log_message('error','scrapeLink: URL is missing');return $this->response->setJSON(['success'=>false,'message'=>'URL is required.']);}try{log_message('debug','scrapeLink: Scraping URL - '.$url);$scrapedData=$this->scrapeWebsiteWithFallback($url);if(isset($scrapedData['error'])){log_message('error','scrapeLink: '.$scrapedData['error']);return $this->response->setJSON(['success'=>true,'message'=>'Partially scraped data, proceeding with available data.']);}if(!empty($scrapedData['content'])){$this->marketingModel->storeTempScrapedData(['title'=>$scrapedData['title'],'content'=>$scrapedData['content'],'links'=>json_encode($scrapedData['links']),'url'=>$scrapedData['url'],'scraped_at'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),]);return $this->response->setJSON(['success'=>true,'message'=>'Scraped data stored successfully.','data'=>$scrapedData]);}else{log_message('error','scrapeLink: Scraped data is empty');return $this->response->setJSON(['success'=>false,'message'=>'Scraping failed. Please check the URL and try again.']);}}catch(\Throwable $th){log_message('error','scrapeLink: Exception - '.$th->getMessage());return $this->response->setJSON(['success'=>false,'message'=>'An error occurred during scraping.']);}}private function scrapeLinks($links){$scrapedLinksData=[];foreach($links as $link){$url=filter_var($link['href'],FILTER_SANITIZE_URL);if(filter_var($url,FILTER_VALIDATE_URL)){$scrapedData=$this->scrapeWebsite($url);if(!empty($scrapedData['content'])){$scrapedLinksData[]=$scrapedData;}}}return $scrapedLinksData;}private function scrapeWebsite($url){$client=new Client();try{$response=$client->get($url,['stream'=>true,'headers'=>['User-Agent'=>'MyMI Wallet Bot'],'timeout'=>10,'http_errors'=>false ]);if($response->getStatusCode()==200){$html=$response->getBody()->getContents();$dom=HtmlDomParser::str_get_html($html);if($dom instanceof \voku\helper\HtmlDomParser){$title=$dom->find('title',0)->text ?? 'No title found';$bodyNode=$dom->find('body',0);$bodyContent=$bodyNode?$this->sanitizeContent($bodyNode->innerHtml()):'No body content found';$links=[];foreach($dom->find('a')as $link){$href=$link->getAttribute('href');$text=$link->text;$links[]=['href'=>$href,'text'=>$text];}log_message('debug','scrapeWebsite: Scraping successful for URL - '.$url);return['title'=>$title,'content'=>$bodyContent,'links'=>$links,'url'=>$url];}else{log_message('error','scrapeWebsite: DOM parsing failed for URL - '.$url);return['error'=>'DOM parsing failed.'];}}else{log_message('error','scrapeWebsite: Could not retrieve content, HTTP status code - '.$response->getStatusCode());return['error'=>'Could not retrieve content, HTTP status code - '.$response->getStatusCode()];}}catch(RequestException $e){if($e->hasResponse()&&$e->getResponse()->getStatusCode()==401){log_message('error','scrapeWebsite: Unauthorized access for URL - '.$url);return['error'=>'Unauthorized access. Skipping URL.'];}log_message('error','scrapeWebsite: RequestException - '.$e->getMessage());return['error'=>'RequestException error: '.$e->getMessage()];}catch(\Exception $e){log_message('error','scrapeWebsite: General error - '.$e->getMessage());return['error'=>'General error: '.$e->getMessage()];}}private function scrapeWebsiteWithFallback($url){try{log_message('debug','scrapeWebsiteWithFallback: Scraping URL - '.$url);$scrapedData=$this->scrapeWebsite($url);if(empty($scrapedData['content'])){log_message('debug','scrapeWebsiteWithFallback: Scraped data is empty, performing Google search fallback');$googleSearchResults=$this->scrapeGoogleSearch($url);$scrapedLinksData=$this->scrapeLinks($googleSearchResults);$scrapedData['google_search_results']=$scrapedLinksData;}return $scrapedData;}catch(RequestException $e){log_message('error','scrapeWebsiteWithFallback: RequestException - '.$e->getMessage());return['error'=>$e->getMessage()];}catch(\Exception $e){log_message('error','scrapeWebsiteWithFallback: General error - '.$e->getMessage());return['error'=>$e->getMessage()];}}public function searchAndApproveLogo($symbol){$query=$symbol.' logo png transparent';$searchUrl='https://www.google.com/search?q='.urlencode($query).'&tbm=isch';try{$response=$this->client->request('GET',$searchUrl);$htmlContent=$response->getBody()->getContents();$dom=new \DOMDocument();@$dom->loadHTML($htmlContent);$xpath=new \DOMXPath($dom);$imageNodes=$xpath->query('//img');$imageUrls=[];foreach($imageNodes as $imageNode){$src=$imageNode->getAttribute('src');if($src){$imageUrls[]=$src;}}return $this->renderTheme('ManagementModule\Views\Marketing\approve_logo',['symbol'=>$symbol,'imageUrls'=>$imageUrls,]);}catch(RequestException $e){log_message('error','Google Search Request Failed: '.$e->getMessage());return redirect()->back()->with('error','Failed to fetch logo suggestions.');}}public function sendScheduledNewsletter(){$campaigns=$this->marketingModel->getScheduledCampaigns();foreach($campaigns as $campaign){$this->getMyMIMarketing()->sendNewsletter($campaign['content'],$campaign['target_audience']);$this->marketingModel->updateCampaignStatus($campaign['id'],'sent');}return redirect()->to(site_url('Management/Marketing/Content/Listing'))->with('success','Scheduled newsletters sent successfully');}public function standaloneAddSubscriber(){$this->data['pageTitle']='Add Subscriber | Management | MyMI Wallet';$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneAddSubscriber',$this->data);}public function standaloneScrape(){$this->data['pageTitle']='Quick Scraper | Management | MyMI Wallet';$this->commonData();return $this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneScraper',$this->data);}private function storeScrapedData($scrapedData){$db=\Config\Database::connect();$builder=$db->table('bf_marketing_temp_scraper');$data=['title'=>$scrapedData['title'],'content'=>$scrapedData['content'],'links'=>json_encode($scrapedData['links']),'url'=>$scrapedData['url'],'created_at'=>date('Y-m-d H:i:s'),'updated_at'=>date('Y-m-d H:i:s'),];$builder->insert($data);}public function submitContent(){$request=service('request');$validationRules=['campaignName'=>'required|min_length[3]','promotionalLinks'=>'required','facebookMessage'=>'required','linkedinMessage'=>'required','discordMessage'=>'required','stockTwitsMessage'=>'required','tiktokMessage'=>'required','youtubeMessage'=>'required','emailMessage'=>'required',];if(!$this->validate($validationRules)){return redirect()->back()->with('errors',$this->validator->getErrors())->withInput();}$campaignData=['name'=>$request->getPost('campaignName'),'promotional_links'=>json_encode($request->getPost('promotionalLinks')),'facebook_message'=>$request->getPost('facebookMessage'),'linkedin_message'=>$request->getPost('linkedinMessage'),'discord_message'=>$request->getPost('discordMessage'),'stocktwits_message'=>$request->getPost('stockTwitsMessage'),'tiktok_message'=>$request->getPost('tiktokMessage'),'youtube_message'=>$request->getPost('youtubeMessage'),'email_message'=>$request->getPost('emailMessage'),'additional_info'=>$request->getPost('additionalInfo'),'created_on'=>date('Y-m-d H:i:s'),'status'=>1,'stage'=>'draft',];$marketingModel=new MarketingModel();if($marketingModel->insert($campaignData)){return redirect()->to('/Marketing/Success')->with('success','Marketing content submitted successfully.');}else{return redirect()->back()->with('error','Failed to submit marketing content.')->withInput();}}public function submitDailyLog(){$data=['title'=>$this->request->getPost('subject'),'content'=>$this->request->getPost('log_content'),'subcontent'=>json_encode($this->request->getPost('subcontent')),'tags'=>$this->request->getPost('tags'),'type'=>$this->request->getPost('content_type'),'url'=>$this->request->getPost('url'),'author_information'=>$this->request->getPost('author_information'),'date_time'=>$this->request->getPost('date_time'),'trade_alert_subcategory'=>$this->request->getPost('trade_alert_subcategory'),'created_on'=>date('Y-m-d H:i:s'),];if($this->marketingModel->saveDailyLog($data)){return $this->response->setJSON(['success'=>true,'message'=>'Daily log submitted successfully!']);}else{return $this->response->setJSON(['success'=>false,'message'=>'Failed to submit daily log.']);}}public function submitLargeContent(){log_message('debug','submitLargeContent method called');try{$subject=$this->request->getPost('subject');$url=$this->request->getPost('url');$content=$this->request->getPost('large_content');$tags=$this->request->getPost('tags');$uploadedFiles=$this->request->getFiles();$contentType=$this->request->getPost('content_type');$mediaAssets=$this->handleMediaUpload($uploadedFiles['media_assets']);if(empty($content)||strlen($content)<50){throw new \Exception('Content too short or empty');}$generatedContent=$this->getMyMIMarketing()->generateContentFromLargeText($content,$tags);$keywords=is_array($generatedContent['keywords'])?$generatedContent['keywords']:[];$this->marketingModel->storeScrapedContent(['status'=>'pending','type'=>$contentType,'url'=>$url,'title'=>$subject,'summary'=>$generatedContent['summary'],'content'=>$content,'keywords'=>implode(', ',$keywords),'created_on'=>date('Y-m-d H:i:s'),]);return $this->response->setJSON(['success'=>true]);}catch(\Exception $e){log_message('error','submitLargeContent error: '.$e->getMessage());return $this->response->setJSON(['success'=>false,'message'=>'Failed to submit content.']);}}public function submitLargeContentForm(){$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->commonData();$this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneLargeContentForm',$this->data);}public function submitMarketingCampaign(){helper(['form','url']);$data=['name'=>$this->request->getPost('campaignName'),'assigned_to'=>$this->request->getPost('assigned_to'),'promotional_links'=>json_encode($this->request->getPost('promotionalLinks')),'facebook_message'=>htmlentities($this->request->getPost('facebookMessage'),ENT_QUOTES,'UTF-8'),'linkedin_message'=>htmlentities($this->request->getPost('linkedinMessage'),ENT_QUOTES,'UTF-8'),'discord_message'=>htmlentities($this->request->getPost('discordMessage'),ENT_QUOTES,'UTF-8'),'stocktwits_message'=>htmlentities($this->request->getPost('stocktwitsMessage'),ENT_QUOTES,'UTF-8'),'tiktok_message'=>htmlentities($this->request->getPost('tiktokMessage'),ENT_QUOTES,'UTF-8'),'youtube_message'=>htmlentities($this->request->getPost('youtubeMessage'),ENT_QUOTES,'UTF-8'),'email_message'=>htmlentities($this->request->getPost('emailMessage'),ENT_QUOTES,'UTF-8'),'additional_info'=>htmlentities($this->request->getPost('additionalInfo'),ENT_QUOTES,'UTF-8'),'overall_campaign_description'=>htmlentities($this->request->getPost('overall_campaign_description'),ENT_QUOTES,'UTF-8'),'voice_script'=>htmlentities($this->request->getPost('voice_script'),ENT_QUOTES,'UTF-8')];if($this->validate(['name'=>'required','facebook_message'=>'required',])){$this->marketingModel->submitCampaignContent($data);return redirect()->to('/dashboard')->with('success','Campaign submitted successfully.');}else{return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());}}public function submitMarketIdeas(){if($this->request->getMethod()==='post'){$data=['title'=>$this->request->getPost('title'),'description'=>htmlentities($this->request->getPost('description'),ENT_QUOTES,'UTF-8'),'created_by'=>session()->get('user_id'),'assigned_to'=>$this->request->getPost('assigned_to'),'priority'=>$this->request->getPost('priority'),'status'=>'draft','platforms'=>json_encode($this->request->getPost('platforms')),'additional_info'=>htmlentities($this->request->getPost('additional_info'),ENT_QUOTES,'UTF-8'),];$uploadedFiles=$this->request->getFiles();$filePaths=[];if($uploadedFiles&&isset($uploadedFiles['imageFiles'])){foreach($uploadedFiles['imageFiles']as $file){if($file->isValid()&&!$file->hasMoved()){$newName=$file->getRandomName();$file->move(FCPATH.'public/assets/images/Marketing/Ideas',$newName);$filePaths[]=base_url('assets/images/Marketing/Ideas/'.$newName);}}}if(!empty($filePaths)){$data['image_paths']=json_encode($filePaths);}if($this->validate(['title'=>'required','description'=>'required'])){$this->marketingModel->submitIdea($data);return redirect()->back()->with('success','Idea submitted successfully.');}else{return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());}}}public function topCommunities($channel=null){$this->commonData();$MyMIExchange=new MyMIExchange();$exchangeTokens=$MyMIExchange->getSolanaTokens();if(!empty($channel)){if($channel==='Discord'){$this->data['tokens']=$exchangeTokens['discord'];$this->data['pageTitle']='Discord Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\discord',$this->data);}elseif($channel==='Facebook'){$this->data['tokens']=$exchangeTokens['facebook'];$this->data['pageTitle']='Facebook Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\facebook',$this->data);}elseif($channel==='Twitter'){$this->data['tokens']=$exchangeTokens['x_twitter'];$this->data['pageTitle']='Twitter Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\twitter',$this->data);}elseif($channel==='Website'){$this->data['tokens']=$exchangeTokens['website'];$this->data['pageTitle']='Website Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\website',$this->data);}else{$this->data['tokens']=$exchangeTokens['all'];$this->data['pageTitle']='All Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens',$this->data);}}else{$this->data['tokens']=$exchangeTokens['all'];$this->data['pageTitle']='All Communities';$this->renderTheme('ManagementModule\Views\Marketing\Exchanges\includes\all_tokens',$this->data);}}public function triggerPostAutogenOnEmpty(){$today=date('Y-m-d');$existing=$this->marketingModel->getLatestGeneratedSummaries(5,$today);if(!empty($existing)){return $this->response->setJSON(['status'=>'skipped','message'=>'Summaries already exist for today.']);}try{$this->getMyMIMarketing()->generateFromTempScraper(5);return $this->response->setJSON(['status'=>'generated','message'=>'Generated new summaries.']);}catch(\Throwable $e){log_message('error','triggerPostAutogenOnEmpty error: '.$e->getMessage());return $this->failServerError('Failed to generate summaries.');}}public function twitterDashboard(){$data=['pageTitle'=>'Twitter Dashboard','hashtags'=>$this->request->getPost('hashtags')?? '','tweets'=>[]];if($this->request->getMethod()==='post'){$hashtags=$this->request->getPost('hashtags');$tweets=$this->getMyMIMarketing()->fetchTweets($hashtags);$data['tweets']=$tweets;}return $this->renderTheme('Management/Marketing/Twitter',$data);}public function upcomingEarnings(){$model=new \App\Models\EarningsModel();$upcomingEarnings=$model->getUpcomingEarnings();$this->data['upcomingEarnings']=$upcomingEarnings;return $this->renderTheme('ManagementModule\Views\Marketing\upcoming_earnings',$this->data);}public function updatePlatformToggle($id){$post=$this->request->getJSON(true);$platform=$post['platform'];$enabled=(bool) $post['enabled'];$record=$this->marketingModel->getBufferItem($id);$platforms=json_decode($record['platforms']?? '{}',true);$platforms[$platform]=$enabled;$this->marketingModel->updateBufferItem($id,['platforms'=>json_encode($platforms)]);return $this->respond(['status'=>'success']);}public function viewBlog($slug){$blogPost=$this->marketingModel->getBlogPostBySlug($slug);if(!$blogPost){throw new \CodeIgniter\Exceptions\PageNotFoundException('Blog post not found');}return $this->renderTheme('blog/view',['blogPost'=>$blogPost]);}public function viewCampaign($campaign_id){$campaignModel=new CampaignModel();$campaign=$this->marketingModel->getCampaignsById($campaign_id);if(!$campaign){throw new \CodeIgniter\Exceptions\PageNotFoundException("Campaign not found");}return $this->renderTheme('ManagementModule\Views\Marketing\Campaigns\View',['campaign'=>$campaign]);}public function viewDailyLogs($date=null){$date=$this->siteSettings->date ?? date('Y-m-d');$this->data['pageTitle']='Marketing Daily Log | '.$date.' | MyMI Wallet';$this->data['reporting']=$this->getMyMIAnalytics()->reporting();$this->data['logs']=$this->marketingModel->getDailyLogsByDate($date);$this->commonData();return $this->renderTheme('ManagementModul\Views\Marketing\Daily_Logs',['logs'=>$logs,'date'=>$date]);}public function viewEmail($titleEncoded=null,$messageId=null){log_message('debug','📧 ManagementController::viewEmail called');try{if(empty($messageId)){return redirect()->back()->with('error','Invalid email identifier.');}$emailRecord=$this->marketingModel->getEmailByMessageId($messageId);if(!$emailRecord){return redirect()->back()->with('error','Email not found.');}$socialMediaPosts=$this->getMarketingService()->generateContentFromRaw($emailRecord);$emailRecord['social_media']=$socialMediaPosts['posts']??[];return $this->renderTheme('Management/Marketing/EmailDetail',['email'=>$emailRecord]);}catch(\Throwable $e){log_message('error','❌ viewEmail() failed: '.$e->getMessage());return $this->failServerError('Unable to load email.');}}public function viewGeneratedContent(){$contentData=$this->marketingModel->getLastGeneratedContent();$platformsContent=json_decode($contentData['platforms_content'],true);$this->data['pageTitle']='MyMI Marketing | Management | MyMI Wallet';$this->data['platforms_content']=$platformsContent;$this->commonData();$this->renderTheme('ManagementModule\Views\Marketing\resources\standaloneGeneratedContent',$this->data);}public function viewGeneratedSummaries(){$this->data['pageTitle']='Generated Summaries';$this->data['generatedSummaries']=$this->marketingModel->getLatestGeneratedSummaries(25);$this->renderTheme('ManagementModule\Views\Marketing\resources\generatedSummaries',$this->data);}} ?><?php namespace App\Modules\APIs\Controllers;use CodeIgniter\API\ResponseTrait;use CodeIgniter\Controller;use App\Libraries\{BaseLoader,MyMIMarketing};use App\Services\MarketingService;use App\Models\MarketingModel;class MarketingController extends Controller{use ResponseTrait;use BaseLoader;protected $MyMIMarketing;protected $marketingService;protected $marketingModel;public function __construct(){$this->MyMIMarketing=new MyMIMarketing();$this->marketingModel=new MarketingModel();}public function approveBufferItem($id){$record=$this->marketingModel->findBufferItem($id);if(!$record)return $this->failNotFound("Record not found.");$this->marketingModel->updateBufferItem($id,['status'=>'approved']);$posts=$this->MyMIMarketing->generateSocialPost($record);$this->MyMIMarketing->distributeContent('discord',$posts['discord']);$this->MyMIMarketing->distributeContent('linkedin',$posts['linkedin']);return $this->respond(['status'=>'success','message'=>'Content approved & promoted!']);}public function cronAnalyzeContent(){log_message('debug','🧠 Starting content digest analysis...');$this->getMyMIMarketing()->generateFromTempScraper(5);return $this->respond(['status'=>'success','message'=>'Content analysis completed.']);}public function cronFetchAndGenerateNews(){try{$this->MyMIMarketing->cronFetchAndGenerateNews();return $this->respond(['status'=>'success','message'=>'News fetched and generated.']);}catch(\Throwable $e){return $this->failServerError($e->getMessage());}}public function cronFetchInbox(){log_message('debug','📨 Starting inbox scrape...');$this->getMyMIMarketing()->scrapeInboxAndStore();return $this->respond(['status'=>'success','message'=>'Inbox scraped.']);}public function cronFetchMarketingEmails(){log_message('info','📬 CRON: Fetching marketing emails via inbox scrape');try{$result=$this->getMyMIMarketing()->scrapeInboxAndStore();return $this->respond(['status'=>'success','message'=>'Marketing inbox scrape completed.','result'=>$result]);}catch(\Throwable $e){log_message('error','❌ cronFetchMarketingEmails() failed: '.$e->getMessage());return $this->failServerError('Inbox fetch failed: '.$e->getMessage());}}public function distributeHighScoreContent(){try{$this->getMyMIMarketing()->autoSendToZapier(80);return $this->respond(['status'=>'success','message'=>'Top scoring posts sent to Zapier']);}catch(\Throwable $e){return $this->failServerError($e->getMessage());}}public function exportBufferPosts(){helper('text');$model=new \App\Models\MarketingModel();$bufferPosts=$model->fetchBufferPostsForScoring();$filename='buffer-posts-'.date('Ymd_His').'.csv';$csvHeader=['ID','Keyword','Summary','Score','Tag Score','Category','Status','Created At'];$csvData=[$csvHeader];foreach($bufferPosts as $post){$csvData[]=[$post['id'],$post['keyword'],word_limiter(strip_tags($post['summary']),10),$post['score'],$post['tag_score'],$post['category'],$post['status'],$post['created_at']?? '',];}header('Content-Type: text/csv');header("Content-Disposition: attachment; filename=\"$filename\"");$f=fopen('php://output','w');foreach($csvData as $row){fputcsv($f,$row);}fclose($f);exit;}public function fetchBufferPaginated(){$request=service('request');$page=(int) $request->getGet('page')?? 1;$limit=(int) $request->getGet('limit')?? 20;$keyword=$request->getGet('keyword');$category=$request->getGet('category');$minTagScore=$request->getGet('min_tag_score')?? 0;$onlySuggested=(bool) $request->getGet('only_suggested');$result=$this->marketingModel->fetchBufferPaginatedWithFilters(['page'=>$page,'limit'=>$limit,'keyword'=>$keyword,'category'=>$category,'min_tag_score'=>$minTagScore,'only_suggested'=>$onlySuggested]);return $this->respond(['status'=>'success','data'=>$result['data'],'pagination'=>$result['pagination']]);}public function fetchGeneratedSummaries(){try{$summaries=$this->marketingModel->getRecentPosts(5);return $this->respond(['status'=>'success','summaries'=>$summaries,]);}catch(\Throwable $e){log_message('error','❌ fetchGeneratedSummaries Error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function fetchGeneratedSummariesBlock(){try{helper('text');$todaysStory=$this->marketingModel->where('DATE(created_at)',date('Y-m-d'))->orderBy('created_at','desc')->findAll();return $this->renderTheme('App\Modules\Management\Views\Marketing\index/generatedSummariesBlock',['todaysStory'=>$todaysStory]);}catch(\Throwable $e){log_message('error','❌ Failed to fetch summaries block: '.$e->getMessage());return $this->failServerError('Unable to refresh summaries.');}}public function generateContentFromScraper(){try{$this->getMyMIMarketing()->generateFromTempScraper(25);return $this->respond(['status'=>'success','message'=>'Content generated from scraper.']);}catch(\Throwable $e){log_message('error','❌ generateContentFromScraper Error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function generateContentDigestFromStored(){$records=$this->marketingModel->getRecentUnprocessedTempEmails(5);$processedTitles=[];foreach($records as $record){$recordId=$record['id']?? 0;try{if(empty($record['title'])){$record['title']='Fallback Title - ID '.$recordId;}$insertResult=$this->getMyMIMarketing()->generateContentAndInsert($record);if($insertResult){$this->marketingModel->markTempScraperProcessed($recordId);$processedTitles[]=$insertResult['title'];log_message('info',"✅ Inserted content for ID {$recordId}");}else{log_message('warning',"⚠️ Skipped record ID {$recordId} — summary not stored");}}catch(\Throwable $e){log_message('error',"❌ Exception on record ID {$recordId}: {$e->getMessage()}");}}return $this->respond(['status'=>'complete','processed_titles'=>$processedTitles]);}public function generateDailyContentDigest(){@ini_set('memory_limit','768M');$records=$this->marketingModel->getValidUnprocessedEmails(5);$insertedSummaries=[];foreach($records as $record){if(!is_array($record)){log_message('error','❌ Invalid record structure: Expected array, got '.gettype($record));continue;}try{log_message('debug','🔍 Processing record ID '.$record['id']);$result=$this->getMyMIMarketing()->generateContentAndInsert($record);if($result){$this->marketingModel->markTempScraperProcessed($record['id']);$insertedSummaries[]=$result['title']?? '(no title)';log_message('info',"✅ Successfully processed and inserted record ID {$record['id']}");}else{log_message('warning',"⚠️ Skipped or failed to insert record ID {$record['id']}");}}catch(\Throwable $e){log_message('error',"❌ Exception on record ID {$record['id']}: ".$e->getMessage());}}return $this->respond(['status'=>'success','inserted'=>$insertedSummaries]);}public function generatePostsFromSummary($summaryId=null){try{$summary=$this->marketingModel->find($summaryId);if(!$summary){return $this->failNotFound('Summary not found.');}$decodedTitleRaw=$summary['title']?? '';$decodedSummaryRaw=$summary['summary']?? '';$decodedTitle=$this->getMyMIMarketing()->decodeMimeHeaderSafe($decodedTitleRaw);$decodedSummary=quoted_printable_decode($decodedSummaryRaw);$decodedSummary=preg_replace('/=\r?\n/','',$decodedSummary);$decodedSummary=html_entity_decode($decodedSummary,ENT_QUOTES|ENT_HTML5,'UTF-8');$cleanTitle=preg_replace('/[^\p{L}\p{N}\s:;\-]/u','',$decodedTitle);$cleanedSummary=html_entity_decode(strip_tags($decodedSummary));$keywords=$this->MyMIMarketing->extractKeywords($cleanedSummary);$posts=$this->MyMIMarketing->generateSocialPosts($cleanedSummary,$keywords);$this->marketingModel->update($summaryId,['keywords'=>json_encode($keywords),'posts'=>json_encode($posts),]);return $this->respond(['status'=>'success','message'=>'Content generated and stored successfully.','original'=>$summary,'cleaned'=>['title'=>$cleanTitle,'summary'=>$cleanedSummary,'keywords'=>$keywords,'posts'=>$posts,],]);}catch(\Throwable $e){log_message('error','❌ generatePostsFromSummary() failed: '.$e->getMessage());return $this->failServerError('Error generating posts.');}}public function generateScheduledPosts(){helper('text');$marketingModel=new MarketingModel();$marketing=new MyMIMarketing();$buffer=$marketingModel->getTopBufferPosts(3,6.5);if(empty($buffer)){return $this->respond(['status'=>'empty','message'=>'No queued posts available.']);}foreach($buffer as $post){$marketingModel->updateBufferItem($post['id'],['status'=>'promoted']);$generated=$marketing->generateSocialPost($post);if(json_decode($post['platforms'])->discord ?? false){$marketing->distributeContent('discord',$generated['discord']);}if(json_decode($post['platforms'])->linkedin ?? false){$marketing->distributeContent('linkedin',$generated['linkedin']);}$marketing->notifyModerators($post);}return $this->respond(['status'=>'success','message'=>'Posts published!']);}public function generateVoiceScriptManually(){try{log_message('info','🎤 generateVoiceScriptManually() triggered.');$script=$this->getMyMIMarketing()->generateVoiceoverScript();return $this->response->setJSON(['status'=>'success','script'=>$script]);}catch(\Throwable $e){log_message('error','❌ Error in generateVoiceScriptManually: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()]);}}public function massResendActivationEmails(){$userModel=new \App\Models\UserModel();$users=$userModel->getPendingActivationUsers();$activator=service('activator');$success=0;$failure=0;foreach($users as $user){if($activator->send($user)){$success++;}else{$failure++;}}return $this->respond(['status'=>'success','message'=>"$success emails sent, $failure failed."]);}public function monitorKeywordsAndScrape(){log_message('info','🧠 Keyword Monitor Started');$keywords=$this->getMyMIMarketing()->getKeywordCandidates();if(empty($keywords)){return $this->respond(['status'=>'no_keywords']);}$results=[];foreach($keywords as $keyword){try{$scrapedData=$this->getMyMIMarketing()->scrapeGoogleSearch($keyword);if(!empty($scrapedData)){$summary=$this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData,'generic');if($summary){$score=$this->getMyMIMarketing()->scoreKeywordRelevance($keyword,$summary);$results[]=['keyword'=>$keyword,'summary'=>$summary,'score'=>$score];$this->marketingModel->storeFinalMarketingContent(['source_id'=>null,'title'=>"Keyword: $keyword",'summary'=>$summary,'keywords'=>$keyword,'score'=>$score,'created_at'=>date('Y-m-d H:i:s')]);}}}catch(\Throwable $e){log_message('error',"❌ Failed keyword scrape for {$keyword}: ".$e->getMessage());}}return $this->respond(['status'=>'complete','processed'=>$results]);}public function processMarketingTempEmails($limit=5,$mode='daily',$id=null){try{log_message('debug',"🧠 Running unified email processor with mode={$mode}, limit={$limit}, id={$id}");if($id){$record=$this->marketingModel->getEmailRecordById($id);if(!$record||empty($record['content'])){return $this->failNotFound("No valid temp email record found for ID {$id}");}$cleanText=strip_tags($record['content']);$summary=$this->getMyMIMarketing()->summarizeText($cleanText);$keywords=$this->getMyMIMarketing()->extractKeywords($cleanText);if(empty($summary)||empty($keywords)){return $this->fail("Failed to generate summary or keywords for record ID {$id}");}$testPosts=['discord'=>"💬 *{$record['title']}*: {$summary} #".implode(' #',$keywords),'linkedin'=>"📢 {$record['title']} — {$summary}",'email'=>"Subject: {$record['title']}\n\n{$summary}",'x'=>substr($summary,0,250).'...'];$generated=['summary'=>$summary,'keywords'=>$keywords,'posts'=>$testPosts];$this->marketingModel->insertFinalScraper($record,$generated);$this->marketingModel->markTempScraperProcessed($id);return $this->respond(['status'=>'success','message'=>"✅ Test record stored for ID {$id}",'summary'=>$summary,'keywords'=>$keywords,'posts'=>$testPosts]);}$records=($mode==='backfill')?$this->marketingModel->getOlderUnprocessedEmails($limit):$this->marketingModel->getValidUnprocessedEmails($limit);$results=[];foreach($records as $record){$recordId=$record['id']?? 0;if(empty($record['title'])){$record['title']="Fallback Title - ID {$recordId}";}try{$insert=$this->getMyMIMarketing()->generateContentAndInsert($record);if($insert){$this->marketingModel->markTempScraperProcessed($recordId);log_message('info',"✅ Inserted record ID {$recordId}");$results[]=$insert['title'];}else{log_message('warning',"⚠️ Skipped ID {$recordId} — No summary generated.");}}catch(\Throwable $e){log_message('error',"❌ Exception on ID {$recordId}: ".$e->getMessage());}}return $this->respond(['status'=>'success','mode'=>$mode,'inserted'=>$results]);}catch(\Throwable $e){return $this->failServerError("🔥 Unified content processor failed: ".$e->getMessage());}}public function rankBufferPostsDaily(){$marketingModel=new MarketingModel();$marketing=new MyMIMarketing();$threshold=getenv('MARKETING_TFIDF_THRESHOLD')?:7.5;$pendingPosts=$marketingModel->getPendingBufferItems();foreach($pendingPosts as $post){$scoreData=$marketing->getTopKeywordScores(['summary'=>$post['summary'],]);$update=['score'=>$scoreData['score']?? 0,'tag_score'=>$scoreData['tag_score']?? 0,'tfidf_score'=>$scoreData['tfidf_score']?? 0,'auto_suggest'=>($scoreData['tfidf_score']?? 0)>=$threshold?1:0,];$marketingModel->updateBufferItem($post['id'],$update);}return $this->respond(['status'=>'success','message'=>'Buffer ranks updated.']);}public function rejectBufferItem($id){$record=$this->marketingModel->findBufferItem($id);if(!$record)return $this->failNotFound("Record not found.");$this->marketingModel->updateBufferItem($id,['status'=>'rejected']);return $this->respond(['status'=>'success','message'=>'Content rejected.']);}public function runBackfillForTempEmails(){try{log_message('info','[🔄 Backfill] Starting backfill for unprocessed temp emails...');$unprocessedRecords=$this->marketingModel->where('status',null)->orWhere('status','')->findAll(25);if(empty($unprocessedRecords)){return $this->respond(['status'=>'complete','message'=>'No unprocessed records found.']);}$processedTitles=[];foreach($unprocessedRecords as $record){try{$result=$this->MyMIMarketing->generateContentAndInsert($record);if($result){$this->marketingModel->markTempScraperProcessed($record['id']);$processedTitles[]=$result['title'];}}catch(\Throwable $e){log_message('error','[❌ Backfill Error] ID '.$record['id'].' — '.$e->getMessage());}}return $this->respond(['status'=>'success','processed'=>$processedTitles]);}catch(\Throwable $e){return $this->failServerError('[🔥 Backfill Failure] '.$e->getMessage());}}public function testGenerateFromTempEmail($id){try{helper('text');$record=$this->marketingModel->getEmailRecordById($id);if(!$record||empty($record['content'])){return $this->failNotFound("No valid temp email record found for ID {$id}");}log_message('info',"🧪 Starting test content generation for temp record ID: {$id}");$cleanText=strip_tags($record['content']);$summary=$this->getMyMIMarketing()->summarizeText($cleanText);$summary=quoted_printable_decode($summary);$summary=mb_convert_encoding($summary,'UTF-8','UTF-8');$keywords=$this->getMyMIMarketing()->extractKeywords($cleanText);if(empty($summary)||empty($keywords)){return $this->fail("Failed to generate summary or keywords for record ID {$id}");}$decodedTitleRaw=$record['title']?? '';$decodedTitle=$this->getMyMIMarketing()->decodeMimeHeaderSafe($decodedTitleRaw);$cleanTitle=preg_replace('/[^\p{L}\p{N}\s:;\-]/u','',$decodedTitle);$testPosts=['discord'=>"💬 *{$cleanTitle}*: {$summary} #".implode(' #',$keywords),'linkedin'=>"📢 {$cleanTitle} — {$summary}",'email'=>"Subject: {$cleanTitle}\n\n{$summary}",'x'=>substr($summary,0,250).'...',];$generated=['summary'=>$summary,'keywords'=>$keywords,'posts'=>$testPosts];$this->marketingModel->insertFinalScraper($record,$generated);$this->marketingModel->markTempScraperProcessed($id);log_message('info',"✅ Test record stored in bf_marketing_scraper for temp ID {$id}");return $this->respond(['status'=>'success','message'=>"Content generated and stored successfully.",'summary'=>$summary,'keywords'=>$keywords,'posts'=>$testPosts]);}catch(\Throwable $e){log_message('critical',"❌ testGenerateFromTempEmail({$id}) failed: ".$e->getMessage());return $this->failServerError("An error occurred: ".$e->getMessage());}}public function testTfIdfEdgeCases(){$cases=['Empty String'=>'','Whitespace Only'=>'     ','Single Word'=>'Bitcoin','HTML Only'=>'<div><p></p></div>','Malformed UTF-8'=>"\xB1\x31",'Link-Only Spam'=>'http://marketwatch.com https://example.com','Token Noise'=>str_repeat('$$$!!!@@@###',10),];$results=[];foreach($cases as $label=>$input){try{log_message('info',"🧪 Running TF-IDF Test Case: $label");$cleanInput=is_string($input)?strip_tags(trim($input)):'';if(strlen($cleanInput)<10||substr_count($cleanInput,' ')<2){log_message('debug',"⚠️ Skipping test: $label — input too short or lacks structure.");$results[$label]='[Skipped — Too short or unstructured]';continue;}$summary=$this->MyMIMarketing->summarizeText($cleanInput);log_message('debug',"Result - Summary: $summary");$results[$label]=$summary;}catch(\Throwable $e){log_message('error',"❌ $label threw error: ".$e->getMessage());$results[$label]='[Error: '.$e->getMessage().']';}}return $this->renderTheme('App\Modules\Management\Views\Marketing\debugTfIdfResults',['results'=>$results,]);}public function triggerPostAutogenOnEmpty(){try{$existingPosts=$this->marketingModel->where('DATE(scraped_at)',date('Y-m-d'))->countAllResults();if($existingPosts===0){log_message('debug','[🪄 AutoGen Trigger] No posts found for today. Running fallback generator…');$this->marketingService->generatePostsFromTodaysSummaries();return $this->respond(['status'=>'success','message'=>'No posts found. Generated fresh content.']);}else{return $this->respond(['status'=>'success','message'=>'Posts already exist for today. No action taken.']);}}catch(\Throwable $e){log_message('error','[❌ AutoGen Trigger Error] '.$e->getMessage());return $this->respond(['status'=>'error','message'=>'Failed to trigger autogen.','error'=>$e->getMessage()]);}}public function updateBufferScheduleInterval($id){$data=$this->request->getJSON(true);$interval=(int)($data['interval']?? 0);$updated=$this->marketingModel->updateBufferItem($id,['schedule_interval'=>$interval,'scheduled_at'=>null ]);if($updated){return $this->respond(['status'=>'success']);}else{return $this->fail('Failed to update interval.');}}public function updatePlatformToggle($id){$data=$this->request->getJSON(true);$platform=$data['platform'];$enabled=$data['enabled'];$record=$this->marketingModel->find($id);if(!$record){return $this->failNotFound("Record not found.");}$platforms=json_decode($record['platforms']?? '{}',true);$platforms[$platform]=$enabled;$this->marketingModel->update($id,['platforms'=>json_encode($platforms)]);return $this->respond(['status'=>'success']);}} ?><?php namespace App\Libraries;use App\Config\{SiteSettings,SocialMedia};use App\Libraries\{BaseLoader,MyMIInvestments};use App\Libraries\Traits\TextProcessor;use App\Models\{AnalyticalModel,MarketingModel};use App\Services\{EmailService,MarketingService,SolanaService};use CodeIgniter\HTTP\RequestInterface;use CodeIgniter\Session\Session;use Myth\Auth\Authorization\GroupModel;use Exception;use HTMLPurifier;use HTMLPurifier_Config;use Phpml\FeatureExtraction\TokenCountVectorizer;use Phpml\Tokenization\WhitespaceTokenizer;use Phpml\FeatureExtraction\TfIdfTransformer;use NlpTools\Tokenizers\WhitespaceTokenizer as NlpWhitespaceTokenizer;use NlpTools\Similarity\CosineSimilarity;use Facebook\Facebook;use Abraham\TwitterOAuth\TwitterOAuth;use Happyr\LinkedIn\LinkedIn;use Discord\Discord;use Discord\Parts\Channel\Message;use GuzzleHttp\Client;use Scrapemax\ScrapemaxClient;use Pscrape\Pscrape\Scrape as PscrapeScraper;use Symfony\Component\DomCrawler\Crawler;use Google\Cloud\TextToSpeech\V1\TextToSpeechClient;use Google\Cloud\TextToSpeech\V1\SynthesisInput;use Google\Cloud\TextToSpeech\V1\VoiceSelectionParams;use Google\Cloud\TextToSpeech\V1\AudioConfig;use Google\Cloud\TextToSpeech\V1\AudioEncoding;class MyMIMarketing{use BaseLoader;use TextProcessor;protected $auth;protected $cuID;protected $data;protected $debug;protected $logger;protected $request;protected $session;protected $uri;protected $APIs;protected $emailService;protected $solanaService;protected $siteSettings;protected $marketingModel;protected $analyticalModel;protected $socialMedia;protected $facebook;protected $twitter;protected $linkedin;protected $discord;protected $scrapemax;protected $pscrape;public function __construct(){$this->auth=service('authentication');$this->logger=service('logger');$this->request=service('request');$this->session=service('session');$this->uri=$this->request->getUri();$this->APIs=config('APIs');$this->socialMedia=config('SocialMedia');$this->siteSettings=config('SiteSettings');$this->debug=$this->siteSettings->debug;$this->socialMedia=config('SocialMedia');$this->marketingModel=new MarketingModel();$this->analyticalModel=new AnalyticalModel();$this->emailService=service('email');$this->solanaService=new SolanaService();$this->scrapemax=new ScrapemaxClient('https://api.scrapemax.com',$this->APIs->scrapemax_api_key);$this->pscrape=new PscrapeScraper();}public function marketing(){$department=$this->department();$links=$this->social_media();return['links'=>$links,'department'=>$department];}public function distributeTradeAlert($alert,$action='BUY'){$message=$this->generateTradeAlertMessage($alert,$action);$this->postToDiscord($message);$this->postToTwitter($message);$this->postToFacebook($message);$this->postToLinkedIn($message);}public function generateRandomMarketingContent(array $tradeAlert):array{$intros=["🚨 Breaking Market Update!","📢 Urgent Trade Alert!","🔥 High-Momentum Stock Pick!","🚀 Skyrocketing Stocks!","💰 Smart Money Moves!","⚡ Quick Market Insight!","📈 Bullish Breakout Alert!","📊 Technical Setup Unfolding!","🧐 Deep Market Analysis!","💡 Pro-Level Trading Insight!"];$emoticons=['🚀','🔥','💰','📈','📊','⚡','✅','🤖','🎯','🔍'];$outros=["📊 Stay ahead of the markets!","⏳ Don't miss this setup!","💰 Trade smart & maximize gains!","🚀 Follow for more trade alerts!","📈 Watch this ticker closely!","🔥 This could be the next big mover!","💡 Insights that matter. Stay tuned!","💎 Precision trading at its best!","⚡ More insights coming soon!","📢 Tap in for more premium setups!"];$intro=$intros[array_rand($intros)];$outro=$outros[array_rand($outros)];$emote1=$emoticons[array_rand($emoticons)];$emote2=$emoticons[array_rand($emoticons)];$ticker=strtoupper(trim($tradeAlert['ticker']?? 'N/A'));$company=$tradeAlert['company']?? 'Unknown Company';$tradeDesc=trim($tradeAlert['trade_description']?? '');$news=trim($tradeAlert['financial_news']?? '');$details=trim($tradeAlert['details']?? '');$price=number_format($tradeAlert['price']?? 0,2);$link=trim($tradeAlert['tv_chart']?? $tradeAlert['tv_chart_link']?? '');$chartText=(!empty($link))?"📉 Chart: [View Here]({$link})\n":'';$fixedLength=strlen($intro)+strlen($outro)+strlen($emote1)+strlen($emote2)+strlen($chartText)+12;$maxMessageLength=2000-$fixedLength;$coreMessage="Trade Alert for **{$ticker}** ({$company}):\n"."Price: \${$price}\n"."Signal: {$tradeDesc}\n"."News: {$news}\n"."Details: {$details}\n".$chartText;if(strlen($coreMessage)>$maxMessageLength){$coreMessage=substr($coreMessage,0,$maxMessageLength-3)."...";}$finalMessage="{$emote1} {$intro}\n{$coreMessage}\n{$outro} {$emote2}";return['twitter'=>substr($finalMessage,0,280),'facebook'=>substr($finalMessage,0,2000),'linkedin'=>substr($finalMessage,0,2000),'discord'=>substr($finalMessage,0,2000)];}public function generateEmailContent(array $tradeAlert):string{$ticker=strtoupper(trim($tradeAlert['ticker']?? 'N/A'));$company=$tradeAlert['company']?? 'Unknown Company';$price=number_format($tradeAlert['price']?? 0,2);$tradeDesc=$tradeAlert['trade_description']?? '';$news=$tradeAlert['financial_news']?? '';$details=$tradeAlert['details']?? '';$content="Email Alert for {$ticker} ({$company}):\n"."Current Price: \${$price}\n"."Trade Signal: {$tradeDesc}\n"."Latest News: {$news}\n"."Analysis Details: {$details}\n"."For more information, visit our website.";return $content;}public function generateBlogContent(array $tradeAlert):string{$ticker=strtoupper(trim($tradeAlert['ticker']?? 'N/A'));$company=$tradeAlert['company']?? 'Unknown Company';$price=number_format($tradeAlert['price']?? 0,2);$tradeDesc=$tradeAlert['trade_description']?? '';$news=$tradeAlert['financial_news']?? '';$details=$tradeAlert['details']?? '';$content="Blog Post: In-depth Market Analysis on {$ticker} ({$company})\n\n"."Current Price: \${$price}\n\n"."Trade Analysis: {$tradeDesc}\n\n"."Financial News: {$news}\n\n"."Detailed Analysis: {$details}\n\n"."Stay tuned for more insights!";return $content;}public function generateVoiceoverScriptContent(array $tradeAlert):string{$ticker=strtoupper(trim($tradeAlert['ticker']?? 'N/A'));$company=$tradeAlert['company']?? 'Unknown Company';$price=number_format($tradeAlert['price']?? 0,2);$tradeDesc=$tradeAlert['trade_description']?? '';$script="Voiceover Script:\n"."Welcome to today's market update. Our focus is on {$ticker} from {$company}.\n"."The current trading price is \${$price}.\n"."Trade insight: {$tradeDesc}.\n"."Thank you for watching. Stay tuned for more updates.";return $script;}public function generateTradeAlertEmailContent(array $tradeAlert):string{$defaultTemplate=<<<S
        Hello,

        {intro}

        Check out our latest trade alert on {ticker} from {company}!
        Current Price: \${price}
        Trade Signal: {trade_description}
        Latest News: {financial_news}
        For more details, view the full analysis here: {trade_chart_link}

        {outro}
S;$intros=["Heads up, traders!","Breaking news from the market!","Your daily trade update is here!","Hot off the press!","Market alert!"];$outros=["Happy trading!","Stay tuned for more insights.","Trade smart and prosper!","Keep your eyes on the market!","Have a great trading day!"];$intro=$intros[array_rand($intros)];$outro=$outros[array_rand($outros)];$replacements=['{ticker}'=>strtoupper(trim($tradeAlert['ticker']?? 'N/A')),'{company}'=>$tradeAlert['company']?? 'Unknown Company','{price}'=>number_format($tradeAlert['price']?? 0,2),'{trade_description}'=>$tradeAlert['trade_description']?? 'No trade signal available.','{financial_news}'=>$tradeAlert['financial_news']?? 'No news available.','{trade_chart_link}'=>$tradeAlert['trade_chart_link']?? 'https://www.mymiwallet.com/trade-overview?ticker='.urlencode($tradeAlert['ticker']?? ''),'{intro}'=>$intro,'{outro}'=>$outro];$content=str_replace(array_keys($replacements),array_values($replacements),$defaultTemplate);return $content;}public function generateTradeAlertBlogContent(array $tradeAlert):string{$defaultTemplate=<<<S
        Blog Post: Market Analysis on {ticker} ({company})

        **Current Price:** \${price}

        **Trade Analysis:**
        {trade_description}

        **Financial News Update:**
        {financial_news}

        For a detailed review, visit our website.
S;$replacements=['{ticker}'=>strtoupper(trim($tradeAlert['ticker']?? 'N/A')),'{company}'=>$tradeAlert['company']?? 'Unknown Company','{price}'=>number_format($tradeAlert['price']?? 0,2),'{trade_description}'=>$tradeAlert['trade_description']?? 'No trade signal available.','{financial_news}'=>$tradeAlert['financial_news']?? 'No news available.'];$content=str_replace(array_keys($replacements),array_values($replacements),$defaultTemplate);return $content;}public function generateTradeAlertVoiceoverScriptContent(array $tradeAlert):string{$defaultTemplate=<<<S
        Voiceover Script for {ticker}:

        "Welcome to today’s market update. Our focus is on {ticker} from {company}. 
        Currently, it is trading at \${price}. 
        Trade insight: {trade_description}. 
        Stay tuned for further updates and in-depth analysis."

        Thank you for watching!
S;$replacements=['{ticker}'=>strtoupper(trim($tradeAlert['ticker']?? 'N/A')),'{company}'=>$tradeAlert['company']?? 'Unknown Company','{price}'=>number_format($tradeAlert['price']?? 0,2),'{trade_description}'=>$tradeAlert['trade_description']?? 'No trade signal available.'];$content=str_replace(array_keys($replacements),array_values($replacements),$defaultTemplate);return $content;}public function generateTradeAlertRandomMarketingContent(array $tradeAlert):array{$intros=["Heads up, traders!","🔥 Hot Trade Alert!","🚀 Ready for a breakout?","Attention: Market Movers!","⚡ Quick update:"];$emoticons=['🚀','🔥','💰','📈','📊','⚡','✅','🤖'];$outros=["Stay tuned for more!","Don't miss out!","Trade smart and prosper!","Keep your eyes on the market!","Happy trading!"];$intro=$intros[array_rand($intros)];$emote=$emoticons[array_rand($emoticons)];$outro=$outros[array_rand($outros)];$ticker=strtoupper(trim($tradeAlert['ticker']?? 'N/A'));$company=$tradeAlert['company']?? 'Unknown Company';$tradeDesc=trim($tradeAlert['trade_description']?? '');$news=trim($tradeAlert['financial_news']?? '');$details=trim($tradeAlert['details']?? '');$price=number_format($tradeAlert['price']?? 0,2);$baseMessage="{$emote} {$intro}\n"."Trade Alert for **{$ticker}** ({$company}):\n"."Price: \${$price}\n"."Signal: {$tradeDesc}\n"."News: {$news}\n"."Details: {$details}\n"."{$outro} {$emote}";$socialContent=['twitter'=>substr($baseMessage,0,280),'facebook'=>$baseMessage,'linkedin'=>$baseMessage,'discord'=>$baseMessage];return $socialContent;}public function getBlogPosts(){$getBlogPosts=$this->marketingModel->getBlogPosts();return['getBlogPosts'=>$getBlogPosts];}public function getCampaigns(){$getMarketingCampaigns=$this->marketingModel->getActiveCampaigns();return $getMarketingCampaigns;}public function getCampaignByID($campaignID){$campaignInfo=$this->marketingModel->getCampaignById($campaignID);return $campaignInfo;}public function getCampaignsBySchedId($sched_id){$campaigns=$this->marketingModel->getCampaignsBySchedId($sched_id);if($campaigns){foreach($campaigns as&$campaign){$campaign['primary_content']=$this->generateSchedPrimaryContent($campaign['id']);$campaign['social_media_content']=$this->generateSchedSocialMediaContent($campaign['id']);}}else{$campaigns=[];}log_message('debug','MyMIMarketing::getCampaignsBySchedId - $campaigns: '.print_r($campaigns,true));return $campaigns;}public function getFeatures(){$getFeatures=$this->marketingModel->getFeatures();if($this->debug===1){}return $getFeatures;}public function getKeywordCandidates():array{$watchlist=$this->getMyMIInvestments()->getUserWatchlist($this->cuID);$default=['Apple','Tesla','Inflation','Ethereum','Interest Rates'];$symbols=array_map(fn($row)=>$row['symbol'],$watchlist);return array_unique(array_merge($symbols,$default));}public function getManagementTeam(){$getManagementTeam=$this->marketingModel->getMarketingTeam();if($this->debug===1){}return $getManagementTeam;}public function generateContentAndInsert(array $record){$recordId=$record['id']?? null;if(!$recordId||empty($record['content'])){log_message('error',"❌ generateContentAndInsert() - Invalid record ID or missing content.");return null;}$rawContent=$record['content'];$cleanContent=$this->sanitizeRawEmailContent($rawContent);if(strlen($cleanContent)<300||substr_count($cleanContent,' ')<20){log_message('warning',"⚠️ generateContentAndInsert() - Skipping record ID {$recordId} due to insufficient cleaned content.");return null;}$summaryData=$this->summarizeContent($cleanContent);if(!is_array($summaryData)||empty($summaryData['summary'])){log_message('warning',"⚠️ generateContentAndInsert() - No summary generated for record ID {$recordId}");return null;}$headline=$this->generateHeadline($summaryData['summary']);$keywords=$summaryData['keywords']?? $this->extractKeywords($summaryData['summary']);$posts=$this->generatePlatformContent($summaryData['summary'],$keywords);$insertData=['source_id'=>$recordId,'title'=>$headline,'summary'=>$summaryData['summary'],'keywords'=>implode(',',$keywords),'posts'=>json_encode($posts),'platforms'=>json_encode(array_keys($posts)),'status'=>'ready','created_at'=>date('Y-m-d H:i:s'),];$result=$this->marketingModel->insert($insertData);if($result){log_message('info',"✅ generateContentAndInsert() - Inserted final content for record ID {$recordId}");return $insertData;}else{log_message('error',"❌ generateContentAndInsert() - Failed DB insert for record ID {$recordId}");return null;}}public function generateContentForZapier($platform,$contentData){$payload=['platform'=>$platform,'content'=>$contentData['content'],'media_url'=>$contentData['media_url']?? null,];return json_encode($payload);}public function generateContentFromRaw(array $emailRecord){if(!isset($emailRecord['content'])||strlen(trim($emailRecord['content']))<1000){log_message('error','generateContentFromRaw(): Invalid or too short content.');return null;}$rawText=$emailRecord['content']?? '';if(empty($rawText)){log_message('error','MyMIMarketing L532 - generateContentFromRaw(): Missing content.');return null;}$cleanContent=$this->sanitizeRawEmailContent($rawText);$cleanContent=preg_replace('/[^[:print:]]/','',$cleanContent);if(strlen($cleanContent)<500||substr_count($cleanContent,' ')<10){log_message('error',"❌ MyMIMarketing L541 - Skipping record ID {$emailRecord['id']} — insufficient cleaned content.");return null;}$text=preg_replace('/\s+/',' ',trim(strip_tags($cleanContent)));$summaryData=$this->summarizeContentFromHtml($cleanContent,$emailRecord['id']?? null);if(empty($summaryData['summary'])){$backupSummary=substr($text,0,250);log_message('warning',"⚠️ MyMIMarketing L550 - generateContentFromRaw() fallback summary used for record ID {$emailRecord['id']}");$summaryData['summary']=$backupSummary;$summaryData['keywords']=$this->extractKeywords($backupSummary);}$featureScore=$summaryData['featureScore']?? null;$keywordScore=$summaryData['keywordScore']?? null;$pageRankScore=$summaryData['pageRankScore']?? null;$semanticDiversityScore=$summaryData['semanticDiversityScore']?? null;$numericCheck=[$featureScore,$keywordScore,$pageRankScore,$semanticDiversityScore];foreach($numericCheck as $i=>$val){if(!is_numeric($val)){log_message('error',"❌ generateContentFromRaw() - Invalid score at index {$i}: ".print_r($val,true));return null;}}$summary=$summaryData['summary'];$headline=$this->generateHeadline($summary);$subtopics=$this->extractSubtopics($text);$posts=['blog'=>$this->formatBlogPost($headline,$summary),'email'=>$this->formatEmailBlast($headline,$summary),'facebook'=>$this->formatSocialPost($headline,$summary,'facebook'),'linkedin'=>$this->formatSocialPost($headline,$summary,'linkedin'),'twitter'=>$this->formatSocialPost($headline,$summary,'twitter'),'discord'=>$this->formatDiscordPost($headline,$summary),];$this->insertFinalScraper($emailRecord,['summary'=>$summary,'keywords'=>$summaryData['keywords']??[],]);return['headline'=>$headline,'summary'=>$summary,'subtopics'=>$subtopics,'posts'=>$posts,'source_id'=>$emailRecord['id'],'platforms'=>json_encode(array_keys($posts)),'status'=>'ready',];}public function generateHeadline(string $summary):string{if(empty($summary)){log_message('warning','⚠️ MyMIMarketing::generateHeadline: summary is empty.');return 'MyMI Update';}$cleanText=strip_tags($summary);$cleanText=preg_replace('/\s+/',' ',trim($cleanText));$sentences=preg_split('/(?<=[.!?])\s+(?=[A-Z])/',$cleanText,2,PREG_SPLIT_NO_EMPTY);$headline=$sentences[0]?? substr($cleanText,0,100);$words=explode(' ',$headline);$cleanHeadline=implode(' ',array_slice($words,0,12));return rtrim($cleanHeadline,',;:.').(count($words)>12?'...':'');}private function generateSchedPrimaryContent($campaignId){return 'Primary content for campaign ID '.$campaignId;}private function generateSchedSocialMediaContent($campaignId){return['facebook'=>'Facebook content for campaign ID '.$campaignId,'twitter'=>'Twitter content for campaign ID '.$campaignId,];}private function generateTradeAlertMessage($alert,$action){return "**🚀 TRADE ALERT! 🚀**\n"."**Symbol:** {$alert['ticker']}\n"."**Company:** {$alert['company']}\n"."**Type:** {$action}\n"."**Price:** \${$alert['price']}\n"."**Target:** \${$alert['target_price']}\n"."**Stop Loss:** \${$alert['stop_loss']}\n"."[📊 View Chart]({$alert['tv_chart']})";}private function buildSummaryToCharLimit($sentences,$scores,$charLimit=500){arsort($scores,SORT_NUMERIC);$summary='';foreach($scores as $index=>$score){$sentence=$sentences[$index].' ';if(strlen($summary)+strlen($sentence)>$charLimit)break;$summary.=$sentence;}return trim($summary);}private function compressEmailBody($body){$body=preg_replace('/\s+/',' ',$body);return trim($body);}public function convertToUtf8($content){$encoding=mb_detect_encoding($content,"UTF-8, ISO-8859-1, GBK",true);return($encoding=="UTF-8")?$content:mb_convert_encoding($content,"UTF-8",$encoding);}public function convertUrlsToLinks($text){$urlPattern='/\bhttps?:\/\/\S+/i';return preg_replace($urlPattern,'<a href="$0" target="_blank">$0</a>',$text);}public function calculateCosineSimilarity($text1,$text2){$tokenizer=new NlpWhitespaceTokenizer();$cosine=new CosineSimilarity();$set1=$tokenizer->tokenize($text1);$set2=$tokenizer->tokenize($text2);$similarity=$cosine->similarity($set1,$set2);$this->logger->debug('Cosine Similarity: '.$similarity);return $similarity;}private function calculateFeatureScore($sentence,$features){$score=0;$words=explode(" ",strtolower($sentence));foreach($words as $word){$score+=$features[$word]?? 0.1;}return $score;}private function calculateKeywordScore($sentence,$tokens){$score=0;foreach($tokens as $token){if(strpos(strtolower($sentence),strtolower($token))!==false){$score++;}}$this->logger->debug('Keyword Score for sentence: '.$score);return $score;}private function calculateSemanticDiversity($sentence,$summary,$tokens){$diversityScore=0;foreach($summary as $summarizedSentence){if($this->isSemanticallyDifferent($sentence,$summarizedSentence,$tokens)){$diversityScore++;}}$this->logger->debug('Semantic Diversity Score for sentence: '.$diversityScore);return $diversityScore;}public function extractFeaturesWithPhpMl($content){$vectorizer=new TokenCountVectorizer(new WhitespaceTokenizer());$samples=[$content];$vectorizer->fit($samples);$vectorizer->transform($samples);$features=$vectorizer->getVocabulary();$vectorCounts=$samples[0]??[];$filteredFeatures=[];foreach($features as $feature=>$index){$score=$vectorCounts[$index]?? 0;if($score>=2){$filteredFeatures[$feature]=$score;}}$this->logger->debug('MyMIMarketing L751 - Filtered Feature Vectors (Score ≥ 2): '.print_r($filteredFeatures,true));return $filteredFeatures;}protected function extractHashtags(string $text):string{$words=str_word_count(strtolower(strip_tags($text)),1);$wordFreq=array_count_values($words);$filtered=array_filter($wordFreq,fn($freq,$word)=>strlen($word)>3&&$freq>1,ARRAY_FILTER_USE_BOTH);arsort($filtered);$topWords=array_slice(array_keys($filtered),0,5);return implode(' ',array_map(fn($word)=>'#'.ucfirst($word),$topWords));}public function extractKeywords($text,$minScore=2){if(!is_string($text)||empty(trim($text))){log_message('error','extractKeywords(): Empty or invalid input text provided.');return[];}$docs=$this->splitIntoSentences($text);$docs=array_filter($docs,fn($d)=>strlen(trim($d))>0);if(empty($docs)){log_message('warning','extractKeywords(): No usable sentences extracted.');return[];}$tokenized=array_map(function($sentence){$tokens=preg_split('/\W+/',strtolower(trim($sentence)),-1,PREG_SPLIT_NO_EMPTY);return array_filter($tokens,fn($w)=>strlen($w)>2);},$docs);$tokenized=array_filter($tokenized,fn($tokens)=>!empty($tokens));if(empty($tokenized)||!isset($tokenized[0])||!is_array($tokenized[0])||empty($tokenized[0])){log_message('error','❌ extractKeywords(): Tokenized input invalid for TF-IDF. Tokenized: '.json_encode($tokenized));return[];}try{$vectorizer=new TokenCountVectorizer(new WhitespaceTokenizer());$vectorizer->fit($tokenized);$vectorizer->transform($tokenized);$tfIdf=new TfIdfTransformer();$tfIdf->fit($tokenized);$tfIdf->transform($tokenized);}catch(\Throwable $e){log_message('error','❌ extractKeywords(): TF-IDF failed — '.$e->getMessage());return[];}$vocab=$vectorizer->getVocabulary();$keywordScores=[];foreach($vocab as $word=>$index){$score=0;foreach($tokenized as $doc){$score+=isset($doc[$index])?(float) $doc[$index]:0;}if($score>=$minScore){$keywordScores[$word]=round($score,2);}}arsort($keywordScores);return array_keys(array_slice($keywordScores,0,10,true));}public function extractSubtopics(string $text):array{$sentences=explode('.',$text);$chunks=array_chunk($sentences,2);$subtopics=[];foreach($chunks as $chunk){$summary=implode('. ',$chunk);$subtopics[]=trim($summary);}return $subtopics;}public function fetchAndStoreEmails($emailType){log_message('info',"Starting to fetch and store emails of type: {$emailType}");$emailCredentials=['hostname'=>'{smtp.dreamhost.com:993/imap/ssl}INBOX','username'=>$emailType.'@mymiwallet.com','password'=>$this->APIs->emailPassword,];$inbox=$this->retry(function()use($emailCredentials){return imap_open($emailCredentials['hostname'],$emailCredentials['username'],$emailCredentials['password']);});if(!$inbox){$this->logger->error('Cannot connect to email server: '.imap_last_error());return;}try{$since=date("d-M-Y",strtotime("-1 days"));$emails=imap_search($inbox,'SINCE "'.$since.'"');$this->logger->debug('Emails fetched: '.print_r($emails,true));$processedEmails=$this->marketingModel->getProcessedEmails(date('Y-m-d'));if($emails){$config=\HTMLPurifier_Config::createDefault();$purifier=new \HTMLPurifier($config);foreach($emails as $email_number){$overview=imap_fetch_overview($inbox,$email_number,0);$subject=$this->convertToUtf8($overview[0]->subject ?? '');$date=date("Y-m-d H:i:s",strtotime($overview[0]->date));$sender=$overview[0]->from ?? '';$emailIdentifier=md5($subject.$date.$sender);if(in_array($emailIdentifier,$processedEmails)){log_message('info',"Email already processed: {$emailIdentifier}");continue;}$emailBody=imap_fetchbody($inbox,$email_number,1);if(empty(trim($emailBody))){log_message('error',"Email body is empty for email #{$email_number}");continue;}$decodedMessage=$this->decodeSpecialCharacters($emailBody);$sanitizedBody=$purifier->purify($decodedMessage);$compressedBody=$this->compressEmailBody($sanitizedBody);$compressedBody=mb_substr($compressedBody,0,60000);$textOnlyContent=$this->stripHtmlTags($sanitizedBody);$summaryArray=$this->summarizeContent($textOnlyContent);if(is_array($summaryArray)){$summaryString=$summaryArray['summary']?? implode('. ',array_map('strval',$summaryArray));$features=$summaryArray['features']??[];$tokens=$summaryArray['tokens']??[];$sentences=$summaryArray['sentences']??[];}else{$summaryString=strval($summaryArray);$features=$tokens=$sentences=[];}$featureScore=$this->calculateFeatureScore($summaryString,$features);$keywordScore=$this->calculateKeywordScore($summaryString,$tokens);$semanticDiversityScore=$this->calculateSemanticDiversity($summaryString,$sentences,$tokens);$this->logger->info("Analytics: FeatureScore={$featureScore}, KeywordScore={$keywordScore}, SemanticDiversity={$semanticDiversityScore}");$fallbackTitle=!empty($subject)?$subject:'Untitled Email';$fallbackUrl='https://www.mymiwallet.com/email/'.urlencode(substr($subject,0,50)).'/'.md5($emailIdentifier);$email_data=['status'=>'In Review','type'=>$emailType==='alerts'?'Trade Alerts':'Email/Newsletters','summary'=>$summaryString,'content'=>$textOnlyContent,'email_date'=>$date,'email_subject'=>$subject,'email_body'=>$compressedBody,'email_sender'=>$sender,'created_on'=>date("Y-m-d H:i:s"),'modified_on'=>date("Y-m-d H:i:s"),'email_identifier'=>$emailIdentifier,'scraped_at'=>date("Y-m-d H:i:s"),'title'=>$fallbackTitle,'url'=>$fallbackUrl,];$this->marketingModel->storeEmail($email_data);$analyticsData=['email_identifier'=>$emailIdentifier,'feature_score'=>$featureScore,'keyword_score'=>$keywordScore,'semantic_diversity_score'=>$semanticDiversityScore,'created_on'=>date("Y-m-d H:i:s")];$this->marketingModel->storeContentAnalytics(['source_type'=>'email','source_identifier'=>$emailIdentifier,'feature_score'=>$featureScore,'keyword_score'=>$keywordScore,'semantic_diversity_score'=>$semanticDiversityScore,'created_on'=>date("Y-m-d H:i:s")]);log_message('info',"Stored email and analytics: {$emailIdentifier}");}}else{$this->logger->info('No new emails found.');}}catch(\Exception $e){$this->logger->error('Exception occurred: '.$e->getMessage());$this->notifyAdminOnError('Email Fetch Exception',$e->getMessage());}finally{imap_close($inbox);}}public function formatBlogPost(string $headline,string $summary):string{return <<<S
    <h2>{$headline}</h2>
    <p>{$summary}</p>
    <p>Get the full breakdown inside your MyMI Wallet dashboard, where investing meets innovation.</p>
S;}public function formatEmailBlast(string $headline,string $summary):string{return <<<S
    Subject: {$headline}
    
    {$summary}
    
    Explore more at https://www.mymiwallet.com
S;}public function formatSocialPost(string $headline,string $summary,string $platform='generic'):string{$hashtags='#MyMIWallet #InvestSmarter #FinancialFreedom';switch($platform){case 'facebook':case 'linkedin':return"{$headline}\n\n{$summary}\n\nStart your journey: https://www.mymiwallet.com\n\n{$hashtags}";case 'twitter':case 'x':$shortSummary=substr($summary,0,180);return"{$headline} — {$shortSummary}...\nhttps://www.mymiwallet.com\n{$hashtags}";default:return"{$headline}\n\n{$summary}\nhttps://www.mymiwallet.com";}}public function formatDiscordPost(string $headline,string $summary):string{return"**{$headline}**\n\n{$summary}\n\n👉 <https://www.mymiwallet.com>";}private function normalizeUtf8($text){return mb_convert_encoding($text,'UTF-8',mb_detect_encoding($text,'UTF-8, ISO-8859-1',true));}private function notifyAdminOnError($subject,$message){$this->emailService->setFrom('no-reply@mymiwallet.com','MyMI Wallet');$this->emailService->setTo('team@mymiwallet.com');$this->emailService->setSubject($subject);$this->emailService->setMessage($message);if(!$this->emailService->send()){$this->logger->error('Failed to send error notification email: '.print_r($this->emailService->printDebugger(),true));}}public function notifyModerators(array $post){$platforms=json_decode($post['platforms']?? '{}',true);$used=implode(', ',array_keys(array_filter($platforms)));$subject="📢 Buffer Post Promoted: {$post['keyword']}";$message="✅ Post ID: {$post['id']}\n\n"."Summary: ".wordwrap($post['summary'],80)."\n\n"."Promoted Platforms: {$used}\n\n".site_url('Marketing/PreviewGeneratedPost/'.$post['id']);$email=\Config\Services::email();$email->setTo('moderators@mymiwallet.com');$email->setSubject($subject);$email->setMessage($message);$email->send();log_message('info',"📬 Sent moderator alert for Buffer ID {$post['id']}");}public function reprocessIncompleteEmails(){$incompleteRecords=$this->marketingModel->getEmailsMissingTitleOrUrl(20);log_message('debug','📋 MyMIMarketing L986 - Incomplete records fetched: '.count($incompleteRecords));foreach($incompleteRecords as $record){try{$emailId=$record['message_id']?? null;$content=$record['content']?? '';$title=$record['title']?? '';$url=$record['url']?? '';if(!$emailId)continue;$email=$this->fetchEmailByMessageId($emailId);if($email){$content=$email['body']?? $content;$title=$email['subject']?? $title;$url=$email['link']?? $url;}$title=$title?:'Untitled Email - '.date('Y-m-d H:i');$url=$url?:'https://mymiwallet.com/news/fallback';$this->marketingModel->updateEmailFields($record['id'],$title,$url,$content);}catch(\Throwable $e){log_message('error','❌ Error backfilling email ID '.$record['id'].': '.$e->getMessage());}}}private function retry($function,$attempts=3,$delay=2000){$attempt=0;while($attempt<$attempts){try{return $function();}catch(Exception $e){$attempt++;if($attempt>=$attempts){throw $e;}sleep($delay/1000);}}}private function sanitizeContent($content){$content=preg_replace('#<script(.*?)>(.*?)</script>#is','',$content);$content=preg_replace('#<noscript(.*?)>(.*?)</noscript>#is','',$content);$content=strip_tags($content)?? '';$content=preg_replace('/\.\s*/','. ',$content);return $content;}public function sanitizeRawEmailContent(string $rawContent):string{log_message('debug','🧪 MyMIMarketing L1140 - Raw Email Before Cleaning: {raw}',['raw'=>$rawContent]);$clean=preg_replace("/=\r\n|\=\n/",'',$rawContent);$clean=quoted_printable_decode($clean);$clean=html_entity_decode($clean,ENT_QUOTES|ENT_HTML5,'UTF-8');$clean=strip_tags($clean);$clean=preg_replace('/\s+/',' ',$clean);$clean=mb_convert_encoding($clean,'UTF-8','UTF-8');log_message('debug','✅ MyMIMarketing L1159 - Cleaned Email Output: {clean}',['clean'=>$clean]);return trim($clean);}private function sanitizeText(string $text):string{return strip_tags(html_entity_decode($text));}public function saveTradingViewChart($chartUrl,$ticker){$saveDir=FCPATH.'assets/images/Alerts/Charts/';if(!is_dir($saveDir)){mkdir($saveDir,0777,true);}$timestamp=time();$filename="{$ticker}_chart_{$timestamp}.jpg";$savePath=$saveDir.$filename;$ch=curl_init($chartUrl);$fp=fopen($savePath,'wb');curl_setopt($ch,CURLOPT_FILE,$fp);curl_setopt($ch,CURLOPT_HEADER,0);curl_exec($ch);curl_close($ch);fclose($fp);if(file_exists($savePath)){return $filename;}else{return null;}}public function scoreKeywordRelevance(string $keyword,string $summary):int{$keyword=strtolower($keyword);$summaryText=strtolower(strip_tags($summary));$totalWords=str_word_count($summaryText);if($totalWords===0)return 0;$matches=substr_count($summaryText,$keyword);$score=min(100,round(($matches/$totalWords)*500));return $score;}public function scrapeTokenContent($tokenInfo){$scrapedData=[];foreach($tokenInfo as $token){if(!empty($token['website'])){log_message('debug','MyMIMarketing L101 - $token[website]: '.$token['website']);$websiteData=$this->scrapeWebsite($token['website']);log_message('debug','MyMIMarketing L103 - $websiteData: '.print_r($websiteData,true));$this->storeTemporaryData($websiteData);$scrapedData[]=$websiteData;}if(!empty($token['facebook'])){log_message('debug','MyMIMarketing L109 - $token[facebook]: '.$token['facebook']);$facebookData=$this->scrapeFacebook($token['facebook']);log_message('debug','MyMIMarketing L111 - $facebookData: '.print_r($facebookData,true));$this->storeTemporaryData($facebookData);$scrapedData[]=$facebookData;}if(!empty($token['twitter'])){log_message('debug','MyMIMarketing L117 - $token[twitter]: '.$token['twitter']);$twitterData=$this->scrapeTwitter($token['twitter']);log_message('debug','MyMIMarketing L119 - $twitterData: '.print_r($twitterData,true));$this->storeTemporaryData($twitterData);$scrapedData[]=$twitterData;}log_message('debug','MyMIMarketing L117 - $token[symbol] $token[name]: '.$token['symbol'].' '.$token['coin_name']);$googleData=$this->scrapeGoogleSearch($token['symbol'].' '.$token['coin_name']);$this->storeTemporaryData($googleData);$scrapedData[]=$googleData;}return $scrapedData;}public function scrapeAndGenerateContent($accountid,$category,$platform=null){$generatedData=[];if($category==='Solana'){$this->solanaModel=new SolanaModel();$tokenInfo=$this->solanaModel->getTokenInfoByID($accountid);}else{$tokenInfo=[];}if(!empty($tokenInfo)){$scrapedData=[];try{log_message('debug','Attempting to scrape token content.');$scrapedData=$this->scrapeTokenContent($tokenInfo);log_message('debug','Scraped Data: '.print_r($scrapedData,true));}catch(\GuzzleHttp\Exception\ClientException $e){if($e->getResponse()->getStatusCode()==403){log_message('critical','403 Forbidden encountered while scraping website: '.$e->getMessage());}else{log_message('critical','ClientException: '.$e->getMessage());}}catch(\Exception $e){log_message('critical','An error occurred while scraping token content: '.$e->getMessage());}try{if(!empty($scrapedData)){log_message('debug','Attempting to generate content from scraped data.');$generatedData=$this->generateContentFromScrapedData($scrapedData,$platform);log_message('debug','Generated Data: '.print_r($generatedData,true));}else{log_message('debug','Scraped data is empty.');}}catch(\Exception $e){log_message('critical','An error occurred while generating content: '.$e->getMessage());}}else{log_message('debug','Token information is empty.');}return $generatedData;}private function scrapeWebsite($url){try{$client=new Client();$response=$client->get($url);if($response->getStatusCode()==200){$html=$response->getBody()->getContents();$crawler=new \Symfony\Component\DomCrawler\Crawler($html);return['title'=>$crawler->filter('title')->text(),'content'=>$this->sanitizeContent($crawler->filter('body')->html()),];}}catch(RequestException $e){$this->logger->error('Error scraping website: '.$e->getMessage());}return[];}private function scrapeFacebook($url){return $this->scrapeWithRetries('facebook',$url,function($content){return['title'=>$content['page_title']?? 'No title','content'=>$this->sanitizeContent($content['posts']?? 'No posts'),];});}private function scrapeTwitter($url){return $this->scrapeWithRetries('twitter',$url,function($content){return['title'=>$content['profile']?? 'No title','content'=>$this->sanitizeContent($content['tweets']?? 'No tweets'),];});}private function scrapeWithRetries($type,$url,$transform,$retries=3){$backoff=1;for($i=0;$i<$retries;$i++){try{$response=$this->scrapemax->scrape(['target_url'=>$url,'type'=>'data','js_enabled'=>1,'base64_encoded'=>0]);$content=json_decode($response->getBody()->getContents(),true);if(empty($content)){throw new \Exception("No content returned");}return $transform($content);}catch(ServerException $e){if($i<$retries-1){sleep($backoff);$backoff*=2;continue;}$this->logger->error("Error scraping $type: ".$e->getMessage());}catch(RequestException $e){$this->logger->error("Error scraping $type: ".$e->getMessage());break;}catch(\Exception $e){$this->logger->error("General error scraping $type: ".$e->getMessage());break;}}return['title'=>'No title','content'=>'No content'];}private function scrapeGoogleSearch($query){try{$results=$this->pscrape->rollingCurl('rollingCurl');$results->request('https://www.google.com/search?q='.urlencode($query));$content='';$resultsData=$results->execute();if(!is_array($resultsData)){throw new \Exception("Google search did not return an array");}foreach($resultsData as $result){$content.=$result['title'].' '.$result['link'].' ';}return['title'=>'Google Search Results for '.$query,'content'=>$this->sanitizeContent($content),];}catch(\Exception $e){$this->logger->error('Error scraping Google Search: '.$e->getMessage());}return[];}public function sendZapierTradeAlert($tradeAlert){$zapierWebhookUrl="YOUR_ZAPIER_WEBHOOK_URL";$payload=json_encode(['ticker'=>$tradeAlert['ticker'],'price'=>$tradeAlert['price'],'sentiment'=>$tradeAlert['market_sentiment'],'chart_link'=>$tradeAlert['link'],'created_on'=>$tradeAlert['created_on']]);$ch=curl_init($zapierWebhookUrl);curl_setopt($ch,CURLOPT_HTTPHEADER,['Content-Type: application/json']);curl_setopt($ch,CURLOPT_POST,1);curl_setopt($ch,CURLOPT_POSTFIELDS,$payload);curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);$response=curl_exec($ch);curl_close($ch);return $response;}public function standaloneScrapeWebsite($url){try{$client=new Client();$response=$client->get($url);if($response->getStatusCode()==200){$html=$response->getBody()->getContents();$crawler=new Crawler($html);$content=$crawler->filter('body')->each(function($node){return $node->text();});$content=array_filter($content,function($text){return!str_contains($text,'footer')&&!str_contains($text,'head');});$data=['url'=>$url,'content'=>implode(' ',$content),'scraped_at'=>date('Y-m-d H:i:s')];$this->saveTemporaryScrapedData($data);return $data;}else{log_message('error','Failed to scrape website. HTTP status code: '.$response->getStatusCode());}}catch(RequestException $e){log_message('error','RequestException while scraping website: '.$e->getMessage());}catch(\Throwable $th){log_message('error','Throwable error while scraping website: '.$th->getMessage());}return false;}public function saveTemporaryScrapedData($data){$marketingModel=new \App\Models\MarketingModel();return $this->marketingModel->insertTemporaryData($data);}private function storeTemporaryData($data){if(!empty($data)){$this->marketingModel->insertTemporaryData($data);}else{$this->logger->warning('Attempted to store empty data.');}}private function selectSummarySentences($sentences,$scores,$topN=5){arsort($scores,SORT_NUMERIC);$topSentenceIndexes=array_keys(array_slice($scores,0,$topN,true));$summary=array_intersect_key($sentences,array_flip($topSentenceIndexes));usort($summary,function($a,$b)use($sentences){return array_search($a,$sentences)-array_search($b,$sentences);});return $summary;}private function splitIntoSentences($content){$content=preg_replace('/\s+/',' ',trim($content));$sentences=preg_split('/(?<=[.!?])\s+/',$content,-1,PREG_SPLIT_NO_EMPTY);return array_filter($sentences,function($sentence){return strlen(trim($sentence))>0;});}public function summarize($text,$method='textrank',$charLimit=500){$text=$this->cleanText($text);if($method==='tfidf'){return $this->summarizeText($text);}else{return $this->summarizeContent($text,$charLimit);}}public function summarizeContent($content,$charLimit=500){if(empty(trim($content))){$this->logger->error('$content is Empty for summarizeContent() function');return[];}$sentences=$this->splitIntoSentences($content);if(empty($sentences)){log_message('warning','⚠️ MyMIMarketing L1306 - summarizeContent(): No valid sentences found in content.');return null;}if(empty($sentences)){$this->logger->error('No sentences found for summarization');return[];}$tokens=$this->tokenizeWithNlpTools($content);$features=$this->extractFeaturesWithPhpMl($content);$wordFrequencies=$this->calculateWordFrequencies($content,$this->getStopWords());$similarityMatrix=$this->buildSimilarityMatrix($sentences,$wordFrequencies);$scores=$this->pageRank($similarityMatrix);$summary=$this->buildSummaryToCharLimit($sentences,$scores,$charLimit);$finalSummary=$this->convertUrlsToLinks($summary);return!empty($finalSummary)?['sentences'=>$sentences,'tokens'=>$tokens,'features'=>$features,'wordFrequencies'=>$wordFrequencies,'similarityMatrix'=>$similarityMatrix,'scores'=>$scores,'summary'=>$finalSummary,]:$summary;}public function summarizeContentFromHtml(string $html,$recordId=null):array{$html=quoted_printable_decode($html);$html=html_entity_decode($html,ENT_QUOTES|ENT_HTML5,'UTF-8');$html=preg_replace('/=\r?\n/','',$html);$plainText=strip_tags(html_entity_decode($html));$cleaned=$this->sanitizeRawEmailContent($plainText);if(strlen($cleaned)<300||substr_count($cleaned,' ')<20){$logSuffix=$recordId?" (ID: $recordId)":'';log_message('info',"[MyMIMarketing] summarizeContentFromHtml(): Skipping — content too short or lacks structure{$logSuffix}");return['summary'=>'','keywords'=>[]];}$cleaned=preg_replace('/\s{2,}/',' ',$cleaned);$summaryData=$this->summarizeContent($cleaned);if(!is_array($summaryData)||empty($summaryData['summary'])){return['summary'=>'','keywords'=>[]];}$keywords=$this->marketingModel->extractKeywords($cleaned);return['summary'=>$summaryData['summary'],'keywords'=>$keywords ??[],'featureScore'=>$summaryData['featureScore']?? null,'keywordScore'=>$summaryData['keywordScore']?? null,'pageRankScore'=>$summaryData['pageRankScore']?? null,'semanticDiversityScore'=>$summaryData['semanticDiversityScore']?? null,];}public function summarizeContentTextRank($content){$sentences=$this->splitIntoSentences($content);$similarityMatrix=$this->buildSimilarityMatrix($sentences);$scores=$this->pageRank($similarityMatrix);return $this->extractTopSentences($sentences,$scores);}public function summarizeText($text,$maxSentences=5){if(!is_string($text)||empty(trim($text))){log_message('error','summarizeText(): Empty or invalid input text provided.');return 'Summary not available.';}$sentences=$this->splitIntoSentences($text);if(empty($sentences)||count($sentences)<2){log_message('warning','summarizeText(): Not enough content to summarize.');return implode(' ',$sentences);}$vectorizer=new TokenCountVectorizer(new WhitespaceTokenizer());$vectorizer->fit($sentences);$vectorizer->transform($sentences);$tfidf=new TfIdfTransformer();try{$tfidf->fit($sentences);$tfidf->transform($sentences);}catch(\Throwable $e){log_message('error','summarizeText(): TF-IDF transform failed — '.$e->getMessage());return 'Summary unavailable due to processing error.';}$scores=[];foreach($sentences as $i=>$vector){$score=0;foreach($vector as $value){$score+=(float)$value;}$scores[$i]=$score;}arsort($scores);$topIndexes=array_slice(array_keys($scores),0,$maxSentences);sort($topIndexes);$originalSentences=$this->splitIntoSentences($text);$summary=implode(' ',array_map(fn($i)=>$originalSentences[$i],$topIndexes));return $summary;}private function tokenizeSmart($text,$method='nlp'){return $method==='nlp'?$this->tokenizeWithNlpTools($text):$this->tokenizeText($text);}private function tokenizeText($text){$text=strtolower(strip_tags($text));return preg_split('/\W+/',$text,-1,PREG_SPLIT_NO_EMPTY);}public function tokenizeWithNlpTools($content){$tokenizer=new NlpWhitespaceTokenizer();$tokens=$tokenizer->tokenize($content);$this->logger->debug('Tokens: '.print_r($tokens,true));return $tokens;}public function insertFinalScraper($record,$summary){$model=new MarketingModel();if(!isset($record['id'])||!$summary){log_message('error','❌ Missing record ID or summary when calling insertFinalScraper()');return false;}$existing=$model->where('source_id',$record['id'])->first();if($existing){log_message('info',"⚠️ Final scrape already exists for source_id: {$record['id']}");return false;}$cleanSummary=mb_convert_encoding($summary['summary'],'UTF-8','UTF-8');$cleanTitle=isset($record['title'])?$record['title']:word_limiter($cleanSummary,12);$cleanTitle=preg_replace('/[^\p{L}\p{N}\s:;\-]/u','',$cleanTitle);$data=['source_id'=>$record['id'],'title'=>trim($cleanTitle),'summary'=>trim($cleanSummary),'keywords'=>isset($summary['keywords'])?implode(',',$summary['keywords']):'','date_created'=>date('Y-m-d H:i:s'),];$result=$model->insert($data);if($result){log_message('info',"✅ Final scraped content inserted for source_id: {$record['id']}");}else{log_message('error',"❌ Failed to insert final scrape for source_id: {$record['id']}");}return $result;}private function cleanText($text){$text=$this->decodeSpecialCharacters($text);$text=$this->sanitizeRawEmailContent($text);return $this->normalizeUtf8(strip_tags($text));}private function combineScores($featureScore,$keywordScore,$pageRankScore,$semanticDiversityScore){$featureScore=is_numeric($featureScore)?(float)$featureScore:0.0;$keywordScore=is_numeric($keywordScore)?(float)$keywordScore:0.0;$pageRankScore=is_numeric($pageRankScore)?(float)$pageRankScore:0.0;$semanticDiversityScore=is_numeric($semanticDiversityScore)?(float)$semanticDiversityScore:0.0;$combinedScore=0.4*$featureScore+0.2*$keywordScore+0.3*$pageRankScore+0.1*$semanticDiversityScore;$this->logger->debug('✅ Combined Score for sentence: '.$combinedScore);return $combinedScore;}private function buildSimilarityMatrix($sentences,$wordFrequencies){$matrix=[];$sentenceLength=count($sentences);for($i=0;$i<$sentenceLength;$i++){for($j=0;$j<$sentenceLength;$j++){if($i!=$j){$matrix[$i][$j]=$this->calculateSimilarity($sentences[$i],$sentences[$j],$wordFrequencies);}}}return $matrix;}private function calculateSimilarity($sentence1,$sentence2,$wordFrequencies){$sentence1=is_string($sentence1)?strtolower($sentence1):'';$sentence2=is_string($sentence2)?strtolower($sentence2):'';$words1=array_unique(str_word_count($sentence1,1));$words2=array_unique(str_word_count($sentence2,1));$commonWords=array_intersect($words1,$words2);$score=0;foreach($commonWords as $word){$score+=(float)($wordFrequencies[$word]?? 0);}$logWordCount1=count($words1)>0?log(count($words1)):0;$logWordCount2=count($words2)>0?log(count($words2)):0;if($logWordCount1+$logWordCount2==0){return 0;}return $score/($logWordCount1+$logWordCount2);}private function calculateWordFrequencies($content,$stopWords){$frequencies=[];$words=preg_split('/\s+/',strtolower($content));foreach($words as $word){if(!in_array($word,$stopWords)&&strlen($word)>1){$frequencies[$word]=($frequencies[$word]?? 0)+1;}}arsort($frequencies);return $frequencies;}public function decodeMimeHeaderSafe($string){try{return mb_decode_mimeheader($string);}catch(\Throwable $e){log_message('error','decodeMimeHeaderSafe() failed: '.$e->getMessage());return $string;}}private function decodeSpecialCharacters($text){return html_entity_decode($text,ENT_QUOTES|ENT_HTML5,'UTF-8');}public function getScrapesByKeyword($keyword){return $this->marketingModel->getScrapesByKeyword($keyword);}private function getStopWords(){return["a","the","and","of","in","to","is","you","that","it","he","was","for","on","are","as","with","his","they","I","at","be","this","have","from","or","one","had","by","word","but","not","what","all","were","we","when","your","can","said","there","use","an","each","which","she","do","how","their","if","will","up","other","about","out","many","then","them","these","so","some","her","would","make","like","him","into","time","has","look","two","more","write","go","see","number","no","way","could","people","my","than","first","water","been","call","who","oil","its","now","find","long","down","day","did","get","come","made","may","part"];}public function getTopKeywordScores($content,$max=10){if(!is_string($content)){log_message('error','MyMIMarketing L1706 - getTopKeywordScores(): Content must be a string');return[];}$content=$this->normalizeUtf8($content);$sentences=$this->splitIntoSentences($content);if(empty($sentences)){log_message('error','MyMIMarketing L1713 - getTopKeywordScores(): No valid sentences to process');return[];}$tfIdf=new TfIdfTransformer();$tokenized=array_values(array_filter(array_map(function($sentence){$cleaned=strtolower($this->normalizeUtf8(trim($sentence)));$tokens=array_filter(explode(' ',$cleaned),fn($w)=>strlen($w)>1);return count($tokens)>0?$tokens:null;},$sentences)));if(empty($tokenized)||!isset($tokenized[0])||!is_array($tokenized[0])||empty($tokenized[0])){log_message('error','❌ MyMIMarketing L1725 - Tokenized input invalid for TF-IDF. Tokenized: '.json_encode($tokenized));return[];}try{$tfIdf->fit($tokenized);log_message('debug','📊 MyMIMarketing L1731 - TF-IDF Document Preview: '.json_encode(array_slice($tokenized,0,1)));$tfIdf->transform($tokenized);}catch(\Throwable $e){log_message('error','❌ MyMIMarketing L1734 - TF-IDF error: '.$e->getMessage());return[];}$scores=[];foreach($tokenized as $docIndex=>$tokens){foreach($tokens as $token){if(!is_string($token))continue;if(!isset($scores[$token])){$scores[$token]=0.0;}$scores[$token]+=1.0;}}if(empty($scores)){log_message('error','❌ MyMIMarketing L1752 - No TF-IDF scores generated');return[];}arsort($scores);return array_keys(array_slice($scores,0,$max,true));}private function isSemanticallyDifferent($sentence1,$sentence2,$tokens){$tokens1=array_intersect($tokens,str_word_count(strtolower($sentence1),1));$tokens2=array_intersect($tokens,str_word_count(strtolower($sentence2),1));$overlap=count(array_intersect($tokens1,$tokens2));$threshold=2;return $overlap<$threshold;}private function pageRank($matrix,$dampingFactor=0.85,$maxIterations=100,$tolerance=1e-6){$numSentences=count($matrix);if($numSentences==0){return[];}$pagerank=array_fill(0,$numSentences,1/$numSentences);$tempRank=array_fill(0,$numSentences,0);for($iter=0;$iter<$maxIterations;$iter++){for($i=0;$i<$numSentences;$i++){$tempRank[$i]=(1-$dampingFactor)/$numSentences;for($j=0;$j<$numSentences;$j++){if($i!=$j&&isset($matrix[$j][$i])){$matrixRowSum=array_sum($matrix[$j]);if($matrixRowSum!=0){$tempRank[$i]+=$dampingFactor*($matrix[$j][$i]*$pagerank[$j]/$matrixRowSum);}}}}$diff=0;for($i=0;$i<$numSentences;$i++){$diff+=abs($tempRank[$i]-$pagerank[$i]);}if($diff<$tolerance){break;}$pagerank=$tempRank;}return $pagerank;}private function extractTopSentences($sentences,$scores,$topN=5){asort($scores,SORT_NUMERIC);$topSentenceIndexes=array_keys(array_slice($scores,-$topN,$topN,true));$summary=[];foreach($topSentenceIndexes as $index){$summary[]=trim($sentences[$index]);}return $summary;}public function enqueueEmailJob($emailData){$data=['type'=>'email_processing','data'=>json_encode($emailData)];$this->marketingModel->insertJobQueue($data);}private function stripHtmlTags($htmlContent){return strip_tags($htmlContent);}public function social_media(){return['discord'=>$this->socialMedia->discord,'facebook_page'=>$this->socialMedia->facebook_page,'facebook_group'=>$this->socialMedia->facebook_group,'linkedin'=>$this->socialMedia->linkedin,'twitter'=>$this->socialMedia->twitter,'youtube'=>$this->socialMedia->youtube,];}public function department(){$activeCampaigns=$this->marketingModel->getActiveCampaigns();$totalActiveCampaigns=$activeCampaigns['num_rows'];$activePriorityCampaigns=$this->marketingModel->getActivePriorityCampaigns();$totalActivePriorityCampaigns=$activePriorityCampaigns['num_rows'];return['getActiveCampaigns'=>$activeCampaigns['result'],'totalActiveCampaigns'=>$totalActiveCampaigns,'getActivePriorityCampaigns'=>$activePriorityCampaigns['result'],'totalActivePriorityCampaigns'=>$totalActivePriorityCampaigns,];}public function seoCheck(){$uri_string=$this->request->getUri()->getPath();$query=$this->marketingModel->where('url',$uri_string)->first();if(!$query){$data=['url'=>$uri_string,'title'=>str_replace(['_','/'],[' ',' - '],$uri_string),'description'=>"Experience the future of personal finance with MyMI Wallet. We provide advanced budgeting and investment portfolio management solutions, empowering individuals to better manage their finances. Streamline your financial journey with our intuitive online fintech application and service.",'image'=>base_url('/assets/images/Company/MyMI-Wallet-White.png'),];$this->marketingModel->insert($data);$insert_id=$this->marketingModel->getInsertID();$task_info=['task'=>'Page SEO Edit','title'=>str_replace(['_','/'],[' ',' - '],$uri_string),'seo_id'=>$insert_id,'url'=>$uri_string,];$this->assignMarketingTask($task_info);}}public function assignMarketingTask($task_info){$data=['status'=>'Pending','group'=>'Marketing','task'=>$task_info['task'],'title'=>$task_info['title'],'description'=>'Complete SEO for '.$task_info['url'],'url'=>site_url('/Management/Marketing/Page-SEO/'.$task_info['seo_id']),];$this->marketingModel->insertManagementTask($data);}public function autoDistributeHighRelevanceSummaries($minScore=75){$posts=$this->marketingModel->getRecentPosts(10);foreach($posts as $post){if(($post['score']?? 0)>=$minScore){$message="**{$post['title']}**\n\n".word_limiter(strip_tags($post['summary']),60);$this->sendToDiscordNotification($message);}}}public function autoSendToZapier($minScore=75){$posts=$this->marketingModel->getRecentPosts(10);foreach($posts as $post){if(($post['score']?? 0)>=$minScore){$this->sendToZapier('facebook',$post['summary']);}}}public function getPageHeaders(){$getPageSEO=$this->marketingModel->getMarketingPageSeo();$pageSEOData=[];foreach($getPageSEO as $pageSEO){$pageSEOData[]=['page_id'=>$pageSEO['id'],'page_name'=>$pageSEO['page_name'],'page_title'=>$pageSEO['page_title'],'page_url'=>$pageSEO['page_url'],'page_sitemap_url'=>$pageSEO['page_sitemap_url'],'page_internal_url'=>$pageSEO['page_internal_url'],'page_controller'=>$pageSEO['page_controller'],'page_controller_url'=>$pageSEO['page_controller_url'],'page_controller_directory'=>$pageSEO['page_controller_directory'],'page_file_directory'=>$pageSEO['page_file_directory'],'page_image'=>$pageSEO['page_image'],'page_description'=>$pageSEO['page_description'],'page_address'=>$pageSEO['page_address'],'page_city'=>$pageSEO['page_city'],'page_state'=>$pageSEO['page_state'],'page_country'=>$pageSEO['page_country'],'page_zipcode'=>$pageSEO['page_zipcode'],'page_facebook'=>$pageSEO['page_facebook'],'linked'=>$pageSEO['linked'],'functionality'=>$pageSEO['functionality'],'design'=>$pageSEO['design'],'seo'=>$pageSEO['seo'],'ext_links'=>$pageSEO['ext_links'],'grammar'=>$pageSEO['grammar'],'d_optimize'=>$pageSEO['d_optimize'],'load_perf'=>$pageSEO['load_perf'],'additional_notes'=>$pageSEO['additional_notes'],];}return $pageSEOData;}public function getPageHeadersByName($pageName){$getPageSEO=$this->marketingModel->getMarketingPageSeoByName($pageName);$pageSEOData=[];foreach($getPageSEO as $pageSEO){$pageSEOData[]=['page_id'=>$pageSEO['id'],'page_name'=>$pageSEO['page_name'],'page_title'=>$pageSEO['page_title'],'page_url'=>$pageSEO['page_url'],'page_sitemap_url'=>$pageSEO['page_sitemap_url'],'page_internal_url'=>$pageSEO['page_internal_url'],'page_controller'=>$pageSEO['page_controller'],'page_controller_url'=>$pageSEO['page_controller_url'],'page_controller_directory'=>$pageSEO['page_controller_directory'],'page_file_directory'=>$pageSEO['page_file_directory'],'page_image'=>$pageSEO['page_image'],'page_description'=>$pageSEO['page_description'],'page_address'=>$pageSEO['page_address'],'page_city'=>$pageSEO['page_city'],'page_state'=>$pageSEO['page_state'],'page_country'=>$pageSEO['page_country'],'page_zipcode'=>$pageSEO['page_zipcode'],'page_facebook'=>$pageSEO['page_facebook'],'linked'=>$pageSEO['linked'],'functionality'=>$pageSEO['functionality'],'design'=>$pageSEO['design'],'seo'=>$pageSEO['seo'],'ext_links'=>$pageSEO['ext_links'],'grammar'=>$pageSEO['grammar'],'d_optimize'=>$pageSEO['d_optimize'],'load_perf'=>$pageSEO['load_perf'],'additional_notes'=>$pageSEO['additional_notes'],];}return $pageSEOData;}public function postToDiscord($message){$discordWebhookUrl=getenv('DISCORD_WEBHOOK_URL');if(strlen($message)>2000){$message=substr($message,0,1997)."...";}$payload=json_encode(["content"=>$message]);$ch=curl_init($discordWebhookUrl);curl_setopt($ch,CURLOPT_HTTPHEADER,['Content-Type: application/json']);curl_setopt($ch,CURLOPT_POST,1);curl_setopt($ch,CURLOPT_POSTFIELDS,$payload);curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);$response=curl_exec($ch);curl_close($ch);return $response;}public function postToFacebookPage($pageId,$message){try{$response=$this->facebook->post("/{$pageId}/feed",['message'=>$message,],$this->facebook->getAccessToken());return $response->getGraphNode();}catch(Facebook\Exceptions\FacebookResponseException $e){log_message('error','Graph returned an error: '.$e->getMessage());return false;}catch(Facebook\Exceptions\FacebookSDKException $e){log_message('error','Facebook SDK returned an error: '.$e->getMessage());return false;}}public function postToFacebookGroup($groupId,$message){try{$response=$this->facebook->post("/{$groupId}/feed",['message'=>$message,],$this->facebook->getAccessToken());return $response->getGraphNode();}catch(Facebook\Exceptions\FacebookResponseException $e){log_message('error','Graph returned an error: '.$e->getMessage());return false;}catch(Facebook\Exceptions\FacebookSDKException $e){log_message('error','Facebook SDK returned an error: '.$e->getMessage());return false;}}public function sendNotification($type,$viewPath,$data,$targetGroup=null,$socialMedia=[]){$userModel=new UserModel();if($targetGroup){$users=$userModel->where('group',$targetGroup)->findAll();}else{$users=$userModel->findAll();}$viewContent=view($viewPath,$data);$notoCount=0;$emailNotoCount=0;if(in_array('in-app',$type)){foreach($users as $user){$this->sendInAppNotification($user,$viewContent);$notoCount++;}}if(in_array('email',$type)){foreach($users as $user){$this->sendEmailNotification($user,$viewContent);$emailNotoCount++;}}foreach($socialMedia as $platform){switch($platform){case 'facebook':$this->postToFacebook($data['message']);break;case 'twitter':$this->postToTwitter($data['message']);break;case 'linkedin':$this->postToLinkedIn($data['message']);break;case 'discord':$this->postToDiscord($data['message']);break;}}$notificationData=['active'=>1,'message'=>$viewContent,'created_at'=>date('Y-m-d H:i:s'),'created_by'=>session('user_id'),'noto_count'=>$notoCount,'email_noto_count'=>$emailNotoCount,];$this->marketingModel->storeNotification($notificationData);}private function sendInAppNotification($user,$content){$db=\Config\Database::connect();$db->table('user_notifications')->insert(['user_id'=>$user->id,'content'=>$content,'created_at'=>date('Y-m-d H:i:s')]);}private function sendEmailNotification($user,$content){$email=\Config\Services::email();$email->setTo($user->email);$email->setSubject('Notification');$email->setMessage($content);$email->send();}public function postToSocialMedia($content){try{$this->postToFacebook($content);$this->postToTwitter($content);$this->postToLinkedIn($content);}catch(\Throwable $e){$this->logger->error('❌ postToSocialMedia() failed: '.$e->getMessage());}}private function postToFacebook($message){try{$response=$this->facebook->post('/me/feed',['message'=>$message],$this->socialMedia->facebook_access_token);return $response->getGraphNode();}catch(Facebook\Exceptions\FacebookResponseException $e){$this->logger->error('Facebook Graph returned an error: '.$e->getMessage());return false;}catch(Facebook\Exceptions\FacebookSDKException $e){$this->logger->error('Facebook SDK returned an error: '.$e->getMessage());return false;}}public function fetchTweets($query,$count=100){try{$tweets=$this->twitter->get('search/tweets',['q'=>$query,'count'=>$count]);if($this->twitter->getLastHttpCode()===200){$processedTweets=[];foreach($tweets->statuses as $tweet){$processedTweets[]=['tweet_id'=>$tweet->id_str,'content'=>$tweet->text,'author'=>$tweet->user->screen_name,'created_at'=>$tweet->created_at,'url'=>"https://twitter.com/{$tweet->user->screen_name}/status/{$tweet->id_str}"];}foreach($processedTweets as $tweetData){$this->marketingModel->storeScrapedContent(['title'=>$tweetData['content'],'url'=>$tweetData['url'],'content'=>$tweetData['content'],'keywords'=>json_encode([$tweetData['author']]),'scraped_at'=>date('Y-m-d H:i:s')]);}return $processedTweets;}else{throw new \Exception('Failed to fetch tweets: '.$this->twitter->getLastBody());}}catch(\Throwable $th){log_message('error','Error fetching tweets: '.$th->getMessage());return[];}}public function generateContentFromTweets($tweets){$summary=$this->summarizeText(implode(' ',array_column($tweets,'content');$keywords=$this->extractKeywords($summary);return['summary'=>$summary,'keywords'=>$keywords,'platform_content'=>$this->generatePlatformContent($summary,$keywords)];}public function generateFromTempScraper($limit=5){$records=$this->marketingModel->getLatestTempRecords($limit);if(empty($records)){log_message('info','No temp scraper records found to process.');return;}foreach($records as $record){try{log_message('debug','🧪 Processing record ID '.$record['id']);$summary=$this->generateContentFromRaw($record);if($summary){$this->marketingModel->markTempScraperProcessed($record['id']);log_message('info','✅ Processed and stored content for record ID '.$record['id']);}else{log_message('warning','⚠️ Summary was null/empty for record ID '.$record['id']);}}catch(\Throwable $e){log_message('error','❌ Error generating content for record ID '.$record['id'].': '.$e->getMessage());}}}public function postToTwitter($content){try{$response=$this->twitter->post('statuses/update',['status'=>$content]);if($this->twitter->getLastHttpCode()===200){log_message('info','Successfully posted to Twitter: '.$content);return $response;}else{throw new \Exception('Failed to post to Twitter: '.json_encode($response));}}catch(\Throwable $th){log_message('error','Error posting to Twitter: '.$th->getMessage());return false;}}private function postToLinkedIn($message){try{$response=$this->linkedin->post('/people/~/shares',['comment'=>$message,'visibility'=>['code'=>'anyone']],$this->socialMedia->linkedin_access_token);return $response;}catch(Exception $e){$this->logger->error('LinkedIn API returned an error: '.$e->getMessage());return false;}}private function postToBlog($content){$client=new Client(['base_uri'=>$this->siteSettings->wordpress_site_url,]);try{$response=$client->post('/wp-json/wp/v2/posts',['auth'=>[$this->siteSettings->wordpress_username,$this->siteSettings->wordpress_password],'json'=>['title'=>substr($content,0,50),'content'=>$content,'status'=>'publish',],]);if($response->getStatusCode()==201){$this->logger->info('Posted to blog: '.$content);return json_decode($response->getBody(),true);}else{$this->logger->error('Failed to post to blog: '.$response->getBody());return false;}}catch(RequestException $e){$this->logger->error('Blog post request error: '.$e->getMessage());return false;}}public function distributeContentToSocialMedia($content){$twitterPost="� **Stock Market Highlights** �\n";$facebookPost="� **Market Movers Update** �\n";$linkedinPost="� **Today's Market Summary** �\n";$discordPost="� **TRADE ALERTS UPDATE!** �\n";foreach($content['expandedContent']as $post){$twitterPost.=$post."\n";$facebookPost.=$post."\n";$linkedinPost.=$post."\n";$discordPost.=$post."\n";}$this->postToTwitter($twitterPost);$this->postToFacebook($facebookPost);$this->postToLinkedIn($linkedinPost);$this->postToDiscord($discordPost);return['twitter'=>$twitterPost,'facebook'=>$facebookPost,'linkedin'=>$linkedinPost,'discord'=>$discordPost];}public function generateAndPostContent(){$emailSummaries=$this->marketingModel->getEmailSummariesForReview();foreach($emailSummaries as $summary){log_message('info','Generating content for email summary: '.$summary['email_subject']);$content=$this->generateMarketingContent($summary['summary']);log_message('debug','Generated content: '.print_r($content,true));$this->postToSocialMedia($content);$this->postToBlog($content);$this->marketingModel->updateEmailStatus($summary['email_identifier'],'Posted');log_message('info','Updated email status to Posted for: '.$summary['email_subject']);}}public function generateMarketingContent():void{$topStories=$this->marketingModel->getTopStories(10);$count=0;foreach($topStories as $story){if(empty(trim($story['title']?? ''))){log_message('debug','⏭ Skipped record ID '.$story['id'].' - no title provided.');continue;}if($count>=5){break;}$headline=$story['title'];$url=$story['source_url']?? '#';$summary=$this->generateSummary($story);$hashtags=$this->extractHashtags($story['title'].' '.$story['email_body']);$platformPosts=['discord'=>"**{$headline}**\n{$summary}\n🔗 {$url}\n{$hashtags}",'twitter'=>"{$headline} {$url} {$hashtags}",'linkedin'=>"{$headline}\n{$summary}\nRead more: {$url} {$hashtags}",'facebook'=>"{$headline}\n{$summary}\n{$url} {$hashtags}",'email'=>['subject'=>$headline,'body'=>"{$summary}\n\nRead More: {$url}\n{$hashtags}",],];$this->marketingModel->storeGeneratedContent($story['id'],$platformPosts);$count++;}}private function logScrapeError($url,$error){log_message('error',"Scraping failed for URL: $url, Error: $error");}public function generateContentFromData($title,$content,$tags){$summary=$this->summarizeContent($content);return $title." - ".$summary." Tags: ".implode(', ',$tags);}public function generateContentFromScrapedData($scrapedData,$platform=null){if(empty($scrapedData)||!is_array($scrapedData)){log_message('error','❌ generateContentFromScrapedData() called with empty or invalid $scrapedData');return[];}$cleanedSummaries=[];foreach($scrapedData as $record){$rawContent=$record['content']?? '';$cleaned=$this->sanitizeRawEmailContent($rawContent);if(strlen($cleaned)<300||substr_count($cleaned,' ')<20){log_message('warning','[MyMIMarketing] Skipped record due to short or unstructured content (Title: '.($record['title']?? 'Untitled').')');continue;}try{$summaryData=$this->summarizeContent($cleaned);if(!is_array($summaryData)||empty($summaryData['summary'])){log_message('warning','⚠️ generateContentFromScrapedData(): Summary was null/empty for record title: '.($record['title']?? 'Untitled'));continue;}$headline=$this->generateHeadline($summaryData['summary']);$platformPosts=$this->generatePlatformContent($summaryData['summary'],$summaryData['tokens']??[]);$payload=['title'=>$record['title']?? $headline,'source'=>$record['url']?? 'unknown','summary'=>$summaryData['summary'],'keywords'=>$summaryData['tokens']??[],'headline'=>$headline,'platform_content'=>$platformPosts,'platform'=>$platform,'created_on'=>date("Y-m-d H:i:s"),];$this->marketingModel->storeGeneratedContent($record['id']?? null,$platformPosts);$cleanedSummaries[]=$payload;}catch(\Throwable $e){log_message('error','❌ Exception in generateContentFromScrapedData(): '.$e->getMessage());}}return $cleanedSummaries;}public function generateContentFromLargeText($content,$tags){if(empty($content)){log_message('error','Content is empty in generateContentFromLargeText.');return['summary'=>'','keywords'=>[],'platforms_content'=>[],];}$tokenizer=new WhitespaceTokenizer();$samples=[$tokenizer->tokenize($content)];log_message('debug','Tokenized samples: '.print_r($samples,true));if(empty($samples)||!isset($samples[0])||!is_array($samples[0])||empty($samples[0])){log_message('error','🚫 Empty or malformed document array before TF-IDF.');return['summary'=>'','keywords'=>[],'platforms_content'=>[],];}try{$tfidf=new TfIdfTransformer();$tfidf->fit($samples);$tfidf->transform($samples);log_message('debug','TfIdf transformation successful.');}catch(\Exception $e){log_message('error','TfIdfTransformer failed: '.$e->getMessage());return['summary'=>'','keywords'=>[],'platforms_content'=>[],];}$summary=$this->summarizeText($content);$keywords=$this->extractKeywords($content);$platforms_content=$this->generatePlatformContent($summary,$keywords);return['summary'=>$summary,'keywords'=>$keywords,'platforms_content'=>$platforms_content,];}public function generateCanvaVideo(){$scriptResponse=$this->generateVoiceoverScript();if(!$scriptResponse['status']==='success'){return $this->respond(['status'=>'error','message'=>'Voiceover script not found'],404);}$scriptText=$scriptResponse['script'];$canvaApiUrl="https://api.canva.com/v1/projects";$headers=['Authorization: Bearer YOUR_CANVA_API_KEY','Content-Type: application/json'];$payload=['title'=>'MyMI Trade Alerts Video','template'=>'YOUR_CANVA_TEMPLATE_ID','elements'=>['text'=>$scriptText,'voiceover'=>base_url('uploads/voiceover.mp3')]];$ch=curl_init($canvaApiUrl);curl_setopt($ch,CURLOPT_HTTPHEADER,$headers);curl_setopt($ch,CURLOPT_POST,true);curl_setopt($ch,CURLOPT_POSTFIELDS,json_encode($payload));curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);$response=curl_exec($ch);curl_close($ch);return $this->respond(['status'=>'success','message'=>'Video generated','video_url'=>json_decode($response)->video_url]);}public function generateEnhancedContent($voiceScript){$summary=$this->summarizeContent($voiceScript);$checkedContent=$this->spellCheckAndRefine($summary);$expandedContent=$this->contentGenerator($checkedContent);return['summary'=>$summary,'checkedContent'=>$checkedContent,'expandedContent'=>$expandedContent];}private function generatePrimaryContent($scrapedData){$content="";foreach($scrapedData as $data){$content.="Source: {$data['source']}\n";$content.="Title: {$data['title']}\n";$content.="Content: ".substr($data['content'],0,200)."...\n";$content.="Link: ".($data['url']?? 'N/A')."\n\n";}return $content;}public function generatePlatformContent($summary,$keywords,$mediaAssets=[]){$facebookContent="Facebook Post: ".$summary."\n\n"."Related: #".implode(' #',$keywords);$twitterContent="Twitter: ".substr($summary,0,280)."\n\n#".implode(' #',$keywords);$stocktwitsContent="StockTwits: ".substr($summary,0,250)."\n\n".implode(' ',$keywords);$discordContent="Discord: ".$summary."\n\nJoin the discussion! #".implode(' #',$keywords);$blogContent="Blog Post\n\n".$summary."\n\nKeywords: ".implode(', ',$keywords);$emailContent="Email Notification: ".$summary."\n\nRead more on our blog.";$browserNotificationContent="New Update: ".substr($summary,0,100)."... Click to learn more.";$tiktokScript=$this->generateTikTokScript($summary,$keywords,$mediaAssets);$youtubeScript=$this->generateYouTubeScript($summary,$keywords,$mediaAssets);return['Facebook'=>$facebookContent,'Twitter'=>$twitterContent,'StockTwits'=>$stocktwitsContent,'Discord'=>$discordContent,'Blog'=>$blogContent,'Email'=>$emailContent,'BrowserNotification'=>$browserNotificationContent,'TikTok'=>$tiktokScript,'YouTube'=>$youtubeScript];}public function generateSocialPost(array $summary):array{$text=$summary['summary']?? '';$keywords=$summary['keywords']??[];$hashtags=implode(' ',array_map(function($word){return '#'.ucfirst(trim($word));},array_slice($keywords,0,5)));return['twitter'=>substr("{$text} {$hashtags}",0,280),'facebook'=>"{$text}\n\n{$hashtags}",'linkedin'=>"{$text}\n\n#StayInformed {$hashtags}",'discord'=>"**News Summary:**\n{$text}\n\n{$hashtags}",];}private function generateSocialMediaContent($scrapedData){$facebookContent="Facebook: ";$twitterContent="Twitter: ";$linkedinContent="LinkedIn: ";foreach($scrapedData as $data){$facebookContent.=$data['title']." ".($data['url']?? '')."\n";$twitterContent.=$data['title']." ".($data['url']?? '')."\n";$linkedinContent.=$data['title']." ".($data['url']?? '')."\n";}return['Facebook'=>$facebookContent,'Twitter'=>$twitterContent,'LinkedIn'=>$linkedinContent,];}protected function generateSummary(array $story):string{return substr(strip_tags($story['email_body']?? ''),0,250).'...';}public function generateTikTokScript($summary,$keywords,$mediaAssets=[]){$hook="Did you know?";$cta="Follow us for more updates!";$mediaInclusion=!empty($mediaAssets)?"Include these images/videos: ".implode(", ",$mediaAssets):"";return"TikTok Video Script:\n1. Hook: \"{$hook}\"\n2. Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";}public function generateYouTubeScript($summary,$keywords,$mediaAssets=[]){$hook="Breaking news in the world of finance...";$cta="Like, subscribe, and share for more updates!";$mediaInclusion=!empty($mediaAssets)?"Include these images/videos: ".implode(", ",$mediaAssets):"";return"YouTube Video Script:\n1. Hook: \"{$hook}\"\n2. Detailed Summary: {$summary}\n3. Media: {$mediaInclusion}\n4. CTA: {$cta}";}public function generateVoiceoverAudio($text){$client=new TextToSpeechClient();$input=new SynthesisInput();$input->setText($text);$voice=new VoiceSelectionParams();$voice->setLanguageCode('en-US');$voice->setSsmlGender('MALE');$audioConfig=new AudioConfig();$audioConfig->setAudioEncoding(AudioEncoding::MP3);$response=$client->synthesizeSpeech($input,$voice,$audioConfig);$audioContent=$response->getAudioContent();$filePath=WRITEPATH.'uploads/voiceover.mp3';file_put_contents($filePath,$audioContent);return base_url('uploads/voiceover.mp3');}public function generateVoiceoverScript(){$tradeAlerts=$this->alertsModel->getFilteredTradeAlerts(['start'=>date('Y-m-d 00:00:00'),'end'=>date('Y-m-d 23:59:59')])->get()->getResultArray();if(empty($tradeAlerts)){return $this->respond(['status'=>'error','message'=>'No trade alerts found for today.'],404);}$script="**Voiceover Script: MyMI Trade Alerts - Top Stock Movers**\n\n[INTRO]\n";$script.="Welcome to today’s MyMI Trade Alerts! We’re breaking down the hottest stocks in the market based on momentum, volume, and breakout potential. Let’s jump right in!\n\n";foreach($tradeAlerts as $alert){$script.="**[{$alert['ticker']} - {$alert['company']}]**\n";$script.="**Price:** \${$alert['price']}  |  **% Change:** {$alert['change']}%  |  **Volume:** {$alert['volume']}M\n";$script.="� 52-Week High: \${$alert['high']}  |  � 52-Week Low: \${$alert['low']}\n";$script.="Market Cap: {$alert['market_cap']}\n\n";}$script.="[OUTRO]\nThat’s it for today’s MyMI Trade Alerts! Don’t forget to like, subscribe, and stay tuned for more market insights. Drop your thoughts in the comments—what’s your top stock pick today? See you in the next update!\n";return $this->respond(['status'=>'success','script'=>$script]);}public function generateStockInformation($cuID){$MyMIInvestments=new MyMIInvestments();$investmentData=$MyMIInvestments->getInvestmentDashboard($cuID);$symbols=$this->getSymbolsByAssetType($investmentData['getSymbols']);$forecastData=[];$riskData=[];foreach($symbols as $type=>$symbolList){switch($type){case 'stocks':$forecastData['stocks']=$MyMIInvestments->performARIMAForecast($symbolList);$riskData['stocks']=$MyMIInvestments->generateRiskManagementTools($cuID,'stocks');break;case 'etfs':$forecastData['etfs']=$MyMIInvestments->performARIMAForecast($symbolList);$riskData['etfs']=$MyMIInvestments->generateRiskManagementTools($cuID,'etfs');break;case 'crypto':$forecastData['crypto']=$MyMIInvestments->performARIMAForecast($symbolList);$riskData['crypto']=$MyMIInvestments->generateRiskManagementTools($cuID,'crypto');break;}}$content=$this->generateContent($forecastData,$riskData);return $content;}private function getSymbolsByAssetType($symbols){$result=['stocks'=>[],'etfs'=>[],'crypto'=>[]];foreach($symbols as $symbol){if(preg_match('/^[A-Z]{1,5}$/',$symbol)){$result['stocks'][]=$symbol;}elseif(preg_match('/^[A-Z]{1,5}$/',$symbol)){$result['etfs'][]=$symbol;}else{$result['crypto'][]=$symbol;}}return $result;}private function generateContent($forecastData,$riskData){$content="";if(!empty($forecastData['stocks'])){$content.="### Stock Investment Forecast\n";foreach($forecastData['stocks']as $symbol=>$forecast){$content.="- **{$symbol}**: ".json_encode($forecast)."\n";}}if(!empty($forecastData['etfs'])){$content.="### ETF Investment Forecast\n";foreach($forecastData['etfs']as $symbol=>$forecast){$content.="- **{$symbol}**: ".json_encode($forecast)."\n";}}if(!empty($forecastData['crypto'])){$content.="### Crypto Investment Forecast\n";foreach($forecastData['crypto']as $symbol=>$forecast){$content.="- **{$symbol}**: ".json_encode($forecast)."\n";}}$content.="\n### Risk Management Insights\n";foreach($riskData as $type=>$riskMetrics){$content.="#### ".ucfirst($type)." Risks\n";foreach($riskMetrics as $riskMetric=>$details){$content.="- **{$riskMetric}**: ".json_encode($details)."\n";}}return $content;}public function getRecentPosts($limit=5){return $this->marketingModel->getRecentPosts($limit);}public function pullFinancialNews():void{$response=$this->client->get('https://www.marketaux.com/api/v1/news/all',['query'=>['api_token'=>getenv('marketaux.apiKey'),'language'=>'en','country'=>'us','published_after'=>date('Y-m-d\TH:i:s\Z',strtotime('-1 hour')),'limit'=>50,],]);$data=json_decode($response->getBody(),true);if(isset($data['data'])){foreach($data['data']as $story){$this->marketingModel->saveNews($story);}}}public function rankBufferCandidates(){$buffer=$this->marketingModel->fetchBufferPostsForScoring();foreach($buffer as $post){$keywords=$this->extractKeywords($post['summary']);$score=array_sum(array_column($keywords,'score'));$tagScore=min($score/10,10);$this->marketingModel->updateBufferItem($post['id'],['tag_score'=>$tagScore]);}}public function rankNewsArticles():void{$unrankedNews=$this->marketingModel->getUnrankedNews();foreach($unrankedNews as $news){$content=strtolower(($news['title']?? '').' '.($news['email_subject']?? '').' '.($news['email_body']?? ''));$words=str_word_count(strip_tags($content),1);$wordFreq=array_count_values($words);$filtered=array_filter($wordFreq,fn($freq,$word)=>strlen($word)>3&&$freq>1,ARRAY_FILTER_USE_BOTH);arsort($filtered);$score=array_sum(array_values($filtered));$topKeywords=array_slice(array_keys($filtered),0,5);$this->marketingModel->updateRankedNews($news['id'],$score,implode(',',$topKeywords));}}public function summarizeMultipleArticles(array $articles):string{$allContent='';foreach($articles as $article){$content=$article['content']?? '';$allContent.=strip_tags($content).' ';}if(empty(trim($allContent))){log_message('error','summarizeMultipleArticles() received empty content.');return 'No content available to summarize.';}$summaryData=$this->summarizeContent($allContent);return is_array($summaryData)&&isset($summaryData['summary'])?$summaryData['summary']:substr($allContent,0,300).'...';}} ?><?php namespace App\Models;use CodeIgniter\Model;use Phpml\FeatureExtraction\TfIdfTransformer;use Phpml\Tokenization\WhitespaceTokenizer;class MarketingModel extends Model{protected $table='bf_marketing_scraper';protected $primaryKey='id';protected $useAutoIncrement=true;protected $returnType='object';protected $useSoftDeletes=false;protected $allowedFields=['title','description','created_on','modified_on','status','type','day','time','activity','link','url','summary','content','email_identifier','email_date','email_sender','email_subject','email_body','email_attachments','keywords','scraped_at','links','images','videos','metadata','structured_data','sched_id','escalated','audience_type','stage','name','assigned_on','assigned_to','completed_on','scheduled_at','primary_content','secondary_content','html_content','voice_script','shared','shared_users','blog','in_app','email','discord','facebook','linkedin','telegram','twitter','website','promotional_links','facebook_message','linkedin_message','discord_message','stocktwits_message','tiktok_message','youtube_message','email_message','additional_info','image_paths'];protected $useTimestamps=true;protected $createdField='created_on';protected $updatedField='modified_on';public function addMarketingCampaign($campaignData){log_message('debug','MarketingModel L206 - $marketingData: '.(print_r($campaignData,true)));$dbData=['beta'=>$campaignData['beta'],'config_mode'=>$campaignData['config_mode'],'form_mode'=>$campaignData['form_mode'],'escalated'=>$campaignData['escalated'],'created_by'=>$campaignData['user_id'],'user_id'=>$campaignData['user_id'],'user_email'=>$campaignData['user_email'],'username'=>$campaignData['username'],'assigned_to'=>$campaignData['assigned_to'],'assigned_on'=>$campaignData['date'].' - '.$campaignData['time'],'name'=>$campaignData['campaign_name'],'promotional_links'=>$campaignData['promotionalLinks'],'overall_campaign_description'=>$campaignData['overall_campaign_description'],'voice_script'=>$campaignData['voice_script'],'facebook_message'=>$campaignData['facebookMessage'],'linkedin_message'=>$campaignData['linkedinMessage'],'discord_message'=>$campaignData['discordMessage'],'stocktwits_message'=>$campaignData['stocktwitsMessage'],'tiktok_message'=>$campaignData['tiktokMessage'],'youtube_message'=>$campaignData['youtubeMessage'],'email_message'=>$campaignData['emailMessage'],'additional_info'=>$campaignData['additionalInfo'],'hashtags'=>$campaignData['hashtags'],];log_message('debug','MarketingModel L206 - $marketingData: '.(print_r($dbData,true)));if($this->db->table('bf_marketing_campaigns')->insert($dbData)){log_message('info','Campaign created successfully.');return $this->getInsertID();}else{log_message('error','DB Insert Error: '.json_encode($this->errors()));return false;}}public function addMarketingSchedule($data){$data['zapier_webhook_url']=$data['zapier_webhook_url']?? null;$data['post_status']='pending';$this->db->table('bf_marketing_schedule')->insert($data);return $this->db->insertID();}public function addSubscriber($subscriberData){if($this->db->table('bf_users_subscribers')->insert($subscriberData)){log_message('info','Subscriber added successfully.');return true;}else{log_message('error','DB Insert Error: '.json_encode($this->errors()));return false;}}public function cleanHtmlEmailContent($raw):string{$raw=is_string($raw)?$raw:'';$decoded=quoted_printable_decode($raw);$decoded=is_string($decoded)?$decoded:'';$text=strip_tags($decoded);$text=preg_replace('/\s+/',' ',str_replace(["\r","\n","\t",'&nbsp;'],' ',$text));return trim(substr($text,0,5000));}public function copyMarketingCampaign($marketingData){unset($marketingData['id']);if($this->insert($marketingData)){log_message('info','Campaign copied successfully.');return $this->getInsertID();}else{log_message('error','DB Insert Error: '.json_encode($this->errors()));return false;}}public function countBlogs(){return $this->db->table('bf_marketing_blog_posts')->countAllResults();}public function countNewlyInsertedToday():int{return $this->where('DATE(scraped_at)',date('Y-m-d'))->countAllResults();}public function createSlug($title){$slug=url_title($title,'-',true);$existing=$this->db->table('bf_marketing_blog_posts')->where('slug',$slug)->countAllResults();return $existing?$slug.'-'.uniqid():$slug;}public function deleteMarketingCampaign($id){if($this->delete($id)){log_message('info','Campaign deleted successfully.');return true;}else{log_message('error','DB Delete Error: '.json_encode($this->errors()));return false;}}public function deleteSchedule($id){return $this->db->table('bf_marketing_schedule')->where('id',$id)->delete();}public function editMarketingCampaign($marketingData){if($this->update($marketingData['id'],$marketingData)){log_message('info','Campaign updated successfully.');return true;}else{log_message('error','DB Update Error: '.json_encode($this->errors()));return false;}}public function extractKeywords($text){if(empty($text)||strlen(trim($text))<50){return[];}$tokenizer=new WhitespaceTokenizer();$tokens=array_filter($tokenizer->tokenize($text));if(empty($tokens)){return[];}$documents=[$tokens];$tfidf=new TfIdfTransformer();try{$tfidf->transform($documents);}catch(\Exception $e){log_message('error','TfIdfTransformer failed: '.$e->getMessage());return[];}$keywordScores=[];foreach($documents[0]as $word=>$score){$keywordScores[$word]=$score;}arsort($keywordScores);return array_slice(array_keys($keywordScores),0,10);}public function fetchBufferPaginated($page=1,$limit=20){$offset=($page-1)*$limit;$builder=$this->db->table('bf_marketing_buffer')->where('status !=','promoted')->orderBy('tag_score','DESC')->limit($limit,$offset);$results=$builder->get()->getResultArray();$total=$this->db->table('bf_marketing_buffer')->where('status !=','promoted')->countAllResults();return['data'=>$results,'pagination'=>['page'=>$page,'pages'=>ceil($total/$limit),]];}public function fetchBufferPaginatedWithFilters(array $params=[]){$page=$params['page']?? 1;$limit=$params['limit']?? 20;$offset=($page-1)*$limit;$keyword=$params['keyword']?? null;$category=$params['category']?? null;$minTagScore=$params['min_tag_score']?? 0;$onlySuggested=$params['only_suggested']?? false;$builder=$this->db->table('bf_marketing_buffer')->where('status !=','promoted');if(!empty($keyword)){$builder->like('keyword',$keyword);}if(!empty($category)){$builder->where('category',$category);}if(!empty($minTagScore)){$builder->where('tag_score >=',$minTagScore);}if($onlySuggested){$builder->where('auto_suggest',1);}$totalQuery=clone $builder;$total=$totalQuery->countAllResults(false);$results=$builder->orderBy('tag_score','DESC')->limit($limit,$offset)->get()->getResultArray();return['data'=>$results,'pagination'=>['page'=>$page,'limit'=>$limit,'pages'=>ceil($total/$limit),'total'=>$total,],];}public function fetchBufferPostsForReview($limit=25){return $this->db->table('bf_marketing_buffer')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function getBufferItem($id){return $this->db->table('bf_marketing_buffer')->where('id',$id)->get()->getRowArray();}public function getPendingAutoSuggested($limit=5){return $this->db->table('bf_marketing_buffer')->where('status','pending')->where('auto_suggest',1)->orderBy('tfidf_score','DESC')->limit($limit)->get()->getResultArray();}public function getPendingScheduledPosts($currentTimestamp){return $this->db->table('bf_marketing_schedule')->where('post_time <=',$currentTimestamp)->where('post_status','pending')->get()->getResult();}public function getPendingScraperSummaries($limit=10){return $this->db->table('bf_marketing_scraper')->where('status',null)->orWhere('status','')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function getProcessedEmails($date=null){$builder=$this->select('email_identifier');if($date){$builder->where('DATE(email_date)',$date);}$results=$builder->get()->getResultArray();$identifiers=[];foreach($results as $row){if(!empty($row->email_identifier)){$identifiers[]=$row->email_identifier;}}return $identifiers;}public function findBufferItem($id){return $this->db->table('bf_marketing_buffer')->where('id',$id)->get()->getRowArray();}public function findFinalizedById($id){return $this->db->table('bf_marketing_scraper')->where('id',$id)->get()->getRowArray();}public function getActiveCampaigns(){$builder=$this->db->table('bf_marketing_campaigns');$num_rows=$builder->where('status',1)->countAllResults(false);$result=$builder->where('status',1)->get()->getResultArray();return['result'=>$result,'num_rows'=>$num_rows];}public function getActiveIdeas(){return $this->db->table('bf_marketing_ideas')->where('status !=','approved')->get()->getResultArray();}public function getActivePriorityCampaigns(){$builder=$this->db->table('bf_marketing_campaigns');$num_rows=$builder->where('status',1)->where('escalated',1)->countAllResults(false);$result=$builder->where('status',1)->where('escalated',1)->get()->getResultArray();return['result'=>$result,'num_rows'=>$num_rows];}public function getApprovedBufferWithoutSchedule(){return $this->db->table('bf_marketing_buffer')->where('status','approved')->where('scheduled_at IS NULL',null,false)->where('schedule_interval >',0)->orderBy('tag_score','DESC')->limit(10)->get()->getResultArray();}public function getApprovedLogos(){return $this->db->table('bf_company_logos')->get()->getResultArray();}public function getBlogPostBySlug($slug){return $this->db->table('bf_marketing_blog_posts')->where('slug',$slug)->get()->getRow();}public function getBlogPostDetails($id){return $this->find($id);}public function getBlogPosts(){return $this->where('type','Email/Newsletters')->limit(50)->get()->getResultArray();}public function getBlogs(){return $this->db->table('bf_marketing_blog_posts')->orderBy('created_on','DESC')->get()->getResult();}public function getBufferItems($limit=50){return $this->builder()->where('status','pending')->orderBy('score','DESC')->limit($limit)->get()->getResultArray();}public function getCampaignById($campaign_id){return $this->db->table('bf_marketing_campaigns')->where('id',$campaign_id)->get()->getResultArray();}public function getCampaignsBySchedId($accountid){return $this->db->table('bf_marketing_campaigns')->where('sched_id',$accountid)->get()->getResultArray();}public function getDailyLogsByDate($date){return $this->db->table('bf_marketing_scraper')->where('DATE(created_on)',$date)->get()->getResult();}public function getEmailRecordById($id){return $this->db->table('bf_marketing_temp_scraper')->where('id',$id)->get()->getRowArray();}public function getEmailByMessageId($messageId){return $this->db->table('bf_marketing_temp_scraper')->where('email_identifier',$messageId)->get()->getRowArray();}public function getEmailContentsForNewsletter(){return $this->where('include_newsletter',false)->limit(50)->get()->getResultArray();}public function getEmailsMissingTitleOrUrl($limit=20){return $this->db->table('bf_marketing_temp_scraper')->where('(title IS NULL OR title = "" OR url IS NULL OR url = "")',null,false)->orderBy('date_scraped','DESC')->limit($limit)->get()->getResultArray();}public function getEmailSummariesForReview(){return $this->where('status','In Review')->limit(50)->get()->getResultArray();}public function getExchangeTokenById($id){return $this->db->table('bf_exchanges_assets')->where('id',$id)->get()->getRowArray();}public function getExistingLogoBySymbol($symbol){return $this->db->table('bf_company_logos')->where('symbol',$symbol)->get()->getRow();}public function getFeatures(){return $this->db->table('bf_users_memberships')->where('active',1)->orderBy('feature_level','ASC')->orderBy('feature_name','ASC')->get()->getResultArray();}public function getGeneratedContent($postId){return $this->db->table('bf_marketing_campaigns')->where('sched_id',$postId)->get()->getRowArray();}public function getGeneratedPostsBySourceId($id){$row=$this->db->table('bf_marketing_scraper')->where('source_id',$id)->get()->getRowArray();if(!$row||empty($row['platforms']))return[];$decoded=json_decode($row['platforms'],true);if(!is_array($decoded))return[];return $decoded;}public function getLatestGeneratedSummaries($limit=25){return $this->db->table('bf_marketing_scraper')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function getLatestNewsletterDraft(){return $this->db->table('bf_marketing_newsletters')->orderBy('created_at','DESC')->first();}public function getLatestTempRecords($limit=5){return $this->db->table('bf_marketing_temp_scraper')->where('status','In Review')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function getLatestUnprocessedEmails($limit=10){return $this->db->table('bf_marketing_temp_scraper')->where('status','In Review')->orderBy('scraped_at','DESC')->limit($limit)->get()->getResultArray();}public function getMarketingBuffer($status='Pending'){return $this->builder()->where('status',$status)->orderBy('created_at','DESC')->get()->getResultArray();}public function getMarketingPageSeoByName($pageTitle){return $this->where('page_name',$pageTitle)->get()->getResultArray();}public function getMarketingTeam(){$result=$this->db->table('bf_management_positions')->where('department','Marketing')->get()->getResultArray();return $result;}public function getNewsArticles(){$result=$this->select('articles_json')->first();return json_decode($result->articles_json ?? '[]',true);}public function getNewEmails(){return $this->db->table('bf_marketing_raw_emails')->where('status','unprocessed')->get()->getResultArray();}public function getNewsPosts(){return $this->where('type','news_post')->limit(50)->get()->getResultArray();}public function getNextScheduledPost(){return $this->db->table('bf_marketing_buffer')->where('status','approved')->where('tag_score >=',7.0)->orderBy('tag_score','DESC')->limit(1)->get()->getRowArray();}public function getRecentPosts($limit=5){$results=$this->asObject()->select("id, title, category, created_at, blog_content")->orderBy('created_at','DESC')->limit($limit)->findAll();log_message('info','MarketingModel L437 - $result Array: '.(print_r($results,true)));foreach($results as $r){$r->short_description=substr(strip_tags($r->blog_content ?? 0),0,150);}return $results;}public function getRecentScrapes(){return $this->db->table('bf_marketing_temp_scraper')->orderBy('scraped_at','DESC')->limit(5)->get()->getResult();}public function getRecentSummaries($limit=5){return $this->db->table('bf_marketing_scraper')->select('id, title, summary, keywords, scraped_at')->where("CHAR_LENGTH(summary) >=",100)->where("summary LIKE",'% % % % % % % % % %')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function getRecentUnprocessedTempEmails($limit=5){return $this->db->table('bf_marketing_temp_scraper')->where('status','In Review')->orderBy('id','DESC')->limit($limit)->get()->getResultArray();}public function getScheduledBufferPosts($timestamp){return $this->db->table('bf_marketing_buffer')->where('status','approved')->where('scheduled_at <=',$timestamp)->orderBy('scheduled_at','ASC')->limit(3)->get()->getResultArray();}public function getScheduledCampaigns(){return $this->db->table('bf_marketing_newsletters')->where('status','scheduled')->where('scheduled_date <=',date('Y-m-d H:i:s'))->get()->getResultArray();}public function getScheduleByDay($day){return $this->db->table('bf_marketing_calendar')->where('day',ucfirst($day))->get()->getResultArray();}public function getScheduleById($id){return $this->db->table('bf_marketing_schedule')->where('id',$id)->get()->getRow();}public function getScrapesByDate($date){return $this->db->table('bf_marketing_temp_scraper')->where('DATE(scraped_at)',$date)->orderBy('scraped_at','DESC');if($limit){$builder->limit($limit);}return $builder->get()->getResultArray();}public function getScrapesByKeyword($keyword){return $this->db->table('bf_marketing_scraper')->like('summary',$keyword)->orLike('keywords',$keyword)->orderBy('created_on','DESC')->limit(10)->get()->getResultArray();}public function getTodaysNewsContent($limit=10){$builder=$this->db->table('bf_marketing_temp_scraper')->where('DATE(scraped_at)',date('Y-m-d'))->where('type !=','todays_story')->orderBy('scraped_at','DESC')->limit($limit);$query=$builder->get();$results=$query->getResultArray();if(empty($results)){log_message('info','No scraped content found for today.');}return $results;}public function getTodaysScrapedContent(){return $this->db->table('bf_marketing_temp_scraper')->where('DATE(scraped_at)',date('Y-m-d'))->orderBy('feature_score','DESC')->get()->getResultArray();}public function getTodaysStory(){return $this->db->table('bf_marketing_temp_scraper')->where('type','todays_story')->where('DATE(scraped_at)',date('Y-m-d'))->orderBy('scraped_at','DESC')->get()->getRowArray();}public function getTopBufferPosts($limit=5,$minTagScore=7.5){return $this->builder('bf_marketing_buffer')->where('status','approved')->where('tag_score >=',$minTagScore)->orderBy('tag_score','DESC')->limit($limit)->get()->getResultArray();}public function getTopStories($limit=10){return $this->db->table('bf_marketing_scraper')->where('status','pending')->where('title IS NOT NULL')->where('title !=','')->orderBy('feature_score','DESC')->limit($limit)->get()->getResultArray();}public function getTopTempRecords($limit=5){return $this->db->table('bf_marketing_temp_scraper')->where('title IS NOT NULL')->orderBy('created_at','desc')->limit($limit)->get()->getResultArray();}public function getUpcomingSchedule(){return $this->db->table('bf_marketing_schedule')->select('id, post_date, completed, GROUP_CONCAT(DISTINCT platform ORDER BY platform ASC SEPARATOR ", ") as platforms, MIN(content_subject) as subjects, MIN(content_description) as descriptions')->where('post_date >=',date('Y-m-d'))->groupBy('post_date')->orderBy('post_date','ASC')->get()->getResultArray();}public function getUpcomingEarnings(){$builder=$this->db->where('bf_investment_calendar')->where('date >=',date('Y-m-d'))->where('event_type','Earnings')->orderBy('date','ASC')->get()->getResultArray();log_message('debug','MarketingModel L211 - getUpcomingEvents $builder Array: '.(print_r($builder,true)));return $builder;}public function getValidUnprocessedEmails($limit=10){$builder=$this->db->table('bf_marketing_temp_scraper');$builder->where('processed',0);$builder->limit($limit*2);$query=$builder->get();$results=$query->getResultArray();$valid=[];foreach($results as $row){$id=$row['id'];if(empty($row['title'])){log_message('debug',"🪓 Skipping record ID {$id} — Missing title.");continue;}if(empty($row['content'])||strlen(strip_tags($row['content']))<100){log_message('debug',"🪓 Skipping record ID {$id} — Content empty or too short.");continue;}$textContent=strip_tags($row['content']);$htmlRatio=strlen($textContent)/strlen($row['content']?? '');if($htmlRatio<0.3){log_message('debug',"🪓 Skipping record ID {$id} — HTML-dominant content ({$htmlRatio}).");continue;}$valid[]=$row;if(count($valid)>=$limit){break;}}return $valid;}public function getValidUnprocessedEmailsFromToday($limit=10){return $this->db->table('bf_marketing_temp_scraper')->where('DATE(scraped_at)',date('Y-m-d'))->where('content IS NOT NULL',null,false)->where('title IS NOT NULL',null,false)->where('CHAR_LENGTH(content) >',250)->orderBy('id','DESC')->limit($limit)->get()->getResultArray();}public function incrementRetryCount($id){return $this->db->table('bf_marketing_schedule')->where('id',$id)->set('retry_count','retry_count + 1',false)->update(['last_attempt_at'=>date('Y-m-d H:i:s')]);}public function insertBufferItem(array $summary){$MyMIMarketing=new \App\Libraries\MyMIMarketing();$scoreData=$MyMIMarketing->getTopKeywordScores($summary['summary']);$threshold=getenv('MARKETING_TFIDF_THRESHOLD')?:7.5;$bufferRecord=['keyword'=>$scoreData['top_keyword']?? 'general','summary'=>$summary['summary'],'score'=>$scoreData['score']?? 0,'tag_score'=>$scoreData['tag_score']?? 0,'category'=>$scoreData['category']?? 'Uncategorized','status'=>'pending','tfidf_score'=>$scoreData['tfidf_score']?? 0,'auto_suggest'=>($scoreData['tfidf_score']?? 0)>=$threshold?1:0,'platforms'=>json_encode(['discord'=>true,'linkedin'=>true,'x'=>false,'email'=>false,]),'created_at'=>date('Y-m-d H:i:s'),];return $this->insert($bufferRecord);}public function insertFinalScraper(array $record,array $summary){$data=['source_id'=>$record['id'],'title'=>$record['title']?? '(No Title)','summary'=>$summary['summary']?? '','keywords'=>json_encode($summary['keywords']??[]),'platforms'=>json_encode($summary['posts']??[]),'status'=>'ready','created_on'=>date('Y-m-d H:i:s'),];return $this->db->table('bf_marketing_scraper')->insert($data);}public function insertNewsContent(array $newsItem,string $ticker){$data=['title'=>$newsItem['title']?? '','summary'=>$newsItem['summary']?? '','content'=>$newsItem['content']?? '','type'=>'financial_news','status'=>'Published','created_on'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),'scraped_at'=>date('Y-m-d H:i:s'),'keywords'=>json_encode($newsItem['keywords']??[]),'links'=>json_encode($newsItem['links']??[]),'audience_type'=>'investor','activity'=>$ticker,];return $this->db->table('bf_marketing_scraper')->insert($data);}public function insertTempScraper($data){return $this->db->table('bf_marketing_temp_scraper')->insert($data);}public function idleFetchEmails(){$config=config('NewsEmailServer');$connectionString="{$config->host}:{$config->port}/imap/{$config->encryption}";$inbox=@imap_open($connectionString,$config->username,$config->password);if(!$inbox){log_message('error','Cannot connect to email server: '.imap_last_error());return;}try{while(true){if(function_exists('imap_idle')){$status=imap_idle($inbox);}else{log_message('warning','📭 imap_idle not supported on this server. Falling back to polling.');sleep(30);continue;}$status=imap_idle($inbox);if($status){$emails=imap_search($inbox,'ALL');if($emails){foreach($emails as $email_number){$overview=imap_fetch_overview($inbox,$email_number,0)[0];$sender=$overview->from;$subject=$overview->subject;$body=imap_fetchbody($inbox,$email_number,1);$data=['status'=>'In Review','type'=>'Email/Newsletters','email_identifier'=>md5($subject.$sender.$overview->date),'email_date'=>date('Y-m-d H:i:s',strtotime($overview->date)),'email_sender'=>$sender,'email_subject'=>$subject,'email_body'=>$body,'created_on'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),];if($this->isEmailProcessed($data['email_identifier'])){log_message('debug','Email already processed: '.$data['email_identifier']);}else{$this->storeEmailContent($data);}}}else{log_message('debug','No new emails found or imap_search returned false');}}sleep(30);}}catch(\Exception $e){log_message('error','An exception occurred during email fetching: '.$e->getMessage());}finally{imap_close($inbox);}}public function isEmailProcessed($emailIdentifier){return $this->where('email_identifier',$emailIdentifier)->countAllResults()>0;}private function mapToContextualHashtags($keywords){return array_map(fn($keyword)=>'#'.preg_replace('/\s+/','',ucfirst($keyword)),$keywords);}public function markEmailsAsProcessed($ids=[]){if(!empty($ids)){return $this->db->table('bf_marketing_temp_scraper')->whereIn('id',$ids)->update(['status'=>'Processed']);}return false;}public function markTempRecordAsProcessed($id){return $this->db->table('bf_marketing_temp_scraper')->where('id',$id)->update(['status'=>'Processed','updated_at'=>date('Y-m-d H:i:s')]);}public function markTempScraperProcessed($id){$this->db->table('bf_marketing_temp_scraper')->where('id',$id)->update(['status'=>'Processed']);}public function processText($emailBody){$summary=$this->summarizeText($emailBody);$keywords=$this->extractKeywords($emailBody);$hashtags=$this->mapToContextualHashtags($keywords);if(empty($summary)||empty($hashtags)){log_message('error','Text processing failed');return false;}return $summary.' '.implode(' ',$hashtags);}public function saveApprovedLogo($symbol,$imageUrl){$symbol=strtoupper(trim($symbol));$data=['symbol'=>$symbol,'image_url'=>$imageUrl,'approved_at'=>date('Y-m-d H:i:s'),'updated_at'=>date('Y-m-d H:i:s'),];try{$existingLogo=$this->db->table('bf_company_logos')->where('symbol',$symbol)->get()->getRow();if($existingLogo){if($existingLogo->image_url!==$imageUrl){$this->db->table('bf_company_logos')->where('symbol',$symbol)->update($data);log_message('info',"Logo for symbol {$symbol} updated in bf_company_logos.");}else{log_message('info',"Logo for symbol {$symbol} already exists and is up to date.");}}else{$this->db->table('bf_company_logos')->insert($data);log_message('info',"Logo for symbol {$symbol} added to bf_company_logos.");}}catch(\Exception $e){log_message('error',"Failed to save or update logo for symbol {$symbol}: ".$e->getMessage());}}public function saveDailyLog($data){return $this->db->table('bf_marketing_scraper')->insert($data);}public function saveLogo($data){$symbol=strtoupper(trim($data['symbol']));$existing=$this->db->table('bf_company_logos')->where('symbol',$symbol)->get()->getRow();$data['symbol']=$symbol;$data['updated_at']=date('Y-m-d H:i:s');if($existing){$this->db->table('bf_company_logos')->where('symbol',$symbol)->update($data);log_message('info',"Logo for symbol {$symbol} updated in bf_company_logos.");}else{$data['created_at']=date('Y-m-d H:i:s');$this->db->table('bf_company_logos')->insert($data);log_message('info',"Logo for symbol {$symbol} added to bf_company_logos.");}}public function scheduleNewsletterCampaign($data){return $this->db->table('bf_marketing_newsletters')->insert($data);}public function storeContentAnalytics(array $data){return $this->db->table('bf_marketing_analysis')->insert($data);}public function storeEmail($data){return $this->db->table('bf_marketing_temp_scraper')->insert($data);}public function storeEmailContent($data){return $this->insert($data);}public function storeFinalMarketingContent($data){return $this->db->table('bf_marketing_scraper')->insert($data);}public function storeTodaysStory($title,$content){$data=['title'=>$title,'content'=>$content,'links'=>json_encode([]),'url'=>'','type'=>'todays_story','scraped_at'=>date('Y-m-d H:i:s'),'created_on'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),];return $this->db->table('bf_marketing_temp_scraper')->insert($data);}public function submitCampaignContent($data){if(isset($data['promotional_links'])&&is_array($data['promotional_links'])){$data['promotional_links']=json_encode($data['promotional_links']);}$data['status']=$data['status']?? 1;$data['stage']=$data['stage']?? 'draft';$data['created_on']=date('Y-m-d H:i:s');return $this->save($data);}public function storeNewsletterDraft($data){return $this->db->table('bf_marketing_newsletters')->insert($data);}public function storeNotification($data){return $this->db->table('bf_users_promotional_messages')->insert($data);}public function storeScrapedContent($data){return $this->db->table('bf_marketing_temp_scraper')->insert($data);}public function storeTempScrapedData($data){return $this->db->table('bf_marketing_temp_scraper')->insert($data);}public function summarizeText($text){if(empty($text)){return '';}$sentences=explode('.',$text);if(count($sentences)<=1){return substr($text,0,200);}$tokenizer=new WhitespaceTokenizer();$documents=array_map([$tokenizer,'tokenize'],$sentences);$documents=array_filter($documents);if(empty($documents)){return '';}$tfidf=new TfIdfTransformer();try{$tfidf->transform($documents);}catch(\Exception $e){log_message('error','TfIdfTransformer failed: '.$e->getMessage());return '';}$sentenceScores=[];foreach($documents as $index=>$document){$sentenceScores[$index]=array_sum($document);}arsort($sentenceScores);$numSentences=min(5,count($sentenceScores));$summarySentences=array_slice(array_keys($sentenceScores),0,$numSentences);return implode('. ',array_intersect_key($sentences,array_flip($summarySentences)));}public function updateBufferItem($id,$data){return $this->db->table('bf_marketing_buffer')->where('id',$id)->update($data);}public function updateBufferStatus($id,$status){return $this->db->table('bf_marketing_buffer')->where('id',$id)->update(['status'=>$status]);}public function updateCampaignStatus($id,$status){return $this->db->table('bf_marketing_newsletters')->where('id',$id)->update(['status'=>$status]);}public function updateEmailFields($id,$title,$url,$content=null){$data=['title'=>$title,'url'=>$url];if(!empty($content)){$data['content']=$content;}return $this->db->table('bf_marketing_temp_scraper')->where('id',$id)->update($data);}public function updateExchangeToken($id,$data){return $this->update($id,$data);}public function updateNotification($data){return $this->db->table('bf_users_promotional_messages')->update($data);}public function updateSchedule($id,$data){return $this->db->table('bf_marketing_schedule')->where('id',$id)->update($data);}public function updatePostStatus($id,$status){return $this->db->table('bf_marketing_schedule')->where('id',$id)->update(['post_status'=>$status,'last_attempt_at'=>date('Y-m-d H:i:s')]);}} ?><?php namespace App\Services;use App\Libraries\{BaseLoader,MyMIMarketing};use App\Models\{MarketingModel};use GuzzleHttp\Client;class MarketingService{use BaseLoader;protected $MyMIMarketing;protected $marketingModel;protected $httpClient;public function __construct(){$this->MyMIMarketing=new MyMIMarketing();$this->marketingModel=new MarketingModel();$this->httpClient=new Client(['timeout'=>5,'stream'=>true,'http_errors'=>false,'headers'=>['User-Agent'=>'MyMI Content Bot','Accept-Encoding'=>'gzip, deflate, br',]]);}public function distributeContent($platform,$message){switch($platform){case 'discord':return $this->sendToDiscordWebhook($message);case 'facebook':return $this->sendToZapier('facebook',$message);case 'linkedin':return $this->sendToZapier('linkedin',$message);default:return false;}}public function extractTopKeywords($summary){return $this->getMyMIMarketing()->extractKeywords($summary['summary']);}public function fetchUnprocessedEmailSummaries(){return $this->getMyMIMarketing()->getEmailSummariesForReview();}public function getEmailRecordById($id){return $this->marketingModel->getEmailRecordById($id);}public function getFeatures(){$getFeatures=$this->getMyMIMarketing()->getFeatures();return $getFeatures;}public function gatherKeywordBasedContent($keywords){$allContent=[];foreach($keywords as $keyword){$secData=$this->getMyMIMarketing()->scrapeGoogleSearch("SEC filings {$keyword}");$alphaVantageData=$this->getMyMIMarketing()->scrapeGoogleSearch("AlphaVantage {$keyword}");$googleData=$this->getMyMIMarketing()->scrapeGoogleSearch($keyword,$this->httpClient);$internalData=$this->getMyMIMarketing()->getScrapesByKeyword($keyword);$allContent[]=array_merge([$secData],[$alphaVantageData],[$googleData],$internalData);}return $allContent;}public function generateContentFromPost($title,$content,$tags){$summaryData=$this->getMyMIMarketing()->summarizeContent($content);if(empty($summaryData)||empty($summaryData['summary'])){log_message('error','generateContentFromPost() failed to generate summary.');return null;}return $this->getMyMIMarketing()->generatePlatformContent($summaryData['summary'],$tags);}public function generateFinalContentFromTemp(){$records=$this->marketingModel->getTopTempRecords(5);foreach($records as $record){if(empty($record['title'])||empty($record['content']))continue;$summary=$this->summarizeContent($record['content']);$socialMediaPost=$this->generateSocialPost($summary);$final=['title'=>$record['title'],'content'=>$summary,'post_text'=>$socialMediaPost,'source'=>'email','created_at'=>date('Y-m-d H:i:s'),];$this->marketingModel->insertFinalScraper($final);}}public function generatePlatformPosts($content){$summaryText=implode(" ",array_column($content,'content'));return $this->getMyMIMarketing()->generateContentFromLargeText($summaryText,[]);}public function getManagementTeam(){$getManagementTeam=$this->getMyMIMarketing()->getManagementTeam();return $getManagementTeam;}public function getMarketingData($accountid,$category,$platform){$data=[];if($category&&$accountid){$scrapedData=$this->getMyMIMarketing()->scrapeTokenContentByAccountId($accountid);if($scrapedData){$data['generatedData']=$this->getMyMIMarketing()->generateContentFromScrapedData($scrapedData,$platform);}else{$data['generatedData']=[];}}return $data;}public function getPromotionalBanners($userId){return $this->getMyMIMarketing()->fetchPromotionalBanners($userId);}public function getRecentGeneratedContent($limit=10){return $this->db->table('bf_marketing_scraper')->orderBy('created_on','DESC')->limit($limit)->get()->getResultArray();}public function regeneratePostsFromEmailId($id){$record=$this->getEmailRecordById($id);if(!$record||empty($record['content'])){log_message('error',"❌ Email record not found or empty for ID: $id");return null;}$processed=$this->getMyMIMarketing()->generateContentFromRaw($record);if($processed){$this->marketingModel->insertFinalScraper($record,$processed);$this->marketingModel->markEmailsAsProcessed([$id]);return $processed;}return null;}public function sanitizeAndSummarize($content){$cleanedBody=$this->marketingModel->cleanHtmlEmailContent($content);return $this->getMyMIMarketing()->summarizeContent($cleanedBody);}public function storeGeneratedPostsForDashboard($posts){$this->getMyMIMarketing()->storeGeneratedContent(['primary_content'=>$posts['summary'],'social_media_content'=>json_encode($posts['platforms_content']),'status'=>'Generated','created_on'=>date('Y-m-d H:i:s'),]);}protected function sendToDiscordWebhook($message){$webhook=getenv('DISCORD_WEBHOOK_URL');if(!$webhook)return false;$client=\Config\Services::curlrequest();$payload=['content'=>$message];$response=$client->post($webhook,['json'=>$payload]);return $response->getStatusCode()===204;}protected function sendToZapier($platform,$message){$zapierHooks=['facebook'=>getenv('ZAPIER_FACEBOOK_WEBHOOK'),'linkedin'=>getenv('ZAPIER_LINKEDIN_WEBHOOK'),];$hook=$zapierHooks[$platform]?? null;if(!$hook)return false;$client=\Config\Services::curlrequest();$payload=['message'=>$message,'platform'=>$platform];$response=$client->post($hook,['json'=>$payload]);return $response->getStatusCode()===200;}public function storeScrapedContent($content){foreach($content as $data){$this->getMyMIMarketing()->storeTempScrapedData(['title'=>$data['title'],'content'=>$data['content'],'scraped_at'=>date('Y-m-d H:i:s'),'type'=>'keyword_summary',]);}}} ?><?php namespace App\Modules\APIs\Controllers;use CodeIgniter\Controller;use App\Modules\APIs\Controllers\MarketingController;use App\Libraries\{BaseLoader,MyMIAlerts,MyMIMarketing};use App\Models\{AlertsModel,ExchangeModel,MarketingModel,ReferralModel,SupportModel,UserModel};use App\Services\{MarketingService};use CodeIgniter\API\ResponseTrait;class ManagementController extends UserController{use BaseLoader;use ResponseTrait;protected $alertManager;protected $MyMIMarketing;protected $marketingService;protected $alertsModel;protected $exchangeModel;protected $marketingModel;protected $userModel;protected $referralModel;protected $supportModel;public function __construct(){$this->alertManager=new MyMIAlerts();$this->MyMIMarketing=new MyMIMarketing();$this->alertsModel=new AlertsModel();$this->exchangeModel=new ExchangeModel();$this->marketingModel=new MarketingModel();$this->marketingService=new MarketingService();$this->referralModel=new ReferralModel();$this->supportModel=new SupportModel();$this->userModel=new UserModel();}public function runCRONTasks(){log_message('info','🛠️ ManagementController::runCRONTasks() initiated.');$marketingController=new MarketingController();log_message('info','📌 Step 1: cronFetchAndGenerateNews()');try{$marketingController->cronFetchAndGenerateNews();}catch(\Throwable $e){log_message('error','❌ cronFetchAndGenerateNews failed: '.$e->getMessage());}log_message('info','📌 Step 3: generateDailyContentDigest()');try{$todayNews=$this->marketingModel->getTodaysScrapedContent();if(!empty($todayNews)){$marketingController->generateDailyContentDigest();}else{log_message('info','🛑 Skipping summary generation — no scraped news available today.');}}catch(\Throwable $e){log_message('error','❌ generateDailyContentDigest() failed: '.$e->getMessage());}log_message('info','📌 Step 4: cronFetchInbox()');try{$marketingController->cronFetchInbox();}catch(\Throwable $e){log_message('error','❌ cronFetchInbox() failed: '.$e->getMessage());}log_message('info','📌 Step 5: cronAnalyzeContent()');try{$marketingController->cronAnalyzeContent();}catch(\Throwable $e){log_message('error','❌ cronAnalyzeContent() failed: '.$e->getMessage());}log_message('info','📌 Step 6: reprocessIncompleteEmails()');try{$marketingController->runBackfillForTempEmails();}catch(\Throwable $e){log_message('error','❌ reprocessIncompleteEmails() failed: '.$e->getMessage());}log_message('info','✅ ManagementController::runCRONTasks() completed.');}public function ajaxGetActiveUsers(){log_message('debug','📥 ajaxGetActiveUsers() called.');$request=service('request');$post=$request->getPost();log_message('debug','📦 Incoming POST: '.print_r($post,true));$start=$post['start']?? 0;$length=$post['length']?? 10;$search=$post['search']['value']?? '';$records=$this->userModel->getUsersByStatus(1,$search);$totalRecords=count($records);$records=array_slice($records,$start,$length);$data=[];foreach($records as $user){try{$actionView="""view('ManagementModule/Views/Users/partials\action_buttons',)))['user'=>$user]);}catch(\Throwable $e){log_message('error','❌ Error rendering action_buttons view for user ID '.$user['id'].': '.$e->getMessage());$actionView='<span class="text-danger">View Error</span>';}$data[]=['id'=>'<a href="'.site_url('Management/Users/Profile/'.$user['username']).'">'.$user['id'].'</a>','type'=>$user['type'],'name'=>$user['first_name'].' '.$user['last_name'].' '.$user['name_suffix'],'email'=>'<a href="mailto:'.$user['email'].'">'.$user['email'].'</a>','location'=>$user['city'].', '.$user['state'],'referral_code'=>$user['referral_code'],'actions'=>$actionView,];}return $this->response->setJSON(['draw'=>intval($post['draw']?? 1),'recordsTotal'=>$totalRecords,'recordsFiltered'=>$totalRecords,'data'=>$data,]);}public function ajaxGetInactiveUsers(){log_message('debug','📥 ajaxGetInactiveUsers() called.');$request=service('request');$post=$request->getPost();log_message('debug','📦 Incoming POST: '.print_r($post,true));$start=$post['start']?? 0;$length=$post['length']?? 10;$search=$post['search']['value']?? '';$records=$this->userModel->getUsersByStatus(0,$search);$totalRecords=count($records);$records=array_slice($records,$start,$length);$data=[];foreach($records as $user){try{$actionView="""view('ManagementModule/Views/Users/partials\action_buttons',)))['user'=>$user]);}catch(\Throwable $e){log_message('error','❌ Error rendering action_buttons view for user ID '.$user['id'].': '.$e->getMessage());$actionView='<span class="text-danger">View Error</span>';}$data[]=['id'=>'<a href="'.site_url('Management/Users/Profile/'.$user['username']).'">'.$user['id'].'</a>','type'=>$user['type'],'name'=>$user['first_name'].' '.$user['last_name'].' '.$user['name_suffix'],'email'=>'<a href="mailto:'.$user['email'].'">'.$user['email'].'</a>','location'=>$user['city'].', '.$user['state'],'referral_code'=>$user['referral_code'],'actions'=>$actionView,];}return $this->response->setJSON(['draw'=>intval($post['draw']?? 1),'recordsTotal'=>$totalRecords,'recordsFiltered'=>$totalRecords,'data'=>$data,]);}protected function arrayToXml(array $data,\SimpleXMLElement $xml){foreach($data as $key=>$value){is_array($value)?$this->arrayToXml($value,$xml->addChild($key)):$xml->addChild($key,htmlspecialchars($value));}return $xml;}public function checkForSpamUsers(){try{$MyMIUser=new \App\Libraries\MyMIUser();$spamAccounts=$MyMIUser->findPotentialSpamUsers();return $this->response->setJSON(['status'=>'success','message'=>count($spamAccounts).' spam accounts detected.','data'=>$spamAccounts]);}catch(\Throwable $e){log_message('error','❌ Error checking spam users: '.$e->getMessage());return $this->failServerError('Failed to check for spam accounts.');}}public function cronAnalyzeContent(){log_message('debug','🧠 Starting content digest analysis...');$this->getMyMIMarketing()->generateFromTempScraper(5);log_message('debug','✅ Content digest completed.');}public function cronFetchAndGenerateNews(){try{$this->getMyMIMarketing()->cronFetchAndGenerateNews();return $this->response->setJSON(['status'=>'success','message'=>'MarketAux news pulled, ranked, and content generated.']);}catch(\Throwable $e){return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function cronFetchInbox(){log_message('debug','📨 Starting inbox scrape...');$this->getMyMIMarketing()->scrapeInboxAndStore();log_message('debug','✅ Inbox scrape completed.');}public function cronFetchMarketingEmails(){log_message('info','CRON: Starting Marketing Email Fetch');$service=new MarketingService();$emailsFetched=$service->fetchAndStoreMarketingEmails();log_message('info','CRON: Fetched '.$emailsFetched.' marketing emails');return $this->respond(['status'=>'success','fetched'=>$emailsFetched]);}public function cronFetchAndStoreEmails(){try{$this->logMessage('📥 [CRON] Started cronFetchAndStoreEmails');$marketingService=$this->getMarketingService();$fetched=$marketingService->scrapeInboxAndStore();$this->logMessage("📩 [CRON] Fetched and stored {$fetched} emails into bf_marketing_temp_scraper");return $this->respond(['status'=>'success','stored'=>$fetched]);}catch(\Throwable $e){log_message('error','[CRON] Error in cronFetchAndStoreEmails: '.$e->getMessage());return $this->failServerError('Failed to fetch emails');}}public function distributeTodaysNewsContent(){$generated=$this->generateTodaysNewsSummary();$result=$this->getMyMIMarketing()->sendToZapier($generated['content']);return $this->response->setJSON(['status'=>'success','message'=>'Content distributed via Zapier.','zapier_result'=>$result]);}public function exportPostJson($id){$post=$this->marketingModel->getGeneratedPostById($id);if(!$post||empty($post['posts'])){return $this->failNotFound('Post not found.');}$posts=json_decode($post['posts'],true);$export=['title'=>$post['title'],'summary'=>$post['summary'],'cta'=>'Check it out at https://mymiwallet.com','keywords'=>explode(',',$post['keywords']?? ''),'platform_captions'=>$posts,];return $this->response->setHeader('Content-Type','application/json')->setHeader('Content-Disposition','attachment; filename="canva_post_'.$id.'.json"')->setJSON($export);}public function fetchAlphaVantageNewsForTradeAlerts(){$alerts=$this->alertsModel->getTradeAlertsWithCreatedFlag();log_message('info','📈 Processing '.count($alerts).' trade alerts.');foreach($alerts as $alert){try{log_message('info','🔍 Fetching AlphaVantage news for: '.$alert['ticker']);$newsItems=$this->alertManager->fetchAlphaVantageNews($alert['ticker']);log_message('info','📰 '.count($newsItems).' news items fetched for '.$alert['ticker']);foreach($newsItems as $news){$this->marketingModel->insertNewsContent($news,$alert['ticker']);}}catch(\Throwable $e){log_message('error','❌ AlphaVantage fetch failed for '.$alert['ticker'].': '.$e->getMessage());}}return $this->response->setJSON(['status'=>'success','message'=>'Financial news processed for alerts.']);}public function fetchEmailsToTempScraper(){try{log_message('info','📥 Starting email scrape to bf_marketing_temp_scraper...');$this->getMyMIMarketing()->fetchAndStoreEmails('news');log_message('info','📬 Number of emails fetched: '.count($emails));return $this->response->setJSON(['status'=>'success','message'=>'Emails stored successfully.']);}catch(\Throwable $e){log_message('error','❌ fetchEmailsToTempScraper error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function fetchNewsEmails(){log_message('info','📥 fetchNewsEmails - Started.');try{$this->getMyMIMarketing()->fetchAndStoreEmails('news');return $this->response->setJSON(['status'=>'success','message'=>'News emails fetched successfully.']);}catch(\Exception $e){log_message('error','❌ fetchNewsEmails - Error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function forceFetchEmails(){try{$result=$this->alertManager->fetchAndStoreEmails();return $this->response->setJSON(['status'=>'success','message'=>'Emails fetched and processed successfully.']);}catch(\Exception $e){return $this->response->setJSON(['status'=>'error','message'=>'Error fetching emails: '.$e->getMessage()],500);}}public function generateContentDigestFromStored(){log_message('info','Marketing: Starting summary generation from stored marketing emails.');$model=new MarketingModel();$records=$model->getRecentUnprocessedTempEmails(5);$results=[];foreach($records as $record){if(empty($record['title'])||empty($record['content'])){log_message('debug','Skipped record due to missing title/content ID: '.$record['id']);continue;}try{$summary=$this->getMarketingService()->generateContentFromRaw($record['title'],$record['content']);$model->storeFinalMarketingContent(['source_id'=>$record['id'],'title'=>$record['title'],'summary'=>$summary,'created_at'=>date('Y-m-d H:i:s')]);$model->markTempRecordAsProcessed($record['id']);$results[]=$record['title'];}catch(\Throwable $e){log_message('error','Failed to process record ID '.$record['id'].': '.$e->getMessage());}}return $this->respond(['status'=>'complete','processed_titles'=>$results]);}public function generateContentFromScraper(){log_message('debug','🔁 API::MarketingController::generateContentFromScraper called');try{$limit=$this->request->getGet('limit')?? 5;$records=[];$allRecords=$this->marketingModel->getValidUnprocessedEmails($limit);if(!is_array($allRecords)){log_message('error','❌ $allRecords is not an array or null. Cannot proceed.');return $this->respond(['status'=>'error','message'=>'Failed to fetch records.']);}foreach($allRecords as $record){$titleOk=!empty($record['title']);$contentOk=strlen(strip_tags($record['content']?? ''))>1000;if($titleOk&&$contentOk){$records[]=$record;if(count($records)>=$limit)break;}else{log_message('debug',"⚠️ Skipping invalid record ID {$record['id']} during prefilter (Title or content missing/too short).");$this->marketingModel->markEmailsAsProcessed([$record['id']]);}}if(empty($records)){return $this->respond(['status'=>'no_data','message'=>'No unprocessed records found.']);}$processedSummaries=[];foreach($records as $record){$content=$record['content']?? '';$title=$record['title']?? '';$recordId=$record['id']?? 0;if(empty(trim($content))||strlen($content)<1000){log_message('debug',"⏭️ Skipping record ID {$recordId} - content too short or empty.");continue;}if(empty(trim($title))){log_message('debug',"⏭️ Skipping record ID {$recordId} - missing title.");continue;}if(stripos($content,'<html')!==false&&substr_count($content,'<')>50){log_message('debug',"⏭️ Skipping record ID {$recordId} - content likely raw HTML.");continue;}try{$processed=$this->getMarketingService()->generateContentFromRaw($record);if(!is_array($processed)){log_message('debug',"⚠️ Skipped record ID {$recordId} - generateContentFromRaw() returned invalid structure.");continue;}$this->marketingModel->saveFinalizedMarketingContent($processed);$this->marketingModel->markEmailsAsProcessed([$recordId]);$processedSummaries[]=['id'=>$recordId,'title'=>$processed['headline']?? $title,'summary'=>$processed['summary']?? '','keywords'=>$processed['keywords']??[],];}catch(\Throwable $e){log_message('error',"❌ Failed to process record ID {$recordId}: {$e->getMessage()}");}}return $this->respond(['status'=>'success','message'=>count($processedSummaries).' records processed successfully.','data'=>$processedSummaries]);}catch(\Throwable $e){log_message('error','❌ API::generateContentFromScraper error - '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function generateDailyContentDigest(){log_message('debug','🧠 Start Memory Usage: '.memory_get_usage(true));@ini_set('memory_limit','768M');$limit=5;$summary=[];try{$records=$this->marketingModel->getValidUnprocessedEmails($limit);if(!is_array($records)||empty($records)){log_message('info','🚫 No valid records returned from getValidUnprocessedEmails().');return $this->response->setJSON(['status'=>'no_data','message'=>'No valid records to process.']);}foreach($records as $record){$recordId=$record['id']?? 0;$title=$record['title']?? '';$content=$record['content']?? '';$contentSize=strlen(strip_tags($content));if(empty(trim($title))||$contentSize<1000){log_message('debug',"⚠️ Skipping record ID {$recordId} — title missing or content too short ({$contentSize} chars).");$this->marketingModel->markEmailsAsProcessed([$recordId]);continue;}if(stripos($content,'<html')!==false&&substr_count($content,'<')>50){log_message('debug',"⏭️ Skipping record ID {$recordId} — likely raw HTML content.");$this->marketingModel->markEmailsAsProcessed([$recordId]);continue;}try{gc_collect_cycles();$processed=$this->getMarketingService()->generateContentFromRaw($record);if(!is_array($processed)){log_message('warning',"⚠️ Skipped record ID {$recordId} — generateContentFromRaw() returned invalid result.");continue;}$this->marketingModel->saveFinalizedMarketingContent($processed);$this->marketingModel->markEmailsAsProcessed([$recordId]);$summary[]=['title'=>$processed['headline']?? 'Untitled','summary'=>$processed['summary']?? '','subtopics'=>$processed['subtopics']??[],'platform_posts'=>$processed['posts']??[],];}catch(\Throwable $e){log_message('error',"❌ Error processing record ID {$recordId}: {$e->getMessage()}");}}log_message('debug','🏁 Peak Memory Usage: '.memory_get_peak_usage(true));return $this->response->setJSON(['status'=>'success','digest'=>$summary]);}catch(\Throwable $e){log_message('error','❌ generateDailyContentDigest fatal error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function generateRankedMarketingContent(){$this->getMyMIMarketing()->generateRankedMarketingContent();return $this->response->setJSON(['status'=>'success','message'=>'Ranked content generated.']);}public function getBalanceSheet($symbol,$apikey){$url="https://www.alphavantage.co/query?function=BALANCE_SHEET&symbol=".urlencode($symbol)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getCashFlowStatement($symbol,$apikey){$url="https://www.alphavantage.co/query?function=CASH_FLOW&symbol=".urlencode($symbol)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getCompanyOverview($symbol,$apikey){$url="https://www.alphavantage.co/query?function=OVERVIEW&symbol=".urlencode($symbol)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getEarningsCalendar($apikey,$horizon='3month'){$url="https://www.alphavantage.co/query?function=EARNINGS_CALENDAR&horizon=".$horizon."&apikey=".$apikey;$csv=file_get_contents($url);$lines=explode("\n",trim($csv));$data=array_map('str_getcsv',$lines);return $data;}public function getFixedWindowAnalytics($symbols,$rangeStart,$rangeEnd,$calculations,$apikey){$url="https://alphavantageapi.co/timeseries/analytics?SYMBOLS=".urlencode($symbols);$url.="&RANGE=".$rangeStart."&RANGE=".$rangeEnd;$url.="&INTERVAL=DAILY&OHLC=close";$url.="&CALCULATIONS=".urlencode($calculations)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getIncomeStatement($symbol,$apikey){$url="https://www.alphavantage.co/query?function=INCOME_STATEMENT&symbol=".urlencode($symbol)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getInsiderTransactions($symbol,$apikey){$url="https://www.alphavantage.co/query?function=INSIDER_TRANSACTIONS&symbol=".urlencode($symbol)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getNewsSentiment($apikey,$tickers='',$topics='',$time_from='',$time_to='',$sort='LATEST',$limit=50){$url="https://www.alphavantage.co/query?function=NEWS_SENTIMENT";$url.="&tickers=".urlencode($tickers);$url.="&topics=".urlencode($topics);if($time_from)$url.="&time_from=".$time_from;if($time_to)$url.="&time_to=".$time_to;$url.="&sort=".$sort."&limit=".$limit."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getSlidingWindowAnalytics($symbols,$range,$windowSize,$calculations,$apikey){$url="https://alphavantageapi.co/timeseries/running_analytics?SYMBOLS=".urlencode($symbols);$url.="&RANGE=".$range."&INTERVAL=DAILY&OHLC=close";$url.="&WINDOW_SIZE=".$windowSize;$url.="&CALCULATIONS=".urlencode($calculations)."&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function generatePostsFromSummary($summaryId=null){try{$summary=$this->marketingModel->find($summaryId);if(!$summary){return $this->failNotFound('Summary not found.');}$decodedTitleRaw=$summary['title']?? '';$decodedSummaryRaw=$summary['summary']?? '';$decodedTitle=$this->getMyMIMarketing()->decodeMimeHeaderSafe($decodedTitleRaw);$decodedSummary=quoted_printable_decode($decodedSummaryRaw);$cleanedSummary=html_entity_decode(strip_tags($decodedSummary));$keywords=$this->MyMIMarketing->extractKeywords($cleanedSummary);$posts=$this->MyMIMarketing->generateSocialPosts($cleanedSummary,$keywords);$this->marketingModel->update($summaryId,['keywords'=>json_encode($keywords),'posts'=>json_encode($posts),]);return $this->respond(['status'=>'success','message'=>'Content generated and stored successfully.','original'=>$summary,'cleaned'=>['title'=>$decodedTitle,'summary'=>$cleanedSummary,'keywords'=>$keywords,'posts'=>$posts,],]);}catch(\Throwable $e){log_message('error','❌ generatePostsFromSummary() failed: '.$e->getMessage());return $this->failServerError('Error generating posts.');}}public function testTfIdfPipeline(){$samples=['Short unstructured','This is a valid test document with enough content and structure to process correctly.','     ','<html><body>Broken HTML without substance</body></html>','Here is another test input to validate TF-IDF scoring logic.',];foreach($samples as $i=>$text){$summary=$this->MyMIMarketing->summarizeText($text);$keywords=$this->MyMIMarketing->extractKeywords($text);$scorePreview=$this->MyMIMarketing->getTopKeywordScores($text,5);log_message('debug',"🧪 Test #{$i} | Summary: {$summary}");log_message('debug',"🧪 Test #{$i} | Keywords: ".implode(',',$keywords));log_message('debug',"📊 Test #{$i} | TF-IDF Scores: ".print_r($scorePreview,true));}return $this->respond(['status'=>'ok','message'=>'TF-IDF test pipeline ran successfully.']);}public function generateTodaysNewsSummary(){$todayNews=$this->marketingModel->getTodaysNewsContent();$summary=$this->getMyMIMarketing()->summarizeMultipleArticles($todayNews);$content=$this->getMyMIMarketing()->generateMarketingContent($summary);return $this->response->setJSON(['status'=>'success','summary'=>$summary,'content'=>$content]);}public function generateTodaysStory(){ini_set('memory_limit','1024M');try{log_message('info','🔍 Starting email scrape for news@mymiwallet.com...');$this->getMyMIMarketing()->fetchAndStoreEmails('news');$today=date('Y-m-d');$scrapes=$this->marketingModel->getScrapesByDate($today,10);if(empty($scrapes)){log_message('info','No scraped emails found for today.');return $this->response->setJSON(['status'=>'error','message'=>'No emails found for today.'],404);}$summaries=[];foreach(array_chunk($scrapes,10)as $scrapeChunk){foreach($scrapeChunk as $scrape){$content=$scrape['email_body']?? $scrape['content']?? '';log_message('info','Content size: '.strlen($content));$cleanedBody=$this->marketingModel->cleanHtmlEmailContent($content);$summary=$this->getMyMIMarketing()->summarizeContent($cleanedBody);log_message('debug','Memory after summary: '.memory_get_usage(true));if(is_array($summary)){$summary=$summary['summary']?? implode('. ',array_map('strval',$summary));}$summaries[]=$summary;}}$combinedSummary=implode("\n\n",$summaries);if(strlen($combinedSummary)>500000){log_message('warning','Combined summary too long. Truncating...');$combinedSummary=substr($combinedSummary,0,500000);}$todayTitle="Today's Top Stories - ".date('F j, Y');$data=['title'=>$todayTitle,'content'=>$combinedSummary,'links'=>json_encode([]),'url'=>'','type'=>'todays_story','scraped_at'=>date('Y-m-d H:i:s'),'created_on'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),];$this->marketingModel->storeTempScrapedData($data);log_message('info','✅ Today’s story generated and stored.');return $this->response->setJSON(['status'=>'success','message'=>'Today’s story generated and stored successfully!','title'=>$todayTitle,'summary'=>$combinedSummary]);}catch(\Throwable $e){log_message('error','❌ generateTodaysStory error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function generateVoiceScriptManually(){try{log_message('info','🎤 generateVoiceScriptManually() triggered.');$script=$this->getMyMIMarketing()->generateVoiceoverScript();return $this->response->setJSON(['status'=>'success','script'=>$script]);}catch(\Throwable $e){log_message('error','❌ Error in generateVoiceScriptManually: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()]);}}public function getAlerts(){log_message('debug','🔍 getAlerts called');try{$alerts=$this->alertsModel->getAllTradeAlerts();log_message('debug','✅ getAlerts retrieved '.count($alerts).' alerts.');return $this->response->setJSON($alerts);}catch(\Throwable $e){log_message('error','❌ getAlerts error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function getAssets(){log_message('debug','📊 getAssets called');try{$assets=$this->exchangeModel->getManagementAssets();log_message('debug','✅ getAssets retrieved '.count($assets).' assets.');return $this->response->setJSON($assets);}catch(\Throwable $e){log_message('error','❌ getAssets error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function getNews(){log_message('debug','📰 getNews called');try{$news=$this->marketingModel->getNewsAlerts();log_message('debug','✅ getNews retrieved '.count($news).' news records.');return $this->response->setJSON($news);}catch(\Throwable $e){log_message('error','❌ getNews error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function getReferrals(){log_message('debug','🔍 getReferrals called');try{$referrals=$this->referralModel->getAllReferrals();log_message('debug','✅ getReferrals retrieved '.count($referrals).' referrals.');return $this->response->setJSON($referrals);}catch(\Throwable $e){log_message('error','❌ getReferrals error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function getSupport(){log_message('debug','🧾 getSupport called');try{$support=$this->supportModel->getManagementSupport();log_message('debug','✅ getSupport retrieved '.count($support).' support records.');return $this->response->setJSON($support);}catch(\Throwable $e){log_message('error','❌ getSupport error: '.$e->getMessage());return $this->failServerError($e->getMessage());}}public function getTopMovers($apikey){$url="https://www.alphavantage.co/query?function=TOP_GAINERS_LOSERS&apikey=".$apikey;$json=file_get_contents($url);return json_decode($json,true);}public function getUpcomingIPOs($apikey){$url="https://www.alphavantage.co/query?function=IPO_CALENDAR&apikey=".$apikey;$csv=file_get_contents($url);$lines=explode("\n",trim($csv));$data=array_map('str_getcsv',$lines);return $data;}public function getUsers(){log_message('debug','🔍 getUsers called');}public function massResendActivationEmails(){$users=$this->userModel->getPendingActivationUsers();$activator=service('activator');$emailer=\Config\Services::email();$successCount=0;$failureCount=0;foreach($users as $user){$sent=$activator->send($user);if($sent){$successCount++;log_message('info',"Activation email sent to: {$user->email}");}else{$failureCount++;log_message('error',"Failed to send activation email to: {$user->email}");}}$summary="{$successCount} emails sent successfully, {$failureCount} failed.";return redirect()->to('/Management/Users')->with('message',$summary);}public function processAllTradeAlerts(){try{log_message('info','⚡ Management API - processAllTradeAlerts triggered.');$this->alertManager->fetchAndStoreAlertsEmails();$this->alertManager->processTradeAlertsInBatches(50);$this->alertManager->updateAlerts();return $this->response->setJSON(['status'=>'success','message'=>'All trade alerts processed successfully.']);}catch(\Exception $e){log_message('error','❌ Management API - Error processing trade alerts: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function processAndGenerateMarketingContent(){$emails=$this->getMarketingService()->fetchUnprocessedEmailSummaries();if(!empty($emails)&&is_array($emails)){foreach($emails as $email){$cleanContent=$this->getMarketingService()->sanitizeAndSummarize($email['email_body']);$keywords=$this->getMyMIMarketing()->extractTopKeywords($cleanContent);$externalContent=$this->getMarketingService()->gatherKeywordBasedContent($keywords);$this->getMarketingService()->storeScrapedContent($externalContent);$generatedPosts=$this->getMarketingService()->generatePlatformPosts($externalContent);$this->getMarketingService()->storeGeneratedPostsForDashboard($generatedPosts);}}return redirect()->to('/Management/Marketing')->with('message','Content generation completed.');}public function processTempEmailsToScraper(){try{log_message('info','⚙️ Starting content generation from bf_marketing_temp_scraper...');$tempEmails=$this->marketingModel->getRecentScrapes();foreach($tempEmails as $email){$cleanedBody=$this->marketingModel->cleanHtmlEmailContent($email->email_body);$summary=$this->getMyMIMarketing()->summarizeContent($cleanedBody);$keywords=$this->marketingModel->extractKeywords($email->email_body);$hashtags=$this->marketingModel->mapToContextualHashtags($keywords);$data=['title'=>$email->email_subject ?? 'Generated Content','summary'=>is_array($summary)?implode("\n",$summary):$summary,'content'=>$email->email_body,'tags'=>implode(',',$keywords),'type'=>'Email/Newsletters','status'=>'pending','created_on'=>date('Y-m-d H:i:s'),'author_information'=>$email->email_sender,];$this->marketingModel->saveDailyLog($data);}log_message('info','✅ Finished processing and saving to bf_marketing_scraper.');return $this->response->setJSON(['status'=>'success','message'=>'Content generated and saved to bf_marketing_scraper.',]);}catch(\Throwable $e){log_message('error','❌ processTempEmailsToScraper error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function reprocessIncompleteEmails(){try{$this->getMyMIMarketing()->reprocessIncompleteEmails();return $this->response->setJSON(['status'=>'success','message'=>'Backfilled incomplete emails.']);}catch(\Throwable $e){log_message('error','❌ reprocessIncompleteEmails error: '.$e->getMessage());return $this->failServerError('Failed to reprocess incomplete emails.');}}public function runCronManually(){$this->runCRONTasks();return $this->response->setJSON(['status'=>'success','message'=>'Manual CRON execution complete.']);}public function runDailyAlphaVantageDataPipeline(){$symbols=$this->alertsModel->getTopWatchlistSymbols();$apikey=getenv('ALPHA_VANTAGE_KEY');foreach($symbols as $symbol){$this->fetchAlphaVantageNewsForTradeAlerts($symbol['symbol'],$apikey);$this->getCompanyOverview($symbol['symbol'],$apikey);$this->getIncomeStatement($symbol['symbol'],$apikey);}return $this->response->setJSON(['status'=>'success','message'=>'Daily Alpha Vantage data pipeline completed.']);}public function sendToZapierManually(){$summary=$this->generateTodaysNewsSummary();$result=$this->getMyMIMarketing()->sendToZapier($summary['content']);return $this->response->setJSON(['status'=>'success','message'=>'Sent manually to Zapier.','result'=>$result]);}public function scrapeAndGenerateTodaysStoryFromInbox(){try{log_message('info','📥 Starting inbox scrape for news@mymiwallet.com...');$this->getMyMIMarketing()->fetchAndStoreEmails('news');$today=date('Y-m-d');$scrapes=$this->marketingModel->getScrapesByDate($today);if(empty($scrapes)){log_message('info','📭 No emails found for today.');return $this->response->setJSON(['status'=>'error','message'=>'No emails found for today.'],404);}$summaries=[];foreach($scrapes as $scrape){$cleanedBody=$this->marketingModel->cleanHtmlEmailContent($scrape['content']);$summary=$this->getMyMIMarketing()->summarizeContent($cleanedBody);if(is_array($summary)){$summary=$summary['summary']?? implode('. ',array_map('strval',$summary));}$summaries[]=$summary;}$combinedSummary=implode("\n\n",$summaries);if(strlen($combinedSummary)>500000){log_message('warning','Combined summary too long. Truncating...');$combinedSummary=substr($combinedSummary,0,500000);}$todayTitle="Today's News Highlights - ".date('F j, Y');$data=['title'=>$todayTitle,'content'=>$combinedSummary,'links'=>json_encode([]),'url'=>'','type'=>'todays_story','scraped_at'=>date('Y-m-d H:i:s'),'created_on'=>date('Y-m-d H:i:s'),'modified_on'=>date('Y-m-d H:i:s'),];$this->marketingModel->storeTempScrapedData($data);log_message('info','✅ Today’s story generated and stored.');return $this->response->setJSON(['status'=>'success','message'=>'Today’s story generated and stored successfully!','title'=>$todayTitle,'summary'=>$combinedSummary]);}catch(\Throwable $e){log_message('error','❌ scrapeAndGenerateTodaysStoryFromInbox error: '.$e->getMessage());return $this->response->setJSON(['status'=>'error','message'=>$e->getMessage()],500);}}public function sharePost($id,$platform){try{$post=$this->marketingModel->getGeneratedPostById($id);if(!$post||empty($post['posts'])){return $this->failNotFound('Post not found or invalid.');}$posts=json_decode($post['posts'],true);$message=$posts[$platform]?? null;if(!$message){return $this->failValidationError("No formatted message found for platform: $platform");}$success=$this->getMarketingService()->distributeContent($platform,$message);if($success){return $this->respond(['status'=>'success','message'=>'Post shared.']);}else{return $this->failServerError('Failed to dispatch post.');}}catch(\Throwable $e){log_message('error',"[PostShare] Error: ".$e->getMessage());return $this->failServerError('An unexpected error occurred.');}}public function sendAllDiscordAlerts(){$alerts=$this->alertsModel->getAlertsWithNewTVChart();if(empty($alerts)){return $this->response->setJSON(['status'=>'error','message'=>'No new alerts to send.'],404);}foreach($alerts as $alert){$this->alertManager->sendDiscordNotification($alert);}return $this->response->setJSON(['status'=>'success','message'=>'All Discord notifications sent.']);}public function updateMarketDataForAlerts(){try{$this->alertManager->updateAlerts();return $this->response->setJSON(['status'=>'success','message'=>'Trade alerts updated with market data.']);}catch(\Exception $e){return $this->response->setJSON(['status'=>'error','message'=>'Failed to update market data: '.$e->getMessage()],500);}}} ?><?php $managementActionItems=$siteSettings->managementActionItems;$department=$uri->getSegment(2);$viewFileData=['managementActionItems'=>$managementActionItems,'targetUsers'=>$targetUsers ?? 0,'totalActiveUsers'=>$totalActiveUsers ?? 0,'totalActivePartners'=>$totalActivePartners ?? 0,'totalActiveCampaigns'=>$totalActiveCampaigns ??[],'getTasksByDepartment'=>$getTasksByDepartment ??[],'totalDepartmentTasks'=>$totalDepartmentTasks ??[],'totalPageSEOTasks'=>$totalPageSEOTasks ??[],'totalTransFees'=>$totalTransFees ?? 0,'totalLastTransFees'=>$totalLastTransFees ?? 0,'usersPercentage'=>$usersPercentage ?? 0,'getActiveCampaigns'=>$getActiveCampaigns ??[],'totalApprovedAssets'=>$totalApprovedAssets ?? 0,'totalPendingAssets'=>$totalPendingAssets ?? 0,'userGoals'=>$userGoals ??[],'newsUpdates'=>$newsUpdates ??[],'getBlogPosts'=>$getBlogPosts ??[],'recentMarketingPosts'=>$recentMarketingPosts ??[],'todaysStory'=>$todaysStory ??[],]; ?><div class="nk-block"><div class="row gy-gs"><div class="col-lg-12"><div class="nk-block-head-xs"><div class="nk-block-head-content"><h1 class="title nk-block-title">MyMI Management -<?=esc($department)?></h1><a href="<?=site_url('/Management')?>">← Back to Management Dashboard</a></div></div></div><div class="col-12 col-xxl-4"><?="""view('ManagementModule/Views/Marketing/index\action_center_new',)))$viewFileData)?></div><div class="col-12 col-xxl-8"><?="""view('ManagementModule/Views/Marketing/index\most_recent_content',)))$viewFileData)?></div><div class="col-12"><?php  ?></div><div class="col-12"><?php  ?></div><div class="col-12 col-xxl-6"><?="""view('ManagementModule/Views/Marketing/resources\controlPanelBlock',)))$viewFileData)?><?php  ?></div><div class="col-12 col-xxl-6"><?="""view('ManagementModule/Views/Marketing/resources\ctaRecommenderModule',)))$viewFileData)?></div><div class="col-12 col-xxl-12 px-2"><div class="generated-summaries"id="generatedSummariesBlock"><?="""view('ManagementModule/Views/Marketing/resources\generatedSummaries',)))$viewFileData)?></div></div><div class="col-12 mt-3 col-xxl-12"><div class="card card-bordered"><div class="card-inner"><h5 class="title">📰 Recent Marketing Posts</h5><?php $validPosts=array_filter($recentMarketingPosts,fn($p)=>!empty($p->title));if(!empty($validPosts)): ?><ul class="list-group"><?php foreach($validPosts as $post): ?><li class="d-flex justify-content-between align-items-start flex-column list-group-item"><div class="w-100"><strong><?=esc($post->title?:'(Untitled Post)')?></strong><br><small class="text-muted"><?=date('M d, Y h:i A',strtotime($post->created_at))?></small><br><?php if(!empty($post->short_description)): ?><small class="text-secondary"><?=esc($post->short_description)?>...</small><?php else: ?><small class="text-secondary">No description available.</small><?php endif; ?></div><div class="mt-2"><button class="btn btn-primary btn-sm"onclick='dynamicModalLoader("Marketing","PreviewGeneratedPost","<?=$post->id?>")'>Preview</button></div></li><?php endforeach; ?></ul><?php else: ?><p>No posts with valid titles available yet. Click 'Generate' to create one!</p><?php endif; ?></div></div></div><div class="col-12 mt-3 col-xxl-4"><?="""view('ManagementModule/Views/Marketing/index\exchange_action_center',)))$viewFileData)?></div><div class="col-12 mt-3 col-xxl-8"><?="""view('ManagementModule/Views/Marketing/index\target_users',)))$viewFileData)?></div></div></div><script <?= $nonce['script'] ?? '' ?>></script><div class="nk-block"><div class="nk-block-head"><div class="d-flex justify-content-between align-items-center nk-block-head-content"><h4 class="nk-block-title">📢 Generated Marketing Summaries</h4><div><div class="d-flex justify-content-end mt-3"><label class="form-check form-switch ml-2"><input class="btn btn-lg form-check-input"id="liveModeToggle"type="checkbox"> <span class="form-check-label">Live Mode</span></label></div></div></div><p class="text-soft">This section shows finalized summaries ready for distribution across platforms.</p></div><div class="row"id="generatedSummariesBlock"><?php if(!empty($todaysStory)): ?><?php foreach($todaysStory as $summary): ?><div class="mb-4 col-lg-4 col-md-6"><div class="card h-100 shadow-sm"><div class="d-flex flex-column card-body"><h6 class="title mb-1"><?=esc($summary['title'])?></h6><p class="small mb-2 text-soft"><?=date('F j, Y g:i A',strtotime($summary['created_at']))?></p><div class="small mb-2"><?=esc($summary['summary'])?></div><?php if(!empty($summary['keywords'])): ?><div class="small mb-2 text-muted"><strong>#Tags:</strong><?php foreach(explode(',',$summary['keywords'])as $tag): ?><span class="badge bg-light me-1 text-dark">#<?=trim($tag)?></span><?php endforeach; ?></div><?php endif; ?><?php if(!empty($summary['cta'])): ?><div class="small mb-2 text-primary"><strong>📣 CTA:</strong><?=esc($summary['cta'])?></div><?php endif; ?><a href="javascript:void(0);"class="btn btn-primary btn-sm mt-auto"onclick='dynamicModalLoader("/API/Management/PreviewGeneratedPost/<?=$summary['id']?>")'>🔍 Preview Post</a></div></div></div><?php endforeach; ?><?php else: ?><div class="col-12"><div class="alert alert-warning">⚠️ No summaries available. Click "Generate Today’s Content" to begin.</div></div><?php endif; ?></div></div><script <?= $nonce['script'] ?? '' ?>>const liveToggle = document.getElementById('liveModeToggle');
    let liveInterval = null;

    liveToggle.addEventListener('change', () => {
        if (liveToggle.checked) {
            liveInterval = setInterval(refreshGeneratedSummaries, 30000);
            refreshGeneratedSummaries();
        } else {
            clearInterval(liveInterval);
        }
    });

    function refreshGeneratedSummaries() {
        fetch('index.php/API/Marketing/fetchGeneratedSummariesBlock')
            .then(response => response.text())
            .then(html => {
                document.getElementById('generatedSummariesBlock').innerHTML = html;
            })
            .catch(err => {
                console.error('Live refresh failed:', err);
            });
    }</script><div class="card card-bordered mb-4"><div class="card-inner"><div class="d-flex justify-content-between align-items-center mb-2"><h5 class="title mb-0">🛠️ Control Panel</h5><div class="form-check form-switch"><input class="form-check-input"id="liveToggle"type="checkbox"> <label class="form-check-label"for="liveToggle">Live Mode</label></div></div><div class="d-flex justify-content-end mt-3 flex-wrap gap-2"><button class="btn btn-success"id="generatePostBtn">📝 Generate New Post</button> <button class="btn btn-primary"onclick="generateTodaysStory()">📢 Generate Today’s Story</button> <button class="btn btn-outline-secondary"onclick="refreshDashboard()">🔄 Refresh Dashboard</button> <button class="btn btn-info"onclick="loadPendingSummaries()">🧪 Preview Summaries</button> <button class="btn btn-warning"onclick="triggerReprocessIncompleteEmails()">🛠️ Reprocess Emails</button></div><div class="small mt-2 text-success"id="generate-post-status"></div><div class="small mt-2 text-success"id="todays-story-status"></div></div></div><script <?= $nonce['script'] ?? '' ?>>function refreshDashboard(){location.reload()}</script><script <?= $nonce['script'] ?? '' ?>>document.addEventListener("DOMContentLoaded", () => {
    const csrfToken = "<?=csrf_hash()?>";

    // ✅ Generate Today's Story
    const generateTodaysStory = async () => {
        const statusEl = document.getElementById('todays-story-status');
        statusEl.textContent = '⏳ Generating...';
        statusEl.classList.remove('text-danger', 'text-success');

        try {
            const response = await fetch("<?=site_url('API/Marketing/generateDailyContentDigest')?>");
            const data = await response.json();

            if (data.status === 'success') {
                statusEl.textContent = '✅ ' + data.message;
                setTimeout(() => location.reload(), 1000);
            } else {
                statusEl.classList.add('text-danger');
                statusEl.textContent = '❌ ' + data.message;
            }
        } catch (error) {
            statusEl.classList.add('text-danger');
            statusEl.textContent = '❌ Error: ' + error.message;
        }
    };

    // ✅ Generate Marketing Post
    const generatePostBtn = document.getElementById("generatePostBtn");
    if (generatePostBtn) {
        generatePostBtn.addEventListener("click", async () => {
            const status = document.getElementById("generate-post-status");
            status.textContent = "⏳ Generating post...";
            status.classList.remove("text-danger", "text-success");

            try {
                const response = await fetch("<?=site_url('API/Marketing/generateContentFromScraper')?>");
                const data = await response.json();

                if (data.status === "success") {
                    status.textContent = "✅ Post generated successfully!";
                    setTimeout(() => location.reload(), 1000);
                } else {
                    status.classList.add("text-danger");
                    status.textContent = "❌ " + data.message;
                }
            } catch (err) {
                console.error("❌ Error:", err);
                status.classList.add("text-danger");
                status.textContent = "❌ An error occurred.";
            }
        });
    }

    // ✅ Mass Resend Activation Emails
    window.massResendActivationEmails = async () => {
        const statusEl = document.getElementById("resend-status");
        statusEl.textContent = "⏳ Processing...";
        statusEl.classList.remove("text-danger", "text-success");

        try {
            const response = await fetch("<?=site_url('API/Marketing/massResendActivationEmails')?>", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest",
                    "X-CSRF-TOKEN": csrfToken,
                },
                body: JSON.stringify({})
            });
            const data = await response.json();

            if (data.status === "success") {
                statusEl.classList.add("text-success");
                statusEl.textContent = "✅ " + data.message;
            } else {
                statusEl.classList.add("text-danger");
                statusEl.textContent = "❌ " + data.message;
            }
        } catch (err) {
            console.error(err);
            statusEl.classList.add("text-danger");
            statusEl.textContent = "❌ An error occurred.";
        }
    };

    // ✅ Reprocess Incomplete Emails
    window.triggerReprocessIncompleteEmails = async () => {
        if (!confirm("Reprocess up to 20 incomplete emails?")) return;

        try {
            const response = await fetch("<?=site_url('Management/reprocessIncompleteEmails')?>");
            const data = await response.json();
            alert(data.message || "✅ Reprocessed successfully.");
        } catch (err) {
            alert("❌ Error: " + (err?.message || "Failed to reprocess."));
        }
    };

    // ✅ Expose global handler for 'Generate Today's Story'
    window.generateTodaysStory = generateTodaysStory;

    async function approveBufferItem(id) {
        updateStatus(`⏳ Approving #${id}...`);
        try {
            const response = await fetch(`<?=site_url('API/Management/approveBufferItem/')?>${id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken
                }
            });
            const data = await response.json();
            handleBufferResponse(data, id);
        } catch (err) {
            updateStatus(`❌ Error: ${err.message}`, true);
        }
    }

    function exportBufferCSV() {
        window.open("<?=site_url('API/Management/exportBufferPosts')?>", '_blank');
    }

    async function loadPendingSummaries() {
        const container = document.getElementById('pending-summaries-preview');
        container.innerHTML = '⏳ Loading...';

        try {
            const res = await fetch("<?=site_url('API/Marketing/previewPendingSummaries')?>");
            const html = await res.text();
            container.innerHTML = html;
        } catch (err) {
            container.innerHTML = '❌ Failed to load previews.';
            console.error(err);
        }
    }

    async function rejectBufferItem(id) {
        updateStatus(`⏳ Rejecting #${id}...`);
        try {
            const response = await fetch(`<?=site_url('API/Management/rejectBufferItem/')?>${id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken
                }
            });
            const data = await response.json();
            handleBufferResponse(data, id);
        } catch (err) {
            updateStatus(`❌ Error: ${err.message}`, true);
        }
    }

    function updateStatus(message, isError = false) {
        const el = document.getElementById('bufferActionStatus');
        el.classList.remove('text-success', 'text-danger');
        el.classList.add(isError ? 'text-danger' : 'text-success');
        el.textContent = message;
    }

    function handleBufferResponse(data, id) {
        if (data.status === 'success') {
            updateStatus(`✅ ${data.message}`);
            document.querySelector(`#bufferTableBody tr td:first-child:contains(${id})`).parentElement.remove();
        } else {
            updateStatus(`❌ ${data.message}`, true);
        }
    }

    function refreshBufferTable() {
        location.reload(); // Optional: You can switch this to a fetch if desired
    }
});</script><div class="card card-bordered mb-4"><div class="card-inner"><h5 class="title mb-3">💡 Suggested CTAs</h5><?php foreach($todaysStory as $summary): ?><?php if(empty($summary['cta'])): ?><div class="mb-3"><h6><?=esc($summary['title'])?></h6><p class="small text-muted"><?=esc(word_limiter($summary['summary'],15))?></p><div class="alert alert-info">Suggested CTA: <strong>👉 Learn more about<?=strtok($summary['title'],' ')?>today!</strong></div></div><?php endif; ?><?php endforeach; ?></div></div>